

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Dec 12 11:59:02 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=3
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=3
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=3
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=3
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=3
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=3
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=3
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=2
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=2
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    93                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    94  0000                     
    95                           ; Version 2.20
    96                           ; Generated 05/05/2020 GMT
    97                           ; 
    98                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC18F67K40 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129  0000                     
   130                           	psect	nvBANK0
   131  0000'                    __pnvBANK0:
   132                           	callstack 0
   133  0000'                    _interrupts_upper:
   134                           	callstack 0
   135  0000'                    	ds	2
   136  0002'                    _DCmotors_upper:
   137                           	callstack 0
   138  0002'                    	ds	1
   139  0003'                    _DCmotors_lower:
   140                           	callstack 0
   141  0003'                    	ds	1
   142  0000                     _RC7PPS	set	3689
   143  0000                     _RE2PPS	set	3700
   144  0000                     _PIE4bits	set	3629
   145  0000                     _TX4REG	set	3812
   146  0000                     _RC4REG	set	3811
   147  0000                     _PIR4bits	set	3639
   148  0000                     _RC4STAbits	set	3815
   149  0000                     _SP4BRGH	set	3814
   150  0000                     _SP4BRGL	set	3813
   151  0000                     _TX4STAbits	set	3816
   152  0000                     _BAUD4CONbits	set	3817
   153  0000                     _RX4PPS	set	3605
   154  0000                     _RC0PPS	set	3682
   155  0000                     _SSP2BUF	set	3797
   156  0000                     _SSP2CON2bits	set	3802
   157  0000                     _SSP2CON2	set	3802
   158  0000                     _SSP2STAT	set	3800
   159  0000                     _RD6PPS	set	3696
   160  0000                     _RD5PPS	set	3695
   161  0000                     _SSP2CLKPPS	set	3612
   162  0000                     _SSP2DATPPS	set	3613
   163  0000                     _ANSELDbits	set	3751
   164  0000                     _SSP2ADD	set	3798
   165  0000                     _SSP2CON1bits	set	3801
   166  0000                     _ANSELFbits	set	3764
   167  0000                     _PIR0bits	set	3635
   168  0000                     _PIE0bits	set	3625
   169  0000                     _ADPCH	set	3935
   170  0000                     _ADREFbits	set	3928
   171  0000                     _PWM7CONbits	set	4001
   172  0000                     _PWM6CONbits	set	4004
   173  0000                     _LATCbits	set	3963
   174  0000                     _LATEbits	set	3965
   175  0000                     _TRISEbits	set	3973
   176  0000                     _T2PR	set	4028
   177  0000                     _T2CLKCONbits	set	4031
   178  0000                     _T2HLTbits	set	4030
   179  0000                     _T2CONbits	set	4029
   180  0000                     _TRISCbits	set	3971
   181  0000                     _TRISAbits	set	3969
   182  0000                     _TRISGbits	set	3975
   183  0000                     _TRISHbits	set	3976
   184  0000                     _TRISDbits	set	3972
   185  0000                     _ADRESH	set	3940
   186  0000                     _ADCON0bits	set	3936
   187  0000                     _TRISFbits	set	3974
   188  0000                     _LATFbits	set	3966
   189  0000                     _LATAbits	set	3961
   190  0000                     _LATGbits	set	3967
   191  0000                     _INTCONbits	set	4082
   192  0000                     _LATHbits	set	3968
   193  0000                     _LATDbits	set	3964
   194  0000                     _PORTFbits	set	3982
   195  0000                     _LATG	set	3967
   196  0000                     _PWM7DCH	set	4000
   197  0000                     _LATE	set	3965
   198  0000                     _PWM6DCH	set	4003
   199                           
   200                           	psect	smallconst
   201  0000'                    __psmallconst:
   202                           	callstack 0
   203  0000' 00                 	db	0
   204  0001'                    STR_1:
   205                           
   206                           ; BSR set to: 15
   207  0001' 52                 	db	82	;'R'
   208  0002' 47                 	db	71	;'G'
   209  0003' 42                 	db	66	;'B'
   210  0004' 43                 	db	67	;'C'
   211  0005' 3A                 	db	58	;':'
   212  0006' 20                 	db	32
   213  0007' 25                 	db	37
   214  0008' 69                 	db	105	;'i'
   215  0009' 20                 	db	32
   216  000A' 25                 	db	37
   217  000B' 69                 	db	105	;'i'
   218  000C' 20                 	db	32
   219  000D' 25                 	db	37
   220  000E' 69                 	db	105	;'i'
   221  000F' 20                 	db	32
   222  0010' 25                 	db	37
   223  0011' 69                 	db	105	;'i'
   224  0012' 20                 	db	32
   225  0013' 20                 	db	32
   226  0014' 20                 	db	32
   227  0015' 20                 	db	32
   228  0016' 20                 	db	32
   229  0017' 52                 	db	82	;'R'
   230  0018' 47                 	db	71	;'G'
   231  0019' 42                 	db	66	;'B'
   232  001A' 43                 	db	67	;'C'
   233  001B' 5F                 	db	95	;'_'
   234  001C' 72                 	db	114	;'r'
   235  001D' 65                 	db	101	;'e'
   236  001E' 6C                 	db	108	;'l'
   237  001F' 3A                 	db	58	;':'
   238  0020' 20                 	db	32
   239  0021' 25                 	db	37
   240  0022' 2E                 	db	46
   241  0023' 33                 	db	51	;'3'
   242  0024' 66                 	db	102	;'f'
   243  0025' 20                 	db	32
   244  0026' 25                 	db	37
   245  0027' 2E                 	db	46
   246  0028' 33                 	db	51	;'3'
   247  0029' 66                 	db	102	;'f'
   248  002A' 20                 	db	32
   249  002B' 25                 	db	37
   250  002C' 2E                 	db	46
   251  002D' 33                 	db	51	;'3'
   252  002E' 66                 	db	102	;'f'
   253  002F' 20                 	db	32
   254  0030' 25                 	db	37
   255  0031' 2E                 	db	46
   256  0032' 33                 	db	51	;'3'
   257  0033' 66                 	db	102	;'f'
   258  0034' 0A                 	db	10
   259  0035' 0D                 	db	13
   260  0036' 00                 	db	0
   261  0037'                    STR_2:
   262                           
   263                           ; BSR set to: 15
   264  0037' 49                 	db	73	;'I'
   265  0038' 4E                 	db	78	;'N'
   266  0039' 46                 	db	70	;'F'
   267  003A' 00                 	db	0
   268  003B'                    STR_6:
   269                           
   270                           ; BSR set to: 15
   271  003B' 4E                 	db	78	;'N'
   272  003C' 41                 	db	65	;'A'
   273  003D' 4E                 	db	78	;'N'
   274  003E' 00                 	db	0
   275  003F'                    STR_3:
   276                           
   277                           ; BSR set to: 15
   278  003F' 69                 	db	105	;'i'
   279  0040' 6E                 	db	110	;'n'
   280  0041' 66                 	db	102	;'f'
   281  0042' 00                 	db	0
   282  0043'                    STR_7:
   283                           
   284                           ; BSR set to: 15
   285  0043' 6E                 	db	110	;'n'
   286  0044' 61                 	db	97	;'a'
   287  0045' 6E                 	db	110	;'n'
   288  0046' 00                 	db	0
   289  0047'                    STR_10:
   290                           
   291                           ; BSR set to: 15
   292  0047' 6C                 	db	108	;'l'
   293  0048' 66                 	db	102	;'f'
   294  0049' 00                 	db	0
   295  004A' 00                 	db	0	; dummy byte at the end
   296  0000                     
   297                           ; #config settings
   298                           
   299                           	psect	cinit
   300  0000'                    __pcinit:
   301                           	callstack 0
   302  0000'                    start_initialization:
   303                           	callstack 0
   304  0000'                    __initialization:
   305                           	callstack 0
   306                           
   307                           ; Clear objects allocated to BANK2 (60 bytes)
   308  0000' EE00' F000'        	lfsr	0,__pbssBANK2
   309  0004' 0E3C               	movlw	60
   310  0006'                    clear_0:
   311  0006' 6AEE               	clrf	postinc0,c
   312  0008' 06E8               	decf	wreg,f,c
   313  000A' E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to BANK1 (110 bytes)
   316  000C' EE00' F000'        	lfsr	0,__pbssBANK1
   317  0010' 0E6E               	movlw	110
   318  0012'                    clear_1:
   319  0012' 6AEE               	clrf	postinc0,c
   320  0014' 06E8               	decf	wreg,f,c
   321  0016' E1FD               	bnz	clear_1
   322                           
   323                           ; Clear objects allocated to BANK0 (17 bytes)
   324  0018' EE00' F000'        	lfsr	0,__pbssBANK0
   325  001C' 0E11               	movlw	17
   326  001E'                    clear_2:
   327  001E' 6AEE               	clrf	postinc0,c
   328  0020' 06E8               	decf	wreg,f,c
   329  0022' E1FD               	bnz	clear_2
   330                           
   331                           ; Clear objects allocated to COMRAM (2 bytes)
   332  0024' 6A00'              	clrf	(__pbssCOMRAM+1)& (0+255),c
   333  0026' 6A00'              	clrf	__pbssCOMRAM& (0+255),c
   334  0028'                    end_of_initialization:
   335                           	callstack 0
   336  0028'                    __end_of__initialization:
   337                           	callstack 0
   338  0028' 0100               	movlb	0
   339  002A' EF00' F000'        	goto	_main	;jump to C main() function
   340                           
   341                           	psect	bssCOMRAM
   342  0000'                    __pbssCOMRAM:
   343                           	callstack 0
   344  0000'                    _TxBufReadCnt:
   345                           	callstack 0
   346  0000'                    	ds	1
   347  0001'                    _TxBufWriteCnt:
   348                           	callstack 0
   349  0001'                    	ds	1
   350                           
   351                           	psect	bssBANK0
   352  0000'                    __pbssBANK0:
   353                           	callstack 0
   354  0000'                    _nout:
   355                           	callstack 0
   356  0000'                    	ds	2
   357  0002'                    _width:
   358                           	callstack 0
   359  0002'                    	ds	2
   360  0004'                    _prec:
   361                           	callstack 0
   362  0004'                    	ds	2
   363  0006'                    _flags:
   364                           	callstack 0
   365  0006'                    	ds	2
   366  0008'                    _clear_lower:
   367                           	callstack 0
   368  0008'                    	ds	2
   369  000A'                    _interrupts_lower:
   370                           	callstack 0
   371  000A'                    	ds	2
   372  000C'                    _returnhome_flag:
   373                           	callstack 0
   374  000C'                    	ds	1
   375  000D'                    _unknowncard_flag:
   376                           	callstack 0
   377  000D'                    	ds	1
   378  000E'                    _colourcard_flag:
   379                           	callstack 0
   380  000E'                    	ds	1
   381  000F'                    _RxBufReadCnt:
   382                           	callstack 0
   383  000F'                    	ds	1
   384  0010'                    _RxBufWriteCnt:
   385                           	callstack 0
   386  0010'                    	ds	1
   387                           
   388                           	psect	bssBANK1
   389  0000'                    __pbssBANK1:
   390                           	callstack 0
   391  0000'                    _EUSART4RXbuf:
   392                           	callstack 0
   393  0000'                    	ds	20
   394  0014'                    floorf@F527:
   395                           	callstack 0
   396  0014'                    	ds	4
   397  0018'                    ___fpclassifyf@F465:
   398                           	callstack 0
   399  0018'                    	ds	4
   400  001C'                    _clear_upper:
   401                           	callstack 0
   402  001C'                    	ds	2
   403  001E'                    _dbuf:
   404                           	callstack 0
   405  001E'                    	ds	80
   406                           
   407                           	psect	bssBANK2
   408  0000'                    __pbssBANK2:
   409                           	callstack 0
   410  0000'                    _EUSART4TXbuf:
   411                           	callstack 0
   412  0000'                    	ds	60
   413                           
   414                           	psect	cstackBANK1
   415  0000'                    __pcstackBANK1:
   416                           	callstack 0
   417  0000'                    colourcards_testing@buf:
   418                           	callstack 0
   419                           
   420                           ; 100 bytes @ 0x0
   421  0000'                    	ds	100
   422  0064'                    colourcards_testing@R_rel:
   423                           	callstack 0
   424                           
   425                           ; 4 bytes @ 0x64
   426  0064'                    	ds	4
   427  0068'                    colourcards_testing@G_rel:
   428                           	callstack 0
   429                           
   430                           ; 4 bytes @ 0x68
   431  0068'                    	ds	4
   432  006C'                    colourcards_testing@B_rel:
   433                           	callstack 0
   434                           
   435                           ; 4 bytes @ 0x6C
   436  006C'                    	ds	4
   437  0070'                    colourcards_testing@C_rel:
   438                           	callstack 0
   439                           
   440                           ; 4 bytes @ 0x70
   441  0070'                    	ds	4
   442  0074'                    colourcards_testing@current:
   443                           	callstack 0
   444                           
   445                           ; 8 bytes @ 0x74
   446  0074'                    	ds	8
   447                           
   448                           	psect	cstackBANK0
   449  0000'                    __pcstackBANK0:
   450                           	callstack 0
   451  0000'                    _efgtoa$2742:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x0
   455  0000'                    	ds	2
   456  0002'                    _efgtoa$2743:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x2
   460  0002'                    	ds	2
   461  0004'                    _efgtoa$2747:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x4
   465  0004'                    	ds	2
   466  0006'                    _efgtoa$2751:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x6
   470  0006'                    	ds	2
   471  0008'                    _efgtoa$2752:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x8
   475  0008'                    	ds	2
   476  000A'                    _efgtoa$2753:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0xA
   480  000A'                    	ds	2
   481  000C'                    efgtoa@t:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0xC
   485  000C'                    	ds	2
   486  000E'                    efgtoa@pp:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0xE
   490  000E'                    	ds	2
   491  0010'                    efgtoa@ne:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x10
   495  0010'                    	ds	2
   496  0012'                    efgtoa@m:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x12
   500  0012'                    	ds	2
   501  0014'                    efgtoa@ou:
   502                           	callstack 0
   503                           
   504                           ; 4 bytes @ 0x14
   505  0014'                    	ds	4
   506  0018'                    efgtoa@d:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x18
   510  0018'                    	ds	2
   511  001A'                    efgtoa@sign:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0x1A
   515  001A'                    	ds	2
   516  001C'                    efgtoa@p:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x1C
   520  001C'                    	ds	2
   521  001E'                    efgtoa@w:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x1E
   525  001E'                    	ds	2
   526  0020'                    efgtoa@nmode:
   527                           	callstack 0
   528                           
   529                           ; 1 bytes @ 0x20
   530  0020'                    	ds	1
   531  0021'                    efgtoa@mode:
   532                           	callstack 0
   533                           
   534                           ; 1 bytes @ 0x21
   535  0021'                    	ds	1
   536  0022'                    efgtoa@h:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x22
   540  0022'                    	ds	4
   541  0026'                    efgtoa@l:
   542                           	callstack 0
   543                           
   544                           ; 4 bytes @ 0x26
   545  0026'                    	ds	4
   546  002A'                    efgtoa@i:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x2A
   550  002A'                    	ds	2
   551  002C'                    efgtoa@g:
   552                           	callstack 0
   553                           
   554                           ; 4 bytes @ 0x2C
   555  002C'                    	ds	4
   556  0030'                    efgtoa@e:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x30
   560  0030'                    	ds	2
   561  0032'                    efgtoa@n:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0x32
   565  0032'                    	ds	2
   566  0034'                    efgtoa@u:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x34
   570  0034'                    	ds	4
   571  0038'                    vfpfcnvrt@ll:
   572                           	callstack 0
   573                           
   574                           ; 8 bytes @ 0x38
   575  0038'                    	ds	8
   576  0040'                    _vfpfcnvrt$2767:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x40
   580  0040'                    	ds	2
   581  0042'                    _vfpfcnvrt$2772:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0x42
   585  0042'                    	ds	2
   586  0044'                    vfpfcnvrt@f:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0x44
   590  0044'                    	ds	4
   591  0048'                    vfpfcnvrt@ct:
   592                           	callstack 0
   593                           
   594                           ; 3 bytes @ 0x48
   595  0048'                    	ds	3
   596  004B'                    vfpfcnvrt@c:
   597                           	callstack 0
   598                           
   599                           ; 1 bytes @ 0x4B
   600  004B'                    	ds	1
   601  004C'                    ?_sprintf:
   602                           	callstack 0
   603  004C'                    sprintf@s:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x4C
   607  004C'                    	ds	2
   608  004E'                    sprintf@fmt:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0x4E
   612  004E'                    	ds	26
   613  0068'                    sprintf@ap:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0x68
   617  0068'                    	ds	2
   618  006A'                    sprintf@f:
   619                           	callstack 0
   620                           
   621                           ; 6 bytes @ 0x6A
   622  006A'                    	ds	6
   623  0070'                    main@current:
   624                           	callstack 0
   625                           
   626                           ; 8 bytes @ 0x70
   627  0070'                    	ds	8
   628  0078'                    main@motorL:
   629                           	callstack 0
   630                           
   631                           ; 9 bytes @ 0x78
   632  0078'                    	ds	9
   633  0081'                    main@motorR:
   634                           	callstack 0
   635                           
   636                           ; 9 bytes @ 0x81
   637  0081'                    	ds	9
   638                           
   639                           	psect	cstackCOMRAM
   640  0000'                    __pcstackCOMRAM:
   641                           	callstack 0
   642  0000'                    ??_DCmotors_adjustval:
   643  0000'                    ??_I2C_2_Master_Idle:
   644  0000'                    ?_strlen:
   645                           	callstack 0
   646  0000'                    ?___fpclassifyf:
   647                           	callstack 0
   648  0000'                    ?_isupper:
   649                           	callstack 0
   650  0000'                    ?_isdigit:
   651                           	callstack 0
   652  0000'                    ?_strncmp:
   653                           	callstack 0
   654  0000'                    ?_isspace:
   655                           	callstack 0
   656  0000'                    ?___wmul:
   657                           	callstack 0
   658  0000'                    ?___awmod:
   659                           	callstack 0
   660  0000'                    ?___fladd:
   661                           	callstack 0
   662  0000'                    ?___flmul:
   663                           	callstack 0
   664  0000'                    ?___flneg:
   665                           	callstack 0
   666  0000'                    ?___fltol:
   667                           	callstack 0
   668  0000'                    ?___xxtofl:
   669                           	callstack 0
   670  0000'                    ?___aodiv:
   671                           	callstack 0
   672  0000'                    ?___aomod:
   673                           	callstack 0
   674  0000'                    ADC_getval@tmpval:
   675                           	callstack 0
   676  0000'                    colourclickLEDs_C@tog:
   677                           	callstack 0
   678  0000'                    sendCharSerial4@charToSend:
   679                           	callstack 0
   680  0000'                    DCmotors_init@PWMperiod:
   681                           	callstack 0
   682  0000'                    ___wmul@multiplier:
   683                           	callstack 0
   684  0000'                    ___awmod@dividend:
   685                           	callstack 0
   686  0000'                    isdigit@c:
   687                           	callstack 0
   688  0000'                    isspace@c:
   689                           	callstack 0
   690  0000'                    isupper@c:
   691                           	callstack 0
   692  0000'                    fputc@c:
   693                           	callstack 0
   694  0000'                    strcpy@dest:
   695                           	callstack 0
   696  0000'                    strlen@s:
   697                           	callstack 0
   698  0000'                    strncmp@_l:
   699                           	callstack 0
   700  0000'                    ___fleq@ff1:
   701                           	callstack 0
   702  0000'                    ___flneg@f1:
   703                           	callstack 0
   704  0000'                    ___fltol@f1:
   705                           	callstack 0
   706  0000'                    ___fladd@b:
   707                           	callstack 0
   708  0000'                    ___flmul@b:
   709                           	callstack 0
   710  0000'                    ___xxtofl@val:
   711                           	callstack 0
   712  0000'                    ___fpclassifyf@x:
   713                           	callstack 0
   714  0000'                    ___aodiv@dividend:
   715                           	callstack 0
   716  0000'                    ___aomod@dividend:
   717                           	callstack 0
   718                           
   719                           ; 8 bytes @ 0x0
   720  0000'                    	ds	1
   721  0001'                    ??_I2C_2_Master_Read:
   722  0001'                    I2C_2_Master_Write@data_byte:
   723                           	callstack 0
   724  0001'                    checkbatterylevel@batterylevel:
   725                           	callstack 0
   726  0001'                    sendStringSerial4@string:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x1
   730  0001'                    	ds	1
   731  0002'                    ??_isupper:
   732  0002'                    ??_isdigit:
   733  0002'                    ??_isspace:
   734  0002'                    colourclick_writetoaddr@value:
   735                           	callstack 0
   736  0002'                    I2C_2_Master_Read@ack:
   737                           	callstack 0
   738  0002'                    DCmotors_adjustval@i:
   739                           	callstack 0
   740  0002'                    ___wmul@multiplicand:
   741                           	callstack 0
   742  0002'                    ___awmod@divisor:
   743                           	callstack 0
   744  0002'                    fputc@fp:
   745                           	callstack 0
   746  0002'                    strcpy@src:
   747                           	callstack 0
   748  0002'                    strlen@a:
   749                           	callstack 0
   750  0002'                    strncmp@_r:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x2
   754  0002'                    	ds	1
   755  0003'                    colourclick_writetoaddr@address:
   756                           	callstack 0
   757  0003'                    I2C_2_Master_Read@tmp:
   758                           	callstack 0
   759                           
   760                           ; 1 bytes @ 0x3
   761  0003'                    	ds	1
   762  0004'                    ??_colourclick_init:
   763  0004'                    ??_fputc:
   764  0004'                    ??___fpclassifyf:
   765  0004'                    ??_strcpy:
   766  0004'                    ??___fltol:
   767  0004'                    ??___xxtofl:
   768  0004'                    ?_colourclick_readR:
   769                           	callstack 0
   770  0004'                    ?_colourclick_readG:
   771                           	callstack 0
   772  0004'                    ?_colourclick_readB:
   773                           	callstack 0
   774  0004'                    ?_colourclick_readC:
   775                           	callstack 0
   776  0004'                    ___awmod@counter:
   777                           	callstack 0
   778  0004'                    ___wmul@product:
   779                           	callstack 0
   780  0004'                    strncmp@n:
   781                           	callstack 0
   782  0004'                    ___fleq@ff2:
   783                           	callstack 0
   784  0004'                    ___fladd@a:
   785                           	callstack 0
   786  0004'                    ___flmul@a:
   787                           	callstack 0
   788                           
   789                           ; 4 bytes @ 0x4
   790  0004'                    	ds	1
   791  0005'                    ___awmod@sign:
   792                           	callstack 0
   793                           
   794                           ; 1 bytes @ 0x5
   795  0005'                    	ds	1
   796  0006'                    ??_strncmp:
   797  0006'                    ??_colourclick_readR:
   798  0006'                    ??_colourclick_readG:
   799  0006'                    ??_colourclick_readB:
   800  0006'                    ??_colourclick_readC:
   801  0006'                    ?_tolower:
   802                           	callstack 0
   803  0006'                    ?___awdiv:
   804                           	callstack 0
   805  0006'                    _isspace$2839:
   806                           	callstack 0
   807  0006'                    ___awdiv@dividend:
   808                           	callstack 0
   809  0006'                    strcpy@s:
   810                           	callstack 0
   811  0006'                    tolower@c:
   812                           	callstack 0
   813                           
   814                           ; 2 bytes @ 0x6
   815  0006'                    	ds	1
   816  0007'                    ?_atoi:
   817                           	callstack 0
   818  0007'                    atoi@s:
   819                           	callstack 0
   820  0007'                    strncmp@l:
   821                           	callstack 0
   822                           
   823                           ; 2 bytes @ 0x7
   824  0007'                    	ds	1
   825  0008'                    ??___fladd:
   826  0008'                    ??___flmul:
   827  0008'                    ??_tolower:
   828  0008'                    ??___fleq:
   829  0008'                    ___fltol@sign1:
   830                           	callstack 0
   831  0008'                    ___xxtofl@sign:
   832                           	callstack 0
   833  0008'                    ___awdiv@divisor:
   834                           	callstack 0
   835  0008'                    ___fpclassifyf@e:
   836                           	callstack 0
   837  0008'                    strcpy@d:
   838                           	callstack 0
   839  0008'                    ___aodiv@divisor:
   840                           	callstack 0
   841  0008'                    ___aomod@divisor:
   842                           	callstack 0
   843                           
   844                           ; 8 bytes @ 0x8
   845  0008'                    	ds	1
   846  0009'                    ??_atoi:
   847  0009'                    ___fltol@exp1:
   848                           	callstack 0
   849  0009'                    ___xxtofl@exp:
   850                           	callstack 0
   851  0009'                    colourclick_readR@tmp:
   852                           	callstack 0
   853  0009'                    colourclick_readG@tmp:
   854                           	callstack 0
   855  0009'                    colourclick_readB@tmp:
   856                           	callstack 0
   857  0009'                    colourclick_readC@tmp:
   858                           	callstack 0
   859  0009'                    fputs@s:
   860                           	callstack 0
   861  0009'                    strncmp@r:
   862                           	callstack 0
   863                           
   864                           ; 2 bytes @ 0x9
   865  0009'                    	ds	1
   866  000A'                    ___awdiv@counter:
   867                           	callstack 0
   868  000A'                    ___xxtofl@arg:
   869                           	callstack 0
   870  000A'                    ___fpclassifyf@u:
   871                           	callstack 0
   872                           
   873                           ; 4 bytes @ 0xA
   874  000A'                    	ds	1
   875  000B'                    ___awdiv@sign:
   876                           	callstack 0
   877  000B'                    colourclick_readRGBC@tmpval:
   878                           	callstack 0
   879  000B'                    fputs@fp:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0xB
   883  000B'                    	ds	1
   884  000C'                    ___fladd@signs:
   885                           	callstack 0
   886  000C'                    ___flmul@sign:
   887                           	callstack 0
   888  000C'                    ___awdiv@quotient:
   889                           	callstack 0
   890  000C'                    _tolower$2903:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0xC
   894  000C'                    	ds	1
   895  000D'                    ??_colourclick_calibration:
   896  000D'                    ___fladd@aexp:
   897                           	callstack 0
   898  000D'                    fputs@c:
   899                           	callstack 0
   900  000D'                    atoi@neg:
   901                           	callstack 0
   902  000D'                    ___flmul@grs:
   903                           	callstack 0
   904                           
   905                           ; 4 bytes @ 0xD
   906  000D'                    	ds	1
   907  000E'                    ?___fldiv:
   908                           	callstack 0
   909  000E'                    ___fladd@bexp:
   910                           	callstack 0
   911  000E'                    DCmotors_setPWM@m:
   912                           	callstack 0
   913  000E'                    fputs@i:
   914                           	callstack 0
   915  000E'                    ___fldiv@b:
   916                           	callstack 0
   917                           
   918                           ; 4 bytes @ 0xE
   919  000E'                    	ds	1
   920  000F'                    colourclick_calibration@i:
   921                           	callstack 0
   922  000F'                    ___fladd@grs:
   923                           	callstack 0
   924  000F'                    _atoi$2808:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0xF
   928  000F'                    	ds	1
   929  0010'                    ??_DCmotors_setPWM:
   930  0010'                    ?_pad:
   931                           	callstack 0
   932  0010'                    ___aodiv@counter:
   933                           	callstack 0
   934  0010'                    ___aomod@counter:
   935                           	callstack 0
   936  0010'                    pad@fp:
   937                           	callstack 0
   938  0010'                    colourclick_calibration@initial:
   939                           	callstack 0
   940                           
   941                           ; 8 bytes @ 0x10
   942  0010'                    	ds	1
   943  0011'                    ___aodiv@sign:
   944                           	callstack 0
   945  0011'                    ___aomod@sign:
   946                           	callstack 0
   947  0011'                    ___flmul@aexp:
   948                           	callstack 0
   949  0011'                    _atoi$2810:
   950                           	callstack 0
   951                           
   952                           ; 2 bytes @ 0x11
   953  0011'                    	ds	1
   954  0012'                    ?_abs:
   955                           	callstack 0
   956  0012'                    ___flmul@bexp:
   957                           	callstack 0
   958  0012'                    pad@buf:
   959                           	callstack 0
   960  0012'                    abs@a:
   961                           	callstack 0
   962  0012'                    ___fldiv@a:
   963                           	callstack 0
   964  0012'                    ___aodiv@quotient:
   965                           	callstack 0
   966                           
   967                           ; 8 bytes @ 0x12
   968  0012'                    	ds	1
   969  0013'                    _atoi$2809:
   970                           	callstack 0
   971  0013'                    ___flmul@prod:
   972                           	callstack 0
   973                           
   974                           ; 4 bytes @ 0x13
   975  0013'                    	ds	1
   976  0014'                    ??_abs:
   977  0014'                    pad@p:
   978                           	callstack 0
   979  0014'                    atoi@n:
   980                           	callstack 0
   981                           
   982                           ; 2 bytes @ 0x14
   983  0014'                    	ds	2
   984  0016'                    ??___fldiv:
   985  0016'                    ??_pad:
   986                           
   987                           ; 1 bytes @ 0x16
   988  0016'                    	ds	1
   989  0017'                    DCmotors_setPWM@PWMduty:
   990                           	callstack 0
   991  0017'                    ___flmul@temp:
   992                           	callstack 0
   993  0017'                    pad@i:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x17
   997  0017'                    	ds	1
   998  0018'                    colourclick_calibration@current:
   999                           	callstack 0
  1000                           
  1001                           ; 8 bytes @ 0x18
  1002  0018'                    	ds	1
  1003  0019'                    ?___flsub:
  1004                           	callstack 0
  1005  0019'                    forward@mL:
  1006                           	callstack 0
  1007  0019'                    reverse@mL:
  1008                           	callstack 0
  1009  0019'                    stop@mL:
  1010                           	callstack 0
  1011  0019'                    left@mL:
  1012                           	callstack 0
  1013  0019'                    right@mL:
  1014                           	callstack 0
  1015  0019'                    pad@w:
  1016                           	callstack 0
  1017  0019'                    ___flge@ff1:
  1018                           	callstack 0
  1019  0019'                    ___flsub@b:
  1020                           	callstack 0
  1021                           
  1022                           ; 4 bytes @ 0x19
  1023  0019'                    	ds	1
  1024  001A'                    ___fldiv@rem:
  1025                           	callstack 0
  1026                           
  1027                           ; 4 bytes @ 0x1A
  1028  001A'                    	ds	1
  1029  001B'                    ?_dtoa:
  1030                           	callstack 0
  1031  001B'                    forward@mR:
  1032                           	callstack 0
  1033  001B'                    reverse@mR:
  1034                           	callstack 0
  1035  001B'                    stop@mR:
  1036                           	callstack 0
  1037  001B'                    left@mR:
  1038                           	callstack 0
  1039  001B'                    right@mR:
  1040                           	callstack 0
  1041  001B'                    dtoa@fp:
  1042                           	callstack 0
  1043                           
  1044                           ; 2 bytes @ 0x1B
  1045  001B'                    	ds	2
  1046  001D'                    ??_forward:
  1047  001D'                    ??_reverse:
  1048  001D'                    ??_stop:
  1049  001D'                    left@deg:
  1050                           	callstack 0
  1051  001D'                    right@deg:
  1052                           	callstack 0
  1053  001D'                    ___flge@ff2:
  1054                           	callstack 0
  1055  001D'                    ___flsub@a:
  1056                           	callstack 0
  1057  001D'                    dtoa@d:
  1058                           	callstack 0
  1059                           
  1060                           ; 8 bytes @ 0x1D
  1061  001D'                    	ds	1
  1062  001E'                    ___fldiv@sign:
  1063                           	callstack 0
  1064                           
  1065                           ; 1 bytes @ 0x1E
  1066  001E'                    	ds	1
  1067  001F'                    ??_left:
  1068  001F'                    ??_right:
  1069  001F'                    ___fldiv@new_exp:
  1070                           	callstack 0
  1071                           
  1072                           ; 2 bytes @ 0x1F
  1073  001F'                    	ds	2
  1074  0021'                    ??___flge:
  1075  0021'                    turnleft@mL:
  1076                           	callstack 0
  1077  0021'                    turnright@mL:
  1078                           	callstack 0
  1079  0021'                    ___fldiv@grs:
  1080                           	callstack 0
  1081                           
  1082                           ; 4 bytes @ 0x21
  1083  0021'                    	ds	2
  1084  0023'                    turnleft@mR:
  1085                           	callstack 0
  1086  0023'                    turnright@mR:
  1087                           	callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x23
  1090  0023'                    	ds	2
  1091  0025'                    ??_dtoa:
  1092  0025'                    ___fldiv@bexp:
  1093                           	callstack 0
  1094  0025'                    turnleft@deg:
  1095                           	callstack 0
  1096  0025'                    turnright@deg:
  1097                           	callstack 0
  1098                           
  1099                           ; 2 bytes @ 0x25
  1100  0025'                    	ds	1
  1101  0026'                    ___fldiv@aexp:
  1102                           	callstack 0
  1103                           
  1104                           ; 1 bytes @ 0x26
  1105  0026'                    	ds	1
  1106  0027'                    ?_floorf:
  1107                           	callstack 0
  1108  0027'                    colourcards_readRGBC@tmpval:
  1109                           	callstack 0
  1110  0027'                    DCmotors_calibration@mL:
  1111                           	callstack 0
  1112  0027'                    DCmotors_testing@mL:
  1113                           	callstack 0
  1114  0027'                    floorf@x:
  1115                           	callstack 0
  1116                           
  1117                           ; 4 bytes @ 0x27
  1118  0027'                    	ds	2
  1119  0029'                    colourcards_readRGBC@mL:
  1120                           	callstack 0
  1121  0029'                    DCmotors_calibration@mR:
  1122                           	callstack 0
  1123  0029'                    DCmotors_testing@mR:
  1124                           	callstack 0
  1125                           
  1126                           ; 2 bytes @ 0x29
  1127  0029'                    	ds	2
  1128  002B'                    ??_DCmotors_calibration:
  1129  002B'                    ??_DCmotors_testing:
  1130  002B'                    ??_floorf:
  1131  002B'                    colourcards_readRGBC@mR:
  1132                           	callstack 0
  1133                           
  1134                           ; 2 bytes @ 0x2B
  1135  002B'                    	ds	2
  1136  002D'                    ??_colourcards_readRGBC:
  1137  002D'                    _dtoa$2718:
  1138                           	callstack 0
  1139                           
  1140                           ; 2 bytes @ 0x2D
  1141  002D'                    	ds	2
  1142  002F'                    dtoa@p:
  1143                           	callstack 0
  1144                           
  1145                           ; 2 bytes @ 0x2F
  1146  002F'                    	ds	2
  1147  0031'                    dtoa@w:
  1148                           	callstack 0
  1149  0031'                    colourcards_readRGBC@R_rel:
  1150                           	callstack 0
  1151  0031'                    floorf@m:
  1152                           	callstack 0
  1153                           
  1154                           ; 4 bytes @ 0x31
  1155  0031'                    	ds	2
  1156  0033'                    dtoa@s:
  1157                           	callstack 0
  1158                           
  1159                           ; 2 bytes @ 0x33
  1160  0033'                    	ds	2
  1161  0035'                    floorf@e:
  1162                           	callstack 0
  1163  0035'                    colourcards_readRGBC@G_rel:
  1164                           	callstack 0
  1165  0035'                    dtoa@n:
  1166                           	callstack 0
  1167                           
  1168                           ; 8 bytes @ 0x35
  1169  0035'                    	ds	2
  1170  0037'                    floorf@u:
  1171                           	callstack 0
  1172                           
  1173                           ; 4 bytes @ 0x37
  1174  0037'                    	ds	2
  1175  0039'                    colourcards_readRGBC@B_rel:
  1176                           	callstack 0
  1177                           
  1178                           ; 4 bytes @ 0x39
  1179  0039'                    	ds	2
  1180  003B'                    ?_efgtoa:
  1181                           	callstack 0
  1182  003B'                    efgtoa@fp:
  1183                           	callstack 0
  1184                           
  1185                           ; 2 bytes @ 0x3B
  1186  003B'                    	ds	2
  1187  003D'                    dtoa@i:
  1188                           	callstack 0
  1189  003D'                    efgtoa@f:
  1190                           	callstack 0
  1191                           
  1192                           ; 4 bytes @ 0x3D
  1193  003D'                    	ds	4
  1194  0041'                    efgtoa@c:
  1195                           	callstack 0
  1196                           
  1197                           ; 1 bytes @ 0x41
  1198  0041'                    	ds	1
  1199  0042'                    ??_efgtoa:
  1200                           
  1201                           ; 1 bytes @ 0x42
  1202  0042'                    	ds	5
  1203  0047'                    ?_vfpfcnvrt:
  1204                           	callstack 0
  1205  0047'                    vfpfcnvrt@fp:
  1206                           	callstack 0
  1207                           
  1208                           ; 2 bytes @ 0x47
  1209  0047'                    	ds	2
  1210  0049'                    vfpfcnvrt@fmt:
  1211                           	callstack 0
  1212                           
  1213                           ; 2 bytes @ 0x49
  1214  0049'                    	ds	2
  1215  004B'                    vfpfcnvrt@ap:
  1216                           	callstack 0
  1217                           
  1218                           ; 2 bytes @ 0x4B
  1219  004B'                    	ds	2
  1220  004D'                    ??_vfpfcnvrt:
  1221                           
  1222                           ; 1 bytes @ 0x4D
  1223  004D'                    	ds	4
  1224  0051'                    ?_vfprintf:
  1225                           	callstack 0
  1226  0051'                    vfprintf@fp:
  1227                           	callstack 0
  1228                           
  1229                           ; 2 bytes @ 0x51
  1230  0051'                    	ds	2
  1231  0053'                    vfprintf@fmt:
  1232                           	callstack 0
  1233                           
  1234                           ; 2 bytes @ 0x53
  1235  0053'                    	ds	2
  1236  0055'                    vfprintf@ap:
  1237                           	callstack 0
  1238                           
  1239                           ; 2 bytes @ 0x55
  1240  0055'                    	ds	2
  1241  0057'                    vfprintf@cfmt:
  1242                           	callstack 0
  1243                           
  1244                           ; 2 bytes @ 0x57
  1245  0057'                    	ds	2
  1246  0059'                    ??_colourcards_testing:
  1247  0059'                    
  1248                           ; 1 bytes @ 0x59
  1249  0059'                    	ds	2
  1250  005B'                    ??_main:
  1251                           
  1252                           ; 1 bytes @ 0x5B
  1253  005B'                    	ds	2
  1254                           
  1255 ;;
  1256 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1257 ;;
  1258 ;; *************** function _main *****************
  1259 ;; Defined at:
  1260 ;;		line 7 in file "main.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;		None
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;  motorR          9  129[BANK0 ] struct .
  1265 ;;  motorL          9  120[BANK0 ] struct .
  1266 ;;  current         8  112[BANK0 ] struct .
  1267 ;;  PWMperiod       1    0        unsigned char 
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1278 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1279 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1280 ;;      Totals:         2      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1281 ;;Total ram usage:       28 bytes
  1282 ;; Hardware stack levels required when called: 9
  1283 ;; This function calls:
  1284 ;;		_ADC_init
  1285 ;;		_DCmotors_calibration
  1286 ;;		_DCmotors_init
  1287 ;;		_DCmotors_testing
  1288 ;;		_USART4_init
  1289 ;;		_checkbatterylevel
  1290 ;;		_colourcards_readRGBC
  1291 ;;		_colourcards_testing
  1292 ;;		_colourclickLEDs_C
  1293 ;;		_colourclick_calibration
  1294 ;;		_colourclick_init
  1295 ;;		_colourclick_readRGBC
  1296 ;;		_forward
  1297 ;;		_interrupts_init
  1298 ;; This function is called by:
  1299 ;;		Startup code after reset
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           	psect	text0
  1304  0000'                    __ptext0:
  1305                           	callstack 0
  1306  0000'                    _main:
  1307                           	callstack 22
  1308  0000'                    
  1309                           ;main.c: 12:     interrupts_lower = 0;
  1310  0000' 0E00               	movlw	0
  1311  0002' 0100               	movlb	0	; () banked
  1312  0004' 6F00'              	movwf	(_interrupts_lower+1)& (0+255),b	;volatile
  1313  0006' 0E00               	movlw	0
  1314  0008' 6F00'              	movwf	_interrupts_lower& (0+255),b	;volatile
  1315  000A'                    
  1316                           ; BSR set to: 0
  1317                           ;main.c: 13:     interrupts_upper = 65535;
  1318  000A' 6900'              	setf	_interrupts_upper& (0+255),b	;volatile
  1319  000C' 6900'              	setf	(_interrupts_upper+1)& (0+255),b	;volatile
  1320                           
  1321                           ;main.c: 14:     DCmotors_lower = 50;
  1322  000E' 0E32               	movlw	50
  1323  0010' 6F00'              	movwf	_DCmotors_lower& (0+255),b	;volatile
  1324                           
  1325                           ;main.c: 15:     DCmotors_upper = 50;
  1326  0012' 0E32               	movlw	50
  1327  0014' 6F00'              	movwf	_DCmotors_upper& (0+255),b	;volatile
  1328                           
  1329                           ;main.c: 16:     colourcard_flag = 0;
  1330  0016' 0E00               	movlw	0
  1331  0018' 6F00'              	movwf	_colourcard_flag& (0+255),b	;volatile
  1332                           
  1333                           ;main.c: 17:     unknowncard_flag = 0;
  1334  001A' 0E00               	movlw	0
  1335  001C' 6F00'              	movwf	_unknowncard_flag& (0+255),b	;volatile
  1336                           
  1337                           ;main.c: 18:     returnhome_flag = 0;
  1338  001E' 0E00               	movlw	0
  1339  0020' 6F00'              	movwf	_returnhome_flag& (0+255),b	;volatile
  1340  0022'                    
  1341                           ; BSR set to: 0
  1342                           ;main.c: 20:     ADC_init();
  1343  0022' EC00' F000'        	call	_ADC_init	;wreg free
  1344  0026'                    
  1345                           ;main.c: 21:     colourclick_init();
  1346  0026' EC00' F000'        	call	_colourclick_init	;wreg free
  1347  002A'                    
  1348                           ;main.c: 22:     DCmotors_init(PWMperiod);
  1349  002A' 0E63               	movlw	99
  1350  002C' EC00' F000'        	call	_DCmotors_init
  1351  0030'                    
  1352                           ;main.c: 23:     USART4_init();
  1353  0030' EC00' F000'        	call	_USART4_init	;wreg free
  1354  0034'                    
  1355                           ;main.c: 24:     checkbatterylevel();
  1356  0034' EC00' F000'        	call	_checkbatterylevel	;wreg free
  1357  0038'                    
  1358                           ;main.c: 26:     DC_motor motorL;;main.c: 27:     motorL.power=0;
  1359  0038' 0E00               	movlw	0
  1360  003A' 0100               	movlb	0	; () banked
  1361  003C' 6F00'              	movwf	main@motorL& (0+255),b
  1362  003E'                    
  1363                           ; BSR set to: 0
  1364                           ;main.c: 28:     motorL.direction=1;
  1365  003E' 0E01               	movlw	1
  1366  0040' 6F00'              	movwf	(main@motorL+1)& (0+255),b
  1367  0042'                    
  1368                           ; BSR set to: 0
  1369                           ;main.c: 29:     motorL.dutyHighByte=(unsigned char *)(&PWM6DCH);
  1370  0042' 0EA3               	movlw	163
  1371  0044' 6F00'              	movwf	(main@motorL+2)& (0+255),b
  1372  0046' 0E0F               	movlw	15
  1373  0048' 6F00'              	movwf	(main@motorL+3)& (0+255),b
  1374  004A'                    
  1375                           ; BSR set to: 0
  1376                           ;main.c: 30:     motorL.dir_LAT=(unsigned char *)(&LATE);
  1377  004A' 0E7D               	movlw	125
  1378  004C' 6F00'              	movwf	(main@motorL+4)& (0+255),b
  1379  004E' 0E0F               	movlw	15
  1380  0050' 6F00'              	movwf	(main@motorL+5)& (0+255),b
  1381  0052'                    
  1382                           ; BSR set to: 0
  1383                           ;main.c: 31:     motorL.dir_pin=4;
  1384  0052' 0E04               	movlw	4
  1385  0054' 6F00'              	movwf	(main@motorL+6)& (0+255),b
  1386  0056'                    
  1387                           ; BSR set to: 0
  1388                           ;main.c: 32:     motorL.PWMperiod=PWMperiod;
  1389  0056' 0E00               	movlw	0
  1390  0058' 6F00'              	movwf	(main@motorL+8)& (0+255),b
  1391  005A' 0E63               	movlw	99
  1392  005C' 6F00'              	movwf	(main@motorL+7)& (0+255),b
  1393  005E'                    
  1394                           ; BSR set to: 0
  1395                           ;main.c: 34:     DC_motor motorR;;main.c: 35:     motorR.power=0;
  1396  005E' 0E00               	movlw	0
  1397  0060' 6F00'              	movwf	main@motorR& (0+255),b
  1398  0062'                    
  1399                           ; BSR set to: 0
  1400                           ;main.c: 36:     motorR.direction=1;
  1401  0062' 0E01               	movlw	1
  1402  0064' 6F00'              	movwf	(main@motorR+1)& (0+255),b
  1403  0066'                    
  1404                           ; BSR set to: 0
  1405                           ;main.c: 37:     motorR.dutyHighByte=(unsigned char *)(&PWM7DCH);
  1406  0066' 0EA0               	movlw	160
  1407  0068' 6F00'              	movwf	(main@motorR+2)& (0+255),b
  1408  006A' 0E0F               	movlw	15
  1409  006C' 6F00'              	movwf	(main@motorR+3)& (0+255),b
  1410  006E'                    
  1411                           ; BSR set to: 0
  1412                           ;main.c: 38:     motorR.dir_LAT=(unsigned char *)(&LATG);
  1413  006E' 0E7F               	movlw	127
  1414  0070' 6F00'              	movwf	(main@motorR+4)& (0+255),b
  1415  0072' 0E0F               	movlw	15
  1416  0074' 6F00'              	movwf	(main@motorR+5)& (0+255),b
  1417  0076'                    
  1418                           ; BSR set to: 0
  1419                           ;main.c: 39:     motorR.dir_pin=6;
  1420  0076' 0E06               	movlw	6
  1421  0078' 6F00'              	movwf	(main@motorR+6)& (0+255),b
  1422  007A'                    
  1423                           ; BSR set to: 0
  1424                           ;main.c: 40:     motorR.PWMperiod=PWMperiod;
  1425  007A' 0E00               	movlw	0
  1426  007C' 6F00'              	movwf	(main@motorR+8)& (0+255),b
  1427  007E' 0E63               	movlw	99
  1428  0080' 6F00'              	movwf	(main@motorR+7)& (0+255),b
  1429  0082'                    
  1430                           ; BSR set to: 0
  1431                           ;main.c: 45:     colourclick_calibration();
  1432  0082' EC00' F000'        	call	_colourclick_calibration	;wreg free
  1433  0086'                    
  1434                           ;main.c: 50:     DCmotors_calibration(&motorL, &motorR);
  1435  0086' 0E00'              	movlw	low main@motorL
  1436  0088' 6E00'              	movwf	DCmotors_calibration@mL^0,c
  1437  008A' 0E00'              	movlw	high main@motorL
  1438  008C' 6E00'              	movwf	(DCmotors_calibration@mL+1)^0,c
  1439  008E' 0E00'              	movlw	low main@motorR
  1440  0090' 6E00'              	movwf	DCmotors_calibration@mR^0,c
  1441  0092' 0E00'              	movlw	high main@motorR
  1442  0094' 6E00'              	movwf	(DCmotors_calibration@mR+1)^0,c
  1443  0096' EC00' F000'        	call	_DCmotors_calibration	;wreg free
  1444  009A'                    l75:
  1445  009A' A48E               	btfss	142,2,c	;volatile
  1446  009C' EF00' F000'        	goto	u7141
  1447  00A0' EF00' F000'        	goto	u7140
  1448  00A4'                    u7141:
  1449  00A4' EF00' F000'        	goto	l79
  1450  00A8'                    u7140:
  1451  00A8' B68E               	btfsc	142,3,c	;volatile
  1452  00AA' EF00' F000'        	goto	u7151
  1453  00AE' EF00' F000'        	goto	u7150
  1454  00B2'                    u7151:
  1455  00B2' EF00' F000'        	goto	l75
  1456  00B6'                    u7150:
  1457  00B6'                    l79:
  1458                           
  1459                           ;main.c: 56:     LATDbits.LATD3 = 1;
  1460  00B6' 867C               	bsf	124,3,c	;volatile
  1461  00B8'                    
  1462                           ;main.c: 57:     colourclickLEDs_C(1);
  1463  00B8' 0E01               	movlw	1
  1464  00BA' EC00' F000'        	call	_colourclickLEDs_C
  1465  00BE'                    
  1466                           ;main.c: 58:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1467  00BE' 0E52               	movlw	82
  1468  00C0' 6E00'              	movwf	(??_main+1)^0,c
  1469  00C2' 0E2B               	movlw	43
  1470  00C4' 6E00'              	movwf	??_main^0,c
  1471  00C6' 0E00               	movlw	0
  1472  00C8'                    u7217:
  1473  00C8' 2EE8               	decfsz	wreg,f,c
  1474  00CA' D7FE               	bra	u7217
  1475  00CC' 2E00'              	decfsz	??_main^0,f,c
  1476  00CE' D7FC               	bra	u7217
  1477  00D0' 2E00'              	decfsz	(??_main+1)^0,f,c
  1478  00D2' D7FA               	bra	u7217
  1479  00D4' D000               	nop2	
  1480  00D6'                    
  1481                           ;main.c: 59:     interrupts_init();
  1482  00D6' EC00' F000'        	call	_interrupts_init	;wreg free
  1483  00DA'                    
  1484                           ;main.c: 60:     forward(&motorL, &motorR);
  1485  00DA' 0E00'              	movlw	low main@motorL
  1486  00DC' 6E00'              	movwf	forward@mL^0,c
  1487  00DE' 0E00'              	movlw	high main@motorL
  1488  00E0' 6E00'              	movwf	(forward@mL+1)^0,c
  1489  00E2' 0E00'              	movlw	low main@motorR
  1490  00E4' 6E00'              	movwf	forward@mR^0,c
  1491  00E6' 0E00'              	movlw	high main@motorR
  1492  00E8' 6E00'              	movwf	(forward@mR+1)^0,c
  1493  00EA' EC00' F000'        	call	_forward	;wreg free
  1494  00EE'                    l5898:
  1495                           
  1496                           ;main.c: 70:         colourcards_testing();
  1497  00EE' EC00' F000'        	call	_colourcards_testing	;wreg free
  1498  00F2'                    
  1499                           ;main.c: 71:         DCmotors_testing(&motorL, &motorR);
  1500  00F2' 0E00'              	movlw	low main@motorL
  1501  00F4' 6E00'              	movwf	DCmotors_testing@mL^0,c
  1502  00F6' 0E00'              	movlw	high main@motorL
  1503  00F8' 6E00'              	movwf	(DCmotors_testing@mL+1)^0,c
  1504  00FA' 0E00'              	movlw	low main@motorR
  1505  00FC' 6E00'              	movwf	DCmotors_testing@mR^0,c
  1506  00FE' 0E00'              	movlw	high main@motorR
  1507  0100' 6E00'              	movwf	(DCmotors_testing@mR+1)^0,c
  1508  0102' EC00' F000'        	call	_DCmotors_testing	;wreg free
  1509  0106'                    
  1510                           ;main.c: 76:         if (colourcard_flag==1) {
  1511  0106' 0100               	movlb	0	; () banked
  1512  0108' 0500'              	decf	_colourcard_flag& (0+255),w,b	;volatile
  1513  010A' A4D8               	btfss	status,2,c
  1514  010C' EF00' F000'        	goto	u7161
  1515  0110' EF00' F000'        	goto	u7160
  1516  0114'                    u7161:
  1517  0114' EF00' F000'        	goto	l5898
  1518  0118'                    u7160:
  1519  0118'                    
  1520                           ; BSR set to: 0
  1521                           ;main.c: 77:             colourclick_readRGBC(&current);
  1522  0118' 0E00'              	movlw	low main@current
  1523  011A' 6E00'              	movwf	colourclick_readRGBC@tmpval^0,c
  1524  011C' 0E00'              	movlw	high main@current
  1525  011E' 6E00'              	movwf	(colourclick_readRGBC@tmpval+1)^0,c
  1526  0120' EC00' F000'        	call	_colourclick_readRGBC	;wreg free
  1527  0124'                    
  1528                           ;main.c: 78:             colourcards_readRGBC(&current, &motorL, &motorR);
  1529  0124' 0E00'              	movlw	low main@current
  1530  0126' 6E00'              	movwf	colourcards_readRGBC@tmpval^0,c
  1531  0128' 0E00'              	movlw	high main@current
  1532  012A' 6E00'              	movwf	(colourcards_readRGBC@tmpval+1)^0,c
  1533  012C' 0E00'              	movlw	low main@motorL
  1534  012E' 6E00'              	movwf	colourcards_readRGBC@mL^0,c
  1535  0130' 0E00'              	movlw	high main@motorL
  1536  0132' 6E00'              	movwf	(colourcards_readRGBC@mL+1)^0,c
  1537  0134' 0E00'              	movlw	low main@motorR
  1538  0136' 6E00'              	movwf	colourcards_readRGBC@mR^0,c
  1539  0138' 0E00'              	movlw	high main@motorR
  1540  013A' 6E00'              	movwf	(colourcards_readRGBC@mR+1)^0,c
  1541  013C' EC00' F000'        	call	_colourcards_readRGBC	;wreg free
  1542  0140'                    
  1543                           ;main.c: 79:             card_flag = 0;
  1544  0140' 0E00               	movlw	0
  1545  0142' CFE8 F000'         	movff	wreg,_card_flag
  1546  0146' EF00' F000'        	goto	l5898
  1547  014A' EF00' F000'        	goto	start
  1548  014E'                    __end_of_main:
  1549                           	callstack 0
  1550                           
  1551 ;; *************** function _colourclick_init *****************
  1552 ;; Defined at:
  1553 ;;		line 18 in file "colour_click.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;		None
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      void 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;Total ram usage:        1 bytes
  1572 ;; Hardware stack levels used: 1
  1573 ;; Hardware stack levels required when called: 3
  1574 ;; This function calls:
  1575 ;;		_I2C_2_Master_Init
  1576 ;;		_colourclickLEDs_init
  1577 ;;		_colourclick_writetoaddr
  1578 ;; This function is called by:
  1579 ;;		_main
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text1
  1584  0000'                    __ptext1:
  1585                           	callstack 0
  1586  0000'                    _colourclick_init:
  1587                           	callstack 27
  1588  0000'                    
  1589                           ;colour_click.c: 21:     I2C_2_Master_Init();
  1590  0000' EC00' F000'        	call	_I2C_2_Master_Init	;wreg free
  1591  0004'                    
  1592                           ;colour_click.c: 24:   colourclick_writetoaddr(0x00, 0x01);
  1593  0004' 0E01               	movlw	1
  1594  0006' 6E00'              	movwf	colourclick_writetoaddr@value^0,c
  1595  0008' 0E00               	movlw	0
  1596  000A' EC00' F000'        	call	_colourclick_writetoaddr
  1597  000E'                    
  1598                           ;colour_click.c: 25:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1599  000E' 0E3F               	movlw	63
  1600  0010' 6E00'              	movwf	??_colourclick_init^0,c
  1601  0012' 0E55               	movlw	85
  1602  0014'                    u7227:
  1603  0014' 2EE8               	decfsz	wreg,f,c
  1604  0016' D7FE               	bra	u7227
  1605  0018' 2E00'              	decfsz	??_colourclick_init^0,f,c
  1606  001A' D7FC               	bra	u7227
  1607  001C' F000               	nop	
  1608  001E'                    
  1609                           ;colour_click.c: 28:  colourclick_writetoaddr(0x00, 0x03);
  1610  001E' 0E03               	movlw	3
  1611  0020' 6E00'              	movwf	colourclick_writetoaddr@value^0,c
  1612  0022' 0E00               	movlw	0
  1613  0024' EC00' F000'        	call	_colourclick_writetoaddr
  1614  0028'                    
  1615                           ;colour_click.c: 31:  colourclick_writetoaddr(0x01, 0xD5);
  1616  0028' 0ED5               	movlw	213
  1617  002A' 6E00'              	movwf	colourclick_writetoaddr@value^0,c
  1618  002C' 0E01               	movlw	1
  1619  002E' EC00' F000'        	call	_colourclick_writetoaddr
  1620  0032'                    
  1621                           ;colour_click.c: 33:     colourclickLEDs_init();
  1622  0032' EC00' F000'        	call	_colourclickLEDs_init	;wreg free
  1623  0036' 0012               	return		;funcret
  1624  0038'                    __end_of_colourclick_init:
  1625                           	callstack 0
  1626                           
  1627 ;; *************** function _colourclick_writetoaddr *****************
  1628 ;; Defined at:
  1629 ;;		line 42 in file "colour_click.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;  address         1    wreg     unsigned char 
  1632 ;;  value           1    2[COMRAM] unsigned char 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  address         1    3[COMRAM] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1644 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1647 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1648 ;;Total ram usage:        2 bytes
  1649 ;; Hardware stack levels used: 1
  1650 ;; Hardware stack levels required when called: 2
  1651 ;; This function calls:
  1652 ;;		_I2C_2_Master_Start
  1653 ;;		_I2C_2_Master_Stop
  1654 ;;		_I2C_2_Master_Write
  1655 ;; This function is called by:
  1656 ;;		_colourclick_init
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text2
  1661  0000'                    __ptext2:
  1662                           	callstack 0
  1663  0000'                    _colourclick_writetoaddr:
  1664                           	callstack 27
  1665                           
  1666                           ;incstack = 0
  1667                           ;colourclick_writetoaddr@address stored from wreg
  1668  0000' 6E00'              	movwf	colourclick_writetoaddr@address^0,c
  1669  0002'                    
  1670                           ;colour_click.c: 42: void colourclick_writetoaddr(char address, char value);colour_click
      +                          .c: 43: {;colour_click.c: 44:     I2C_2_Master_Start();
  1671  0002' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
  1672                           
  1673                           ;colour_click.c: 45:     I2C_2_Master_Write(0x52 | 0x00);
  1674  0006' 0E52               	movlw	82
  1675  0008' EC00' F000'        	call	_I2C_2_Master_Write
  1676                           
  1677                           ;colour_click.c: 46:     I2C_2_Master_Write(0x80 | address);
  1678  000C' 5000'              	movf	colourclick_writetoaddr@address^0,w,c
  1679  000E' 0980               	iorlw	128
  1680  0010' EC00' F000'        	call	_I2C_2_Master_Write
  1681                           
  1682                           ;colour_click.c: 47:     I2C_2_Master_Write(value);
  1683  0014' 5000'              	movf	colourclick_writetoaddr@value^0,w,c
  1684  0016' EC00' F000'        	call	_I2C_2_Master_Write
  1685                           
  1686                           ;colour_click.c: 48:     I2C_2_Master_Stop();
  1687  001A' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
  1688  001E' 0012               	return		;funcret
  1689  0020'                    __end_of_colourclick_writetoaddr:
  1690                           	callstack 0
  1691                           
  1692 ;; *************** function _colourclickLEDs_init *****************
  1693 ;; Defined at:
  1694 ;;		line 49 in file "buttons_n_LEDs.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;		None
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  1    wreg      void 
  1701 ;; Registers used:
  1702 ;;		wreg, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1712 ;;Total ram usage:        0 bytes
  1713 ;; Hardware stack levels used: 1
  1714 ;; Hardware stack levels required when called: 1
  1715 ;; This function calls:
  1716 ;;		_colourclickLEDs_C
  1717 ;; This function is called by:
  1718 ;;		_colourclick_init
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text3
  1723  0000'                    __ptext3:
  1724                           	callstack 0
  1725  0000'                    _colourclickLEDs_init:
  1726                           	callstack 28
  1727  0000'                    
  1728                           ;buttons_n_LEDs.c: 52:     TRISGbits.TRISG1 = 0;
  1729  0000' 9287               	bcf	135,1,c	;volatile
  1730                           
  1731                           ;buttons_n_LEDs.c: 53:     TRISAbits.TRISA4 = 0;
  1732  0002' 9881               	bcf	129,4,c	;volatile
  1733                           
  1734                           ;buttons_n_LEDs.c: 54:     TRISFbits.TRISF7 = 0;
  1735  0004' 9E86               	bcf	134,7,c	;volatile
  1736  0006'                    
  1737                           ;buttons_n_LEDs.c: 57:     colourclickLEDs_C(0);
  1738  0006' 0E00               	movlw	0
  1739  0008' EC00' F000'        	call	_colourclickLEDs_C
  1740  000C' 0012               	return		;funcret
  1741  000E'                    __end_of_colourclickLEDs_init:
  1742                           	callstack 0
  1743                           
  1744 ;; *************** function _colourclickLEDs_C *****************
  1745 ;; Defined at:
  1746 ;;		line 84 in file "buttons_n_LEDs.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  tog             1    wreg     unsigned char 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  tog             1    0[COMRAM] unsigned char 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;Total ram usage:        1 bytes
  1765 ;; Hardware stack levels used: 1
  1766 ;; This function calls:
  1767 ;;		Nothing
  1768 ;; This function is called by:
  1769 ;;		_main
  1770 ;;		_colourclickLEDs_init
  1771 ;;		_colourclick_readRGBC2
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text4
  1776  0000'                    __ptext4:
  1777                           	callstack 0
  1778  0000'                    _colourclickLEDs_C:
  1779                           	callstack 28
  1780                           
  1781                           ;incstack = 0
  1782                           ;colourclickLEDs_C@tog stored from wreg
  1783  0000' 6E00'              	movwf	colourclickLEDs_C@tog^0,c
  1784  0002'                    
  1785                           ;buttons_n_LEDs.c: 84: void colourclickLEDs_C(unsigned char tog);buttons_n_LEDs.c: 85: {
      +                          ;buttons_n_LEDs.c: 86:     LATGbits.LATG1 = tog;
  1786  0002' B000'              	btfsc	colourclickLEDs_C@tog^0,0,c
  1787  0004' D002               	bra	u6295
  1788  0006' 927F               	bcf	127,1,c	;volatile
  1789  0008' D001               	bra	u6296
  1790  000A'                    u6295:
  1791  000A' 827F               	bsf	127,1,c	;volatile
  1792  000C'                    u6296:
  1793                           
  1794                           ;buttons_n_LEDs.c: 87:     LATAbits.LATA4 = tog;
  1795  000C' B000'              	btfsc	colourclickLEDs_C@tog^0,0,c
  1796  000E' D002               	bra	u6305
  1797  0010' 9879               	bcf	121,4,c	;volatile
  1798  0012' D001               	bra	u6306
  1799  0014'                    u6305:
  1800  0014' 8879               	bsf	121,4,c	;volatile
  1801  0016'                    u6306:
  1802                           
  1803                           ;buttons_n_LEDs.c: 88:     LATFbits.LATF7 = tog;
  1804  0016' B000'              	btfsc	colourclickLEDs_C@tog^0,0,c
  1805  0018' D002               	bra	u6315
  1806  001A' 9E7E               	bcf	126,7,c	;volatile
  1807  001C' D001               	bra	u6316
  1808  001E'                    u6315:
  1809  001E' 8E7E               	bsf	126,7,c	;volatile
  1810  0020'                    u6316:
  1811  0020' 0012               	return		;funcret
  1812  0022'                    __end_of_colourclickLEDs_C:
  1813                           	callstack 0
  1814                           
  1815 ;; *************** function _I2C_2_Master_Init *****************
  1816 ;; Defined at:
  1817 ;;		line 8 in file "I2C.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels used: 1
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_colourclick_init
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text5
  1845  0000'                    __ptext5:
  1846                           	callstack 0
  1847  0000'                    _I2C_2_Master_Init:
  1848                           	callstack 29
  1849  0000'                    
  1850                           ;I2C.c: 11:   SSP2CON1bits.SSPM= 0b1000;
  1851  0000' 010E               	movlb	14	; () banked
  1852  0002' 51D9               	movf	217,w,b	;volatile
  1853  0004' 0BF0               	andlw	-16
  1854  0006' 0908               	iorlw	8
  1855  0008' 6FD9               	movwf	217,b	;volatile
  1856  000A'                    
  1857                           ; BSR set to: 14
  1858                           ;I2C.c: 12:   SSP2CON1bits.SSPEN = 1;
  1859  000A' 8BD9               	bsf	217,5,b	;volatile
  1860                           
  1861                           ;I2C.c: 13:   SSP2ADD = (64000000/(4*100000))-1;
  1862  000C' 0E9F               	movlw	159
  1863  000E' 6FD6               	movwf	214,b	;volatile
  1864  0010'                    
  1865                           ; BSR set to: 14
  1866                           ;I2C.c: 16:   TRISDbits.TRISD5 = 1;
  1867  0010' 8A84               	bsf	132,5,c	;volatile
  1868  0012'                    
  1869                           ; BSR set to: 14
  1870                           ;I2C.c: 17:   TRISDbits.TRISD6 = 1;
  1871  0012' 8C84               	bsf	132,6,c	;volatile
  1872  0014'                    
  1873                           ; BSR set to: 14
  1874                           ;I2C.c: 18:   ANSELDbits.ANSELD5=0;
  1875  0014' 9BA7               	bcf	167,5,b	;volatile
  1876  0016'                    
  1877                           ; BSR set to: 14
  1878                           ;I2C.c: 19:   ANSELDbits.ANSELD6=0;
  1879  0016' 9DA7               	bcf	167,6,b	;volatile
  1880                           
  1881                           ;I2C.c: 20:   SSP2DATPPS=0x1D;
  1882  0018' 0E1D               	movlw	29
  1883  001A' 6F1D               	movwf	29,b	;volatile
  1884                           
  1885                           ;I2C.c: 21:   SSP2CLKPPS=0x1E;
  1886  001C' 0E1E               	movlw	30
  1887  001E' 6F1C               	movwf	28,b	;volatile
  1888                           
  1889                           ;I2C.c: 22:   RD5PPS=0x1C;
  1890  0020' 0E1C               	movlw	28
  1891  0022' 6F6F               	movwf	111,b	;volatile
  1892                           
  1893                           ;I2C.c: 23:   RD6PPS=0x1B;
  1894  0024' 0E1B               	movlw	27
  1895  0026' 6F70               	movwf	112,b	;volatile
  1896  0028'                    
  1897                           ; BSR set to: 14
  1898  0028' 0012               	return		;funcret
  1899  002A'                    __end_of_I2C_2_Master_Init:
  1900                           	callstack 0
  1901                           
  1902 ;; *************** function _colourclick_calibration *****************
  1903 ;; Defined at:
  1904 ;;		line 171 in file "colour_click.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  current         8   24[COMRAM] struct .
  1909 ;;  initial         8   16[COMRAM] struct .
  1910 ;;  i               1   15[COMRAM] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      void 
  1913 ;; Registers used:
  1914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1921 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1923 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1924 ;;Total ram usage:       19 bytes
  1925 ;; Hardware stack levels used: 1
  1926 ;; Hardware stack levels required when called: 4
  1927 ;; This function calls:
  1928 ;;		_colourclick_readRGBC
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text6
  1935  0000'                    __ptext6:
  1936                           	callstack 0
  1937  0000'                    _colourclick_calibration:
  1938                           	callstack 26
  1939  0000'                    l238:
  1940  0000' B48E               	btfsc	142,2,c	;volatile
  1941  0002' EF00' F000'        	goto	u6701
  1942  0006' EF00' F000'        	goto	u6700
  1943  000A'                    u6701:
  1944  000A' EF00' F000'        	goto	l238
  1945  000E'                    u6700:
  1946  000E'                    
  1947                           ;colour_click.c: 174:     LATDbits.LATD7 = 1;
  1948  000E' 8E7C               	bsf	124,7,c	;volatile
  1949  0010'                    
  1950                           ;colour_click.c: 175:     colourclick_readRGBC(&initial);
  1951  0010' 0E00'              	movlw	low colourclick_calibration@initial
  1952  0012' 6E00'              	movwf	colourclick_readRGBC@tmpval^0,c
  1953  0014' 0E00'              	movlw	high colourclick_calibration@initial
  1954  0016' 6E00'              	movwf	(colourclick_readRGBC@tmpval+1)^0,c
  1955  0018' EC00' F000'        	call	_colourclick_readRGBC	;wreg free
  1956  001C'                    
  1957                           ;colour_click.c: 176:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1958  001C' 0E09               	movlw	9
  1959  001E' 6E00'              	movwf	(??_colourclick_calibration+1)^0,c
  1960  0020' 0E1E               	movlw	30
  1961  0022' 6E00'              	movwf	??_colourclick_calibration^0,c
  1962  0024' 0EE4               	movlw	228
  1963  0026'                    u7237:
  1964  0026' 2EE8               	decfsz	wreg,f,c
  1965  0028' D7FE               	bra	u7237
  1966  002A' 2E00'              	decfsz	??_colourclick_calibration^0,f,c
  1967  002C' D7FC               	bra	u7237
  1968  002E' 2E00'              	decfsz	(??_colourclick_calibration+1)^0,f,c
  1969  0030' D7FA               	bra	u7237
  1970  0032' D000               	nop2	
  1971  0034'                    
  1972                           ;colour_click.c: 177:     LATDbits.LATD7 = 0;
  1973  0034' 9E7C               	bcf	124,7,c	;volatile
  1974  0036'                    
  1975                           ;colour_click.c: 179:     unsigned char i;;colour_click.c: 180:     RGBC_val current;;co
      +                          lour_click.c: 181:     for (i=0; i<10; i++) {
  1976  0036' 0E00               	movlw	0
  1977  0038' 6E00'              	movwf	colourclick_calibration@i^0,c
  1978  003A'                    l243:
  1979  003A' B48E               	btfsc	142,2,c	;volatile
  1980  003C' EF00' F000'        	goto	u6711
  1981  0040' EF00' F000'        	goto	u6710
  1982  0044'                    u6711:
  1983  0044' EF00' F000'        	goto	l243
  1984  0048'                    u6710:
  1985  0048'                    
  1986                           ;colour_click.c: 183:         LATDbits.LATD7 = 1;
  1987  0048' 8E7C               	bsf	124,7,c	;volatile
  1988  004A'                    
  1989                           ;colour_click.c: 184:         colourclick_readRGBC(&current);
  1990  004A' 0E00'              	movlw	low colourclick_calibration@current
  1991  004C' 6E00'              	movwf	colourclick_readRGBC@tmpval^0,c
  1992  004E' 0E00'              	movlw	high colourclick_calibration@current
  1993  0050' 6E00'              	movwf	(colourclick_readRGBC@tmpval+1)^0,c
  1994  0052' EC00' F000'        	call	_colourclick_readRGBC	;wreg free
  1995  0056'                    
  1996                           ;colour_click.c: 185:         if ((current.C<initial.C) && (current.C>interrupts_lower))
      +                           {
  1997  0056' 5000'              	movf	(colourclick_calibration@initial+6)^0,w,c
  1998  0058' 5C00'              	subwf	(colourclick_calibration@current+6)^0,w,c
  1999  005A' 5000'              	movf	(colourclick_calibration@initial+7)^0,w,c
  2000  005C' 5800'              	subwfb	(colourclick_calibration@current+7)^0,w,c
  2001  005E' B0D8               	btfsc	status,0,c
  2002  0060' EF00' F000'        	goto	u6721
  2003  0064' EF00' F000'        	goto	u6720
  2004  0068'                    u6721:
  2005  0068' EF00' F000'        	goto	l5636
  2006  006C'                    u6720:
  2007  006C' 5000'              	movf	(colourclick_calibration@current+6)^0,w,c
  2008  006E' 0100               	movlb	0	; () banked
  2009  0070' 5D00'              	subwf	_interrupts_lower& (0+255),w,b	;volatile
  2010  0072' 5000'              	movf	(colourclick_calibration@current+7)^0,w,c
  2011  0074' 5900'              	subwfb	(_interrupts_lower+1)& (0+255),w,b	;volatile
  2012  0076' B0D8               	btfsc	status,0,c
  2013  0078' EF00' F000'        	goto	u6731
  2014  007C' EF00' F000'        	goto	u6730
  2015  0080'                    u6731:
  2016  0080' EF00' F000'        	goto	l5636
  2017  0084'                    u6730:
  2018  0084'                    
  2019                           ; BSR set to: 0
  2020                           ;colour_click.c: 186:             interrupts_lower = current.C;
  2021  0084' C01E' F00A'        	movff	colourclick_calibration@current+6,_interrupts_lower	;volatile
  2022  0088' C01F' F00B'        	movff	colourclick_calibration@current+7,_interrupts_lower+1	;volatile
  2023                           
  2024                           ;colour_click.c: 187:         } else if ((current.C>initial.C) && (current.C<interrupts_
      +                          upper)) {
  2025  008C' EF00' F000'        	goto	l5642
  2026  0090'                    l5636:
  2027  0090' 5000'              	movf	(colourclick_calibration@current+6)^0,w,c
  2028  0092' 5C00'              	subwf	(colourclick_calibration@initial+6)^0,w,c
  2029  0094' 5000'              	movf	(colourclick_calibration@current+7)^0,w,c
  2030  0096' 5800'              	subwfb	(colourclick_calibration@initial+7)^0,w,c
  2031  0098' B0D8               	btfsc	status,0,c
  2032  009A' EF00' F000'        	goto	u6741
  2033  009E' EF00' F000'        	goto	u6740
  2034  00A2'                    u6741:
  2035  00A2' EF00' F000'        	goto	l5642
  2036  00A6'                    u6740:
  2037  00A6' 0100               	movlb	0	; () banked
  2038  00A8' 5100'              	movf	_interrupts_upper& (0+255),w,b	;volatile
  2039  00AA' 5C00'              	subwf	(colourclick_calibration@current+6)^0,w,c
  2040  00AC' 5100'              	movf	(_interrupts_upper+1)& (0+255),w,b	;volatile
  2041  00AE' 5800'              	subwfb	(colourclick_calibration@current+7)^0,w,c
  2042  00B0' B0D8               	btfsc	status,0,c
  2043  00B2' EF00' F000'        	goto	u6751
  2044  00B6' EF00' F000'        	goto	u6750
  2045  00BA'                    u6751:
  2046  00BA' EF00' F000'        	goto	l5642
  2047  00BE'                    u6750:
  2048  00BE'                    
  2049                           ; BSR set to: 0
  2050                           ;colour_click.c: 188:             interrupts_upper = current.C;
  2051  00BE' C01E' F000'        	movff	colourclick_calibration@current+6,_interrupts_upper	;volatile
  2052  00C2' C01F' F001'        	movff	colourclick_calibration@current+7,_interrupts_upper+1	;volatile
  2053  00C6'                    l5642:
  2054                           
  2055                           ;colour_click.c: 190:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2056  00C6' 0E09               	movlw	9
  2057  00C8' 6E00'              	movwf	(??_colourclick_calibration+1)^0,c
  2058  00CA' 0E1E               	movlw	30
  2059  00CC' 6E00'              	movwf	??_colourclick_calibration^0,c
  2060  00CE' 0EE4               	movlw	228
  2061  00D0'                    u7247:
  2062  00D0' 2EE8               	decfsz	wreg,f,c
  2063  00D2' D7FE               	bra	u7247
  2064  00D4' 2E00'              	decfsz	??_colourclick_calibration^0,f,c
  2065  00D6' D7FC               	bra	u7247
  2066  00D8' 2E00'              	decfsz	(??_colourclick_calibration+1)^0,f,c
  2067  00DA' D7FA               	bra	u7247
  2068  00DC' D000               	nop2	
  2069  00DE'                    
  2070                           ;colour_click.c: 191:         LATDbits.LATD7 = 0;
  2071  00DE' 9E7C               	bcf	124,7,c	;volatile
  2072  00E0'                    
  2073                           ;colour_click.c: 192:     }
  2074  00E0' 2A00'              	incf	colourclick_calibration@i^0,f,c
  2075  00E2' 0E09               	movlw	9
  2076  00E4' 6400'              	cpfsgt	colourclick_calibration@i^0,c
  2077  00E6' EF00' F000'        	goto	u6761
  2078  00EA' EF00' F000'        	goto	u6760
  2079  00EE'                    u6761:
  2080  00EE' EF00' F000'        	goto	l243
  2081  00F2'                    u6760:
  2082  00F2' 0012               	return		;funcret
  2083  00F4'                    __end_of_colourclick_calibration:
  2084                           	callstack 0
  2085                           
  2086 ;; *************** function _colourcards_testing *****************
  2087 ;; Defined at:
  2088 ;;		line 103 in file "colour_cards.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  buf           100    0[BANK1 ] unsigned char [100]
  2093 ;;  current         8  116[BANK1 ] struct .
  2094 ;;  C_rel           4  112[BANK1 ] float 
  2095 ;;  B_rel           4  108[BANK1 ] float 
  2096 ;;  G_rel           4  104[BANK1 ] float 
  2097 ;;  R_rel           4  100[BANK1 ] float 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;      Locals:         0       0     124       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;      Totals:         2       0     124       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2111 ;;Total ram usage:      126 bytes
  2112 ;; Hardware stack levels used: 1
  2113 ;; Hardware stack levels required when called: 8
  2114 ;; This function calls:
  2115 ;;		___fldiv
  2116 ;;		___xxtofl
  2117 ;;		_colourclick_readRGBC
  2118 ;;		_sendStringSerial4
  2119 ;;		_sprintf
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text7
  2126  0000'                    __ptext7:
  2127                           	callstack 0
  2128  0000'                    _colourcards_testing:
  2129                           	callstack 22
  2130  0000'                    
  2131                           ;colour_cards.c: 105:     INTCONbits.GIE = 0;
  2132  0000' 9EF2               	bcf	242,7,c	;volatile
  2133  0002'                    
  2134                           ;colour_cards.c: 107:     RGBC_val current;;colour_cards.c: 108:     colourclick_readRGB
      +                          C(&current);
  2135  0002' 0E00'              	movlw	low colourcards_testing@current
  2136  0004' 6E00'              	movwf	colourclick_readRGBC@tmpval^0,c
  2137  0006' 0E00'              	movlw	high colourcards_testing@current
  2138  0008' 6E00'              	movwf	(colourclick_readRGBC@tmpval+1)^0,c
  2139  000A' EC00' F000'        	call	_colourclick_readRGBC	;wreg free
  2140  000E'                    
  2141                           ;colour_cards.c: 109:     char buf[100];;colour_cards.c: 110:     float R_rel = (float)c
      +                          urrent.R / (float)current.C;
  2142  000E' C074' F000'        	movff	colourcards_testing@current,___xxtofl@val
  2143  0012' C075' F001'        	movff	colourcards_testing@current+1,___xxtofl@val+1
  2144  0016' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2145  0018' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2146  001A' 0E00               	movlw	0
  2147  001C' EC00' F000'        	call	___xxtofl
  2148  0020' C000' F00E'        	movff	?___xxtofl,___fldiv@b
  2149  0024' C001' F00F'        	movff	?___xxtofl+1,___fldiv@b+1
  2150  0028' C002' F010'        	movff	?___xxtofl+2,___fldiv@b+2
  2151  002C' C003' F011'        	movff	?___xxtofl+3,___fldiv@b+3
  2152  0030' C07A' F000'        	movff	colourcards_testing@current+6,___xxtofl@val
  2153  0034' C07B' F001'        	movff	colourcards_testing@current+7,___xxtofl@val+1
  2154  0038' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2155  003A' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2156  003C' 0E00               	movlw	0
  2157  003E' EC00' F000'        	call	___xxtofl
  2158  0042' C000' F012'        	movff	?___xxtofl,___fldiv@a
  2159  0046' C001' F013'        	movff	?___xxtofl+1,___fldiv@a+1
  2160  004A' C002' F014'        	movff	?___xxtofl+2,___fldiv@a+2
  2161  004E' C003' F015'        	movff	?___xxtofl+3,___fldiv@a+3
  2162  0052' EC00' F000'        	call	___fldiv	;wreg free
  2163  0056' C00E' F064'        	movff	?___fldiv,colourcards_testing@R_rel
  2164  005A' C00F' F065'        	movff	?___fldiv+1,colourcards_testing@R_rel+1
  2165  005E' C010' F066'        	movff	?___fldiv+2,colourcards_testing@R_rel+2
  2166  0062' C011' F067'        	movff	?___fldiv+3,colourcards_testing@R_rel+3
  2167  0066'                    
  2168                           ;colour_cards.c: 111:     float G_rel = (float)current.G / (float)current.C;
  2169  0066' C076' F000'        	movff	colourcards_testing@current+2,___xxtofl@val
  2170  006A' C077' F001'        	movff	colourcards_testing@current+3,___xxtofl@val+1
  2171  006E' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2172  0070' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2173  0072' 0E00               	movlw	0
  2174  0074' EC00' F000'        	call	___xxtofl
  2175  0078' C000' F00E'        	movff	?___xxtofl,___fldiv@b
  2176  007C' C001' F00F'        	movff	?___xxtofl+1,___fldiv@b+1
  2177  0080' C002' F010'        	movff	?___xxtofl+2,___fldiv@b+2
  2178  0084' C003' F011'        	movff	?___xxtofl+3,___fldiv@b+3
  2179  0088' C07A' F000'        	movff	colourcards_testing@current+6,___xxtofl@val
  2180  008C' C07B' F001'        	movff	colourcards_testing@current+7,___xxtofl@val+1
  2181  0090' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2182  0092' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2183  0094' 0E00               	movlw	0
  2184  0096' EC00' F000'        	call	___xxtofl
  2185  009A' C000' F012'        	movff	?___xxtofl,___fldiv@a
  2186  009E' C001' F013'        	movff	?___xxtofl+1,___fldiv@a+1
  2187  00A2' C002' F014'        	movff	?___xxtofl+2,___fldiv@a+2
  2188  00A6' C003' F015'        	movff	?___xxtofl+3,___fldiv@a+3
  2189  00AA' EC00' F000'        	call	___fldiv	;wreg free
  2190  00AE' C00E' F068'        	movff	?___fldiv,colourcards_testing@G_rel
  2191  00B2' C00F' F069'        	movff	?___fldiv+1,colourcards_testing@G_rel+1
  2192  00B6' C010' F06A'        	movff	?___fldiv+2,colourcards_testing@G_rel+2
  2193  00BA' C011' F06B'        	movff	?___fldiv+3,colourcards_testing@G_rel+3
  2194  00BE'                    
  2195                           ;colour_cards.c: 112:     float B_rel = (float)current.B / (float)current.C;
  2196  00BE' C078' F000'        	movff	colourcards_testing@current+4,___xxtofl@val
  2197  00C2' C079' F001'        	movff	colourcards_testing@current+5,___xxtofl@val+1
  2198  00C6' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2199  00C8' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2200  00CA' 0E00               	movlw	0
  2201  00CC' EC00' F000'        	call	___xxtofl
  2202  00D0' C000' F00E'        	movff	?___xxtofl,___fldiv@b
  2203  00D4' C001' F00F'        	movff	?___xxtofl+1,___fldiv@b+1
  2204  00D8' C002' F010'        	movff	?___xxtofl+2,___fldiv@b+2
  2205  00DC' C003' F011'        	movff	?___xxtofl+3,___fldiv@b+3
  2206  00E0' C07A' F000'        	movff	colourcards_testing@current+6,___xxtofl@val
  2207  00E4' C07B' F001'        	movff	colourcards_testing@current+7,___xxtofl@val+1
  2208  00E8' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2209  00EA' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2210  00EC' 0E00               	movlw	0
  2211  00EE' EC00' F000'        	call	___xxtofl
  2212  00F2' C000' F012'        	movff	?___xxtofl,___fldiv@a
  2213  00F6' C001' F013'        	movff	?___xxtofl+1,___fldiv@a+1
  2214  00FA' C002' F014'        	movff	?___xxtofl+2,___fldiv@a+2
  2215  00FE' C003' F015'        	movff	?___xxtofl+3,___fldiv@a+3
  2216  0102' EC00' F000'        	call	___fldiv	;wreg free
  2217  0106' C00E' F06C'        	movff	?___fldiv,colourcards_testing@B_rel
  2218  010A' C00F' F06D'        	movff	?___fldiv+1,colourcards_testing@B_rel+1
  2219  010E' C010' F06E'        	movff	?___fldiv+2,colourcards_testing@B_rel+2
  2220  0112' C011' F06F'        	movff	?___fldiv+3,colourcards_testing@B_rel+3
  2221  0116'                    
  2222                           ;colour_cards.c: 113:     float C_rel = (float)current.C / (float)current.C;
  2223  0116' C07A' F000'        	movff	colourcards_testing@current+6,___xxtofl@val
  2224  011A' C07B' F001'        	movff	colourcards_testing@current+7,___xxtofl@val+1
  2225  011E' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2226  0120' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2227  0122' 0E00               	movlw	0
  2228  0124' EC00' F000'        	call	___xxtofl
  2229  0128' C000' F00E'        	movff	?___xxtofl,___fldiv@b
  2230  012C' C001' F00F'        	movff	?___xxtofl+1,___fldiv@b+1
  2231  0130' C002' F010'        	movff	?___xxtofl+2,___fldiv@b+2
  2232  0134' C003' F011'        	movff	?___xxtofl+3,___fldiv@b+3
  2233  0138' C07A' F000'        	movff	colourcards_testing@current+6,___xxtofl@val
  2234  013C' C07B' F001'        	movff	colourcards_testing@current+7,___xxtofl@val+1
  2235  0140' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  2236  0142' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  2237  0144' 0E00               	movlw	0
  2238  0146' EC00' F000'        	call	___xxtofl
  2239  014A' C000' F012'        	movff	?___xxtofl,___fldiv@a
  2240  014E' C001' F013'        	movff	?___xxtofl+1,___fldiv@a+1
  2241  0152' C002' F014'        	movff	?___xxtofl+2,___fldiv@a+2
  2242  0156' C003' F015'        	movff	?___xxtofl+3,___fldiv@a+3
  2243  015A' EC00' F000'        	call	___fldiv	;wreg free
  2244  015E' C00E' F070'        	movff	?___fldiv,colourcards_testing@C_rel
  2245  0162' C00F' F071'        	movff	?___fldiv+1,colourcards_testing@C_rel+1
  2246  0166' C010' F072'        	movff	?___fldiv+2,colourcards_testing@C_rel+2
  2247  016A' C011' F073'        	movff	?___fldiv+3,colourcards_testing@C_rel+3
  2248  016E'                    
  2249                           ;colour_cards.c: 114:     sprintf(buf,"RGBC: %i %i %i %i     RGBC_rel: %.3f %.3f %.3f %.
      +                          3f\n\r", current.R, current.G, current.B, current.C, R_rel, G_rel, B_rel, C_rel);
  2250  016E' 0E00'              	movlw	low colourcards_testing@buf
  2251  0170' 0100               	movlb	0	; () banked
  2252  0172' 6F00'              	movwf	sprintf@s& (0+255),b
  2253  0174' 0E00'              	movlw	high colourcards_testing@buf
  2254  0176' 6F00'              	movwf	(sprintf@s+1)& (0+255),b
  2255  0178' 0E00'              	movlw	low STR_1
  2256  017A' 6F00'              	movwf	sprintf@fmt& (0+255),b
  2257  017C' 0E00'              	movlw	high STR_1
  2258  017E' 6F00'              	movwf	(sprintf@fmt+1)& (0+255),b
  2259  0180' C074' F050'        	movff	colourcards_testing@current,?_sprintf+4
  2260  0184' C075' F051'        	movff	colourcards_testing@current+1,?_sprintf+5
  2261  0188' C076' F052'        	movff	colourcards_testing@current+2,?_sprintf+6
  2262  018C' C077' F053'        	movff	colourcards_testing@current+3,?_sprintf+7
  2263  0190' C078' F054'        	movff	colourcards_testing@current+4,?_sprintf+8
  2264  0194' C079' F055'        	movff	colourcards_testing@current+5,?_sprintf+9
  2265  0198' C07A' F056'        	movff	colourcards_testing@current+6,?_sprintf+10
  2266  019C' C07B' F057'        	movff	colourcards_testing@current+7,?_sprintf+11
  2267  01A0' C064' F058'        	movff	colourcards_testing@R_rel,?_sprintf+12
  2268  01A4' C065' F059'        	movff	colourcards_testing@R_rel+1,?_sprintf+13
  2269  01A8' C066' F05A'        	movff	colourcards_testing@R_rel+2,?_sprintf+14
  2270  01AC' C067' F05B'        	movff	colourcards_testing@R_rel+3,?_sprintf+15
  2271  01B0' C068' F05C'        	movff	colourcards_testing@G_rel,?_sprintf+16
  2272  01B4' C069' F05D'        	movff	colourcards_testing@G_rel+1,?_sprintf+17
  2273  01B8' C06A' F05E'        	movff	colourcards_testing@G_rel+2,?_sprintf+18
  2274  01BC' C06B' F05F'        	movff	colourcards_testing@G_rel+3,?_sprintf+19
  2275  01C0' C06C' F060'        	movff	colourcards_testing@B_rel,?_sprintf+20
  2276  01C4' C06D' F061'        	movff	colourcards_testing@B_rel+1,?_sprintf+21
  2277  01C8' C06E' F062'        	movff	colourcards_testing@B_rel+2,?_sprintf+22
  2278  01CC' C06F' F063'        	movff	colourcards_testing@B_rel+3,?_sprintf+23
  2279  01D0' C070' F064'        	movff	colourcards_testing@C_rel,?_sprintf+24
  2280  01D4' C071' F065'        	movff	colourcards_testing@C_rel+1,?_sprintf+25
  2281  01D8' C072' F066'        	movff	colourcards_testing@C_rel+2,?_sprintf+26
  2282  01DC' C073' F067'        	movff	colourcards_testing@C_rel+3,?_sprintf+27
  2283  01E0' EC00' F000'        	call	_sprintf	;wreg free
  2284  01E4'                    
  2285                           ;colour_cards.c: 116:     sendStringSerial4(buf);
  2286  01E4' 0E00'              	movlw	low colourcards_testing@buf
  2287  01E6' 6E00'              	movwf	sendStringSerial4@string^0,c
  2288  01E8' 0E00'              	movlw	high colourcards_testing@buf
  2289  01EA' 6E00'              	movwf	(sendStringSerial4@string+1)^0,c
  2290  01EC' EC00' F000'        	call	_sendStringSerial4	;wreg free
  2291  01F0'                    
  2292                           ;colour_cards.c: 117:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2293  01F0' 0E29               	movlw	41
  2294  01F2' 6E00'              	movwf	(??_colourcards_testing+1)^0,c
  2295  01F4' 0E96               	movlw	150
  2296  01F6' 6E00'              	movwf	??_colourcards_testing^0,c
  2297  01F8' 0E7F               	movlw	127
  2298  01FA'                    u7257:
  2299  01FA' 2EE8               	decfsz	wreg,f,c
  2300  01FC' D7FE               	bra	u7257
  2301  01FE' 2E00'              	decfsz	??_colourcards_testing^0,f,c
  2302  0200' D7FC               	bra	u7257
  2303  0202' 2E00'              	decfsz	(??_colourcards_testing+1)^0,f,c
  2304  0204' D7FA               	bra	u7257
  2305  0206' F000               	nop	
  2306  0208'                    
  2307                           ;colour_cards.c: 119:     INTCONbits.GIE = 1;
  2308  0208' 8EF2               	bsf	242,7,c	;volatile
  2309  020A' 0012               	return		;funcret
  2310  020C'                    __end_of_colourcards_testing:
  2311                           	callstack 0
  2312                           
  2313 ;; *************** function _sprintf *****************
  2314 ;; Defined at:
  2315 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  s               2   76[BANK0 ] PTR unsigned char 
  2318 ;;		 -> colourcards_testing@buf(100), 
  2319 ;;  fmt             2   78[BANK0 ] PTR const unsigned char 
  2320 ;;		 -> STR_1(54), 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  f               6  106[BANK0 ] struct _IO_FILE
  2323 ;;  ap              2  104[BANK0 ] PTR void [1]
  2324 ;;		 -> ?_sprintf(2), 
  2325 ;;  ret             2    0        int 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  2   76[BANK0 ] int 
  2328 ;; Registers used:
  2329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2335 ;;      Params:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2336 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2338 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2339 ;;Total ram usage:       36 bytes
  2340 ;; Hardware stack levels used: 1
  2341 ;; Hardware stack levels required when called: 7
  2342 ;; This function calls:
  2343 ;;		_vfprintf
  2344 ;; This function is called by:
  2345 ;;		_colourcards_testing
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text8
  2350  0000'                    __ptext8:
  2351                           	callstack 0
  2352  0000'                    _sprintf:
  2353                           	callstack 22
  2354  0000' 0E00'              	movlw	low (?_sprintf+4)
  2355  0002' 0100               	movlb	0	; () banked
  2356  0004' 6F00'              	movwf	sprintf@ap& (0+255),b
  2357  0006' 0E00'              	movlw	high (?_sprintf+4)
  2358  0008' 6F00'              	movwf	(sprintf@ap+1)& (0+255),b
  2359  000A' C04C' F06A'        	movff	sprintf@s,sprintf@f
  2360  000E' C04D' F06B'        	movff	sprintf@s+1,sprintf@f+1
  2361  0012'                    
  2362                           ; BSR set to: 0
  2363  0012' 0E00               	movlw	0
  2364  0014' 6F00'              	movwf	(sprintf@f+3)& (0+255),b
  2365  0016' 0E00               	movlw	0
  2366  0018' 6F00'              	movwf	(sprintf@f+2)& (0+255),b
  2367  001A'                    
  2368                           ; BSR set to: 0
  2369  001A' 0E00               	movlw	0
  2370  001C' 6F00'              	movwf	(sprintf@f+5)& (0+255),b
  2371  001E' 0E00               	movlw	0
  2372  0020' 6F00'              	movwf	(sprintf@f+4)& (0+255),b
  2373  0022'                    
  2374                           ; BSR set to: 0
  2375  0022' 0E00'              	movlw	low sprintf@f
  2376  0024' 6E00'              	movwf	vfprintf@fp^0,c
  2377  0026' 0E00'              	movlw	high sprintf@f
  2378  0028' 6E00'              	movwf	(vfprintf@fp+1)^0,c
  2379  002A' C04E' F053'        	movff	sprintf@fmt,vfprintf@fmt
  2380  002E' C04F' F054'        	movff	sprintf@fmt+1,vfprintf@fmt+1
  2381  0032' 0E00'              	movlw	low sprintf@ap
  2382  0034' 6E00'              	movwf	vfprintf@ap^0,c
  2383  0036' 0E00'              	movlw	high sprintf@ap
  2384  0038' 6E00'              	movwf	(vfprintf@ap+1)^0,c
  2385  003A' EC00' F000'        	call	_vfprintf	;wreg free
  2386  003E' 0100               	movlb	0	; () banked
  2387  0040' 5100'              	movf	(sprintf@f+2)& (0+255),w,b
  2388  0042' 2500'              	addwf	sprintf@s& (0+255),w,b
  2389  0044' 6ED9               	movwf	fsr2l,c
  2390  0046' 5100'              	movf	(sprintf@f+3)& (0+255),w,b
  2391  0048' 2100'              	addwfc	(sprintf@s+1)& (0+255),w,b
  2392  004A' 6EDA               	movwf	fsr2h,c
  2393  004C' 0E00               	movlw	0
  2394  004E' 6EDF               	movwf	indf2,c
  2395  0050'                    
  2396                           ; BSR set to: 0
  2397  0050' 0012               	return		;funcret
  2398  0052'                    __end_of_sprintf:
  2399                           	callstack 0
  2400                           
  2401 ;; *************** function _vfprintf *****************
  2402 ;; Defined at:
  2403 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  fp              2   81[COMRAM] PTR struct _IO_FILE
  2406 ;;		 -> sprintf@f(6), 
  2407 ;;  fmt             2   83[COMRAM] PTR const unsigned char 
  2408 ;;		 -> STR_1(54), 
  2409 ;;  ap              2   85[COMRAM] PTR PTR void 
  2410 ;;		 -> sprintf@ap(2), 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  cfmt            2   87[COMRAM] PTR unsigned char 
  2413 ;;		 -> STR_1(54), 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  2   81[COMRAM] int 
  2416 ;; Registers used:
  2417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2423 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;Total ram usage:        8 bytes
  2428 ;; Hardware stack levels used: 1
  2429 ;; Hardware stack levels required when called: 6
  2430 ;; This function calls:
  2431 ;;		_vfpfcnvrt
  2432 ;; This function is called by:
  2433 ;;		_sprintf
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text9
  2438  0000'                    __ptext9:
  2439                           	callstack 0
  2440  0000'                    _vfprintf:
  2441                           	callstack 22
  2442  0000'                    
  2443                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  2444  0000' C053' F057'        	movff	vfprintf@fmt,vfprintf@cfmt
  2445  0004' C054' F058'        	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2446  0008'                    
  2447                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  2448  0008' 0E00               	movlw	0
  2449  000A' 0100               	movlb	0	; () banked
  2450  000C' 6F00'              	movwf	(_nout+1)& (0+255),b
  2451  000E' 0E00               	movlw	0
  2452  0010' 6F00'              	movwf	_nout& (0+255),b
  2453                           
  2454                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2455  0012' EF00' F000'        	goto	l5360
  2456  0016'                    l5358:
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  2460  0016' C051' F047'        	movff	vfprintf@fp,vfpfcnvrt@fp
  2461  001A' C052' F048'        	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2462  001E' 0E00'              	movlw	low vfprintf@cfmt
  2463  0020' 6E00'              	movwf	vfpfcnvrt@fmt^0,c
  2464  0022' 0E00'              	movlw	high vfprintf@cfmt
  2465  0024' 6E00'              	movwf	(vfpfcnvrt@fmt+1)^0,c
  2466  0026' C055' F04B'        	movff	vfprintf@ap,vfpfcnvrt@ap
  2467  002A' C056' F04C'        	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2468  002E' EC00' F000'        	call	_vfpfcnvrt	;wreg free
  2469  0032' 5000'              	movf	?_vfpfcnvrt^0,w,c
  2470  0034' 0100               	movlb	0	; () banked
  2471  0036' 2700'              	addwf	_nout& (0+255),f,b
  2472  0038' 5000'              	movf	(?_vfpfcnvrt+1)^0,w,c
  2473  003A' 2300'              	addwfc	(_nout+1)& (0+255),f,b
  2474  003C'                    l5360:
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2478  003C' C057' FFF6         	movff	vfprintf@cfmt,tblptrl
  2479  0040' C058' FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2480  0044'                    	if	0	;tblptru may be non-zero
  2481  0044'                    	endif
  2482  0044'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2483  0044' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2484  0046' 6EF8               	movwf	tblptru,c
  2485  0048'                    	endif
  2486  0048' 0008               	tblrd		*
  2487  004A' 50F5               	movf	tablat,w,c
  2488  004C' 0900               	iorlw	0
  2489  004E' A4D8               	btfss	status,2,c
  2490  0050' EF00' F000'        	goto	u6451
  2491  0054' EF00' F000'        	goto	u6450
  2492  0058'                    u6451:
  2493  0058' EF00' F000'        	goto	l5358
  2494  005C'                    u6450:
  2495  005C'                    
  2496                           ; BSR set to: 0
  2497                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  2498  005C' C000' F051'        	movff	_nout,?_vfprintf
  2499  0060' C001' F052'        	movff	_nout+1,?_vfprintf+1
  2500  0064'                    
  2501                           ; BSR set to: 0
  2502  0064' 0012               	return		;funcret
  2503  0066'                    __end_of_vfprintf:
  2504                           	callstack 0
  2505                           
  2506 ;; *************** function _vfpfcnvrt *****************
  2507 ;; Defined at:
  2508 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  fp              2   71[COMRAM] PTR struct _IO_FILE
  2511 ;;		 -> sprintf@f(6), 
  2512 ;;  fmt             2   73[COMRAM] PTR PTR unsigned char 
  2513 ;;		 -> vfprintf@cfmt(2), 
  2514 ;;  ap              2   75[COMRAM] PTR PTR void 
  2515 ;;		 -> sprintf@ap(2), 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  ll              8   56[BANK0 ] long long 
  2518 ;;  llu             8    0        unsigned long long 
  2519 ;;  f               4   68[BANK0 ] unsigned long long 
  2520 ;;  ct              3   72[BANK0 ] unsigned char [3]
  2521 ;;  vp              3    0        PTR void 
  2522 ;;  cp              3    0        PTR unsigned char 
  2523 ;;  i               2    0        int 
  2524 ;;  done            2    0        int 
  2525 ;;  c               1   75[BANK0 ] unsigned char 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  2   71[COMRAM] int 
  2528 ;; Registers used:
  2529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2535 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2537 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2538 ;;      Totals:        10      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2539 ;;Total ram usage:       30 bytes
  2540 ;; Hardware stack levels used: 1
  2541 ;; Hardware stack levels required when called: 5
  2542 ;; This function calls:
  2543 ;;		_atoi
  2544 ;;		_dtoa
  2545 ;;		_efgtoa
  2546 ;;		_fputc
  2547 ;;		_isdigit
  2548 ;;		_isupper
  2549 ;;		_strncmp
  2550 ;;		_tolower
  2551 ;; This function is called by:
  2552 ;;		_vfprintf
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text10
  2557  0000'                    __ptext10:
  2558                           	callstack 0
  2559  0000'                    _vfpfcnvrt:
  2560                           	callstack 22
  2561  0000'                    
  2562                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  2563  0000' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2564  0004' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2565  0008' CFDE FFF6          	movff	postinc2,tblptrl
  2566  000C' CFDD FFF7          	movff	postdec2,tblptrh
  2567  0010'                    	if	0	;tblptru may be non-zero
  2568  0010'                    	endif
  2569  0010'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2570  0010' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2571  0012' 6EF8               	movwf	tblptru,c
  2572  0014'                    	endif
  2573  0014' 0008               	tblrd		*
  2574  0016' 50F5               	movf	tablat,w,c
  2575  0018' 0A25               	xorlw	37
  2576  001A' A4D8               	btfss	status,2,c
  2577  001C' EF00' F000'        	goto	u6131
  2578  0020' EF00' F000'        	goto	u6130
  2579  0024'                    u6131:
  2580  0024' EF00' F000'        	goto	l5276
  2581  0028'                    u6130:
  2582  0028'                    
  2583                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  2584  0028' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2585  002C' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2586  0030' 2ADE               	incf	postinc2,f,c
  2587  0032' 0E00               	movlw	0
  2588  0034' 22DD               	addwfc	postdec2,f,c
  2589  0036'                    
  2590                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  2591  0036' 0E00               	movlw	0
  2592  0038' 0100               	movlb	0	; () banked
  2593  003A' 6F00'              	movwf	(_width+1)& (0+255),b
  2594  003C' 0E00               	movlw	0
  2595  003E' 6F00'              	movwf	_width& (0+255),b
  2596  0040' C002' F006'        	movff	_width,_flags
  2597  0044' C003' F007'        	movff	_width+1,_flags+1
  2598  0048'                    
  2599                           ; BSR set to: 0
  2600                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  2601  0048' 6900'              	setf	_prec& (0+255),b
  2602  004A' 6900'              	setf	(_prec+1)& (0+255),b
  2603  004C'                    
  2604                           ; BSR set to: 0
  2605                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 762:         if (
      +                          (*fmt)[0] == '.') {
  2606  004C' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2607  0050' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2608  0054' CFDE FFF6          	movff	postinc2,tblptrl
  2609  0058' CFDD FFF7          	movff	postdec2,tblptrh
  2610  005C'                    	if	0	;tblptru may be non-zero
  2611  005C'                    	endif
  2612  005C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2613  005C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2614  005E' 6EF8               	movwf	tblptru,c
  2615  0060'                    	endif
  2616  0060' 0008               	tblrd		*
  2617  0062' 50F5               	movf	tablat,w,c
  2618  0064' 0A2E               	xorlw	46
  2619  0066' A4D8               	btfss	status,2,c
  2620  0068' EF00' F000'        	goto	u6141
  2621  006C' EF00' F000'        	goto	u6140
  2622  0070'                    u6141:
  2623  0070' EF00' F000'        	goto	l5212
  2624  0074'                    u6140:
  2625  0074'                    
  2626                           ; BSR set to: 0
  2627                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 763:             
      +                          prec = 0;
  2628  0074' 0E00               	movlw	0
  2629  0076' 6F00'              	movwf	(_prec+1)& (0+255),b
  2630  0078' 0E00               	movlw	0
  2631  007A' 6F00'              	movwf	_prec& (0+255),b
  2632  007C'                    
  2633                           ; BSR set to: 0
  2634                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 764:             
      +                          ++*fmt;
  2635  007C' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2636  0080' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2637  0084' 2ADE               	incf	postinc2,f,c
  2638  0086' 0E00               	movlw	0
  2639  0088' 22DD               	addwfc	postdec2,f,c
  2640  008A'                    
  2641                           ; BSR set to: 0
  2642                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 765:             
      +                          if ((*fmt)[0] == '*') {
  2643  008A' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2644  008E' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2645  0092' CFDE FFF6          	movff	postinc2,tblptrl
  2646  0096' CFDD FFF7          	movff	postdec2,tblptrh
  2647  009A'                    	if	0	;tblptru may be non-zero
  2648  009A'                    	endif
  2649  009A'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2650  009A' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2651  009C' 6EF8               	movwf	tblptru,c
  2652  009E'                    	endif
  2653  009E' 0008               	tblrd		*
  2654  00A0' 50F5               	movf	tablat,w,c
  2655  00A2' 0A2A               	xorlw	42
  2656  00A4' A4D8               	btfss	status,2,c
  2657  00A6' EF00' F000'        	goto	u6151
  2658  00AA' EF00' F000'        	goto	u6150
  2659  00AE'                    u6151:
  2660  00AE' EF00' F000'        	goto	l5202
  2661  00B2'                    u6150:
  2662  00B2'                    
  2663                           ; BSR set to: 0
  2664                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 766:             
      +                              ++*fmt;
  2665  00B2' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2666  00B6' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2667  00BA' 2ADE               	incf	postinc2,f,c
  2668  00BC' 0E00               	movlw	0
  2669  00BE' 22DD               	addwfc	postdec2,f,c
  2670                           
  2671                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 767:             
      +                              prec = (*(int *)__va_arg(*(int **)ap, (int)0));
  2672  00C0' C04B' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2673  00C4' C04C' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2674  00C8' CFDF F04D'         	movff	indf2,??_vfpfcnvrt
  2675  00CC' 0E02               	movlw	2
  2676  00CE' 26DE               	addwf	postinc2,f,c
  2677  00D0' CFDF F04E'         	movff	indf2,??_vfpfcnvrt+1
  2678  00D4' 0E00               	movlw	0
  2679  00D6' 22DD               	addwfc	postdec2,f,c
  2680  00D8' C04D' FFD9         	movff	??_vfpfcnvrt,fsr2l
  2681  00DC' C04E' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2682  00E0' CFDE F004'         	movff	postinc2,_prec
  2683  00E4' CFDD F005'         	movff	postdec2,_prec+1
  2684                           
  2685                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 768:             
      +                          } else {
  2686  00E8' EF00' F000'        	goto	l5212
  2687  00EC'                    l5202:
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 769:             
      +                              prec = atoi(*fmt);
  2691  00EC' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2692  00F0' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2693  00F4' CFDE F007'         	movff	postinc2,atoi@s
  2694  00F8' CFDD F008'         	movff	postdec2,atoi@s+1
  2695  00FC' EC00' F000'        	call	_atoi	;wreg free
  2696  0100' C007' F004'        	movff	?_atoi,_prec
  2697  0104' C008' F005'        	movff	?_atoi+1,_prec+1
  2698                           
  2699                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 770:             
      +                              while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  2700  0108' EF00' F000'        	goto	l5206
  2701  010C'                    l5204:
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 771:             
      +                                  ++*fmt;
  2705  010C' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2706  0110' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2707  0114' 2ADE               	incf	postinc2,f,c
  2708  0116' 0E00               	movlw	0
  2709  0118' 22DD               	addwfc	postdec2,f,c
  2710  011A'                    l5206:
  2711  011A' 0ED0               	movlw	208
  2712  011C' 6E00'              	movwf	??_vfpfcnvrt^0,c
  2713  011E' 0EFF               	movlw	255
  2714  0120' 6E00'              	movwf	(??_vfpfcnvrt+1)^0,c
  2715  0122' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2716  0126' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2717  012A' CFDE FFF6          	movff	postinc2,tblptrl
  2718  012E' CFDD FFF7          	movff	postdec2,tblptrh
  2719  0132'                    	if	0	;tblptru may be non-zero
  2720  0132'                    	endif
  2721  0132'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2722  0132' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2723  0134' 6EF8               	movwf	tblptru,c
  2724  0136'                    	endif
  2725  0136' 0008               	tblrd		*
  2726  0138' 50F5               	movf	tablat,w,c
  2727  013A' 6E00'              	movwf	(??_vfpfcnvrt+2)^0,c
  2728  013C' 6A00'              	clrf	(??_vfpfcnvrt+3)^0,c
  2729  013E' 5000'              	movf	??_vfpfcnvrt^0,w,c
  2730  0140' 2600'              	addwf	(??_vfpfcnvrt+2)^0,f,c
  2731  0142' 5000'              	movf	(??_vfpfcnvrt+1)^0,w,c
  2732  0144' 2200'              	addwfc	(??_vfpfcnvrt+3)^0,f,c
  2733  0146' 5000'              	movf	(??_vfpfcnvrt+3)^0,w,c
  2734  0148' E10A               	bnz	u6160
  2735  014A' 0E0A               	movlw	10
  2736  014C' 5C00'              	subwf	(??_vfpfcnvrt+2)^0,w,c
  2737  014E' A0D8               	btfss	status,0,c
  2738  0150' EF00' F000'        	goto	u6161
  2739  0154' EF00' F000'        	goto	u6160
  2740  0158'                    u6161:
  2741  0158' 0E01               	movlw	1
  2742  015A' EF00' F000'        	goto	u6170
  2743  015E'                    u6160:
  2744  015E' 0E00               	movlw	0
  2745  0160'                    u6170:
  2746  0160' 0100               	movlb	0	; () banked
  2747  0162' 6F00'              	movwf	_vfpfcnvrt$2767& (0+255),b
  2748  0164' 6B00'              	clrf	(_vfpfcnvrt$2767+1)& (0+255),b
  2749  0166'                    
  2750                           ; BSR set to: 0
  2751  0166' 5100'              	movf	_vfpfcnvrt$2767& (0+255),w,b
  2752  0168' 1100'              	iorwf	(_vfpfcnvrt$2767+1)& (0+255),w,b
  2753  016A' A4D8               	btfss	status,2,c
  2754  016C' EF00' F000'        	goto	u6181
  2755  0170' EF00' F000'        	goto	u6180
  2756  0174'                    u6181:
  2757  0174' EF00' F000'        	goto	l5204
  2758  0178'                    u6180:
  2759  0178'                    l5212:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 779:         ct[0
      +                          ] = (char)tolower((int)(*fmt)[0]);
  2763  0178' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2764  017C' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2765  0180' CFDE FFF6          	movff	postinc2,tblptrl
  2766  0184' CFDD FFF7          	movff	postdec2,tblptrh
  2767  0188'                    	if	0	;tblptru may be non-zero
  2768  0188'                    	endif
  2769  0188'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2770  0188' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2771  018A' 6EF8               	movwf	tblptru,c
  2772  018C'                    	endif
  2773  018C' 0008               	tblrd		*
  2774  018E' 50F5               	movf	tablat,w,c
  2775  0190' 6E00'              	movwf	tolower@c^0,c
  2776  0192' 6A00'              	clrf	(tolower@c+1)^0,c
  2777  0194' EC00' F000'        	call	_tolower	;wreg free
  2778  0198' 5000'              	movf	?_tolower^0,w,c
  2779  019A' 0100               	movlb	0	; () banked
  2780  019C' 6F00'              	movwf	vfpfcnvrt@ct& (0+255),b
  2781  019E'                    
  2782                           ; BSR set to: 0
  2783                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 780:         if (
      +                          ct[0]) {
  2784  019E' 5100'              	movf	vfpfcnvrt@ct& (0+255),w,b
  2785  01A0' B4D8               	btfsc	status,2,c
  2786  01A2' EF00' F000'        	goto	u6191
  2787  01A6' EF00' F000'        	goto	u6190
  2788  01AA'                    u6191:
  2789  01AA' EF00' F000'        	goto	l5222
  2790  01AE'                    u6190:
  2791  01AE'                    
  2792                           ; BSR set to: 0
  2793                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 781:             
      +                          ct[1] = (char)tolower((int)(*fmt)[1]);
  2794  01AE' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2795  01B2' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2796  01B6' CFDE F04D'         	movff	postinc2,??_vfpfcnvrt
  2797  01BA' CFDD F04E'         	movff	postdec2,??_vfpfcnvrt+1
  2798  01BE' 0E01               	movlw	1
  2799  01C0' 2600'              	addwf	??_vfpfcnvrt^0,f,c
  2800  01C2' 0E00               	movlw	0
  2801  01C4' 2200'              	addwfc	(??_vfpfcnvrt+1)^0,f,c
  2802  01C6' C04D' FFF6         	movff	??_vfpfcnvrt,tblptrl
  2803  01CA' C04E' FFF7         	movff	??_vfpfcnvrt+1,tblptrh
  2804  01CE'                    	if	0	;tblptru may be non-zero
  2805  01CE'                    	endif
  2806  01CE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2807  01CE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2808  01D0' 6EF8               	movwf	tblptru,c
  2809  01D2'                    	endif
  2810  01D2' 0008               	tblrd		*
  2811  01D4' 50F5               	movf	tablat,w,c
  2812  01D6' 6E00'              	movwf	tolower@c^0,c
  2813  01D8' 6A00'              	clrf	(tolower@c+1)^0,c
  2814  01DA' EC00' F000'        	call	_tolower	;wreg free
  2815  01DE' 5000'              	movf	?_tolower^0,w,c
  2816  01E0' 0100               	movlb	0	; () banked
  2817  01E2' 6F00'              	movwf	(vfpfcnvrt@ct+1)& (0+255),b
  2818  01E4'                    
  2819                           ; BSR set to: 0
  2820                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 782:             
      +                          if (ct[1]) {
  2821  01E4' 5100'              	movf	(vfpfcnvrt@ct+1)& (0+255),w,b
  2822  01E6' B4D8               	btfsc	status,2,c
  2823  01E8' EF00' F000'        	goto	u6201
  2824  01EC' EF00' F000'        	goto	u6200
  2825  01F0'                    u6201:
  2826  01F0' EF00' F000'        	goto	l5222
  2827  01F4'                    u6200:
  2828  01F4'                    
  2829                           ; BSR set to: 0
  2830                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 783:             
      +                              ct[2] = (char)tolower((int)(*fmt)[2]);
  2831  01F4' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2832  01F8' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2833  01FC' CFDE F04D'         	movff	postinc2,??_vfpfcnvrt
  2834  0200' CFDD F04E'         	movff	postdec2,??_vfpfcnvrt+1
  2835  0204' 0E02               	movlw	2
  2836  0206' 2600'              	addwf	??_vfpfcnvrt^0,f,c
  2837  0208' 0E00               	movlw	0
  2838  020A' 2200'              	addwfc	(??_vfpfcnvrt+1)^0,f,c
  2839  020C' C04D' FFF6         	movff	??_vfpfcnvrt,tblptrl
  2840  0210' C04E' FFF7         	movff	??_vfpfcnvrt+1,tblptrh
  2841  0214'                    	if	0	;tblptru may be non-zero
  2842  0214'                    	endif
  2843  0214'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2844  0214' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2845  0216' 6EF8               	movwf	tblptru,c
  2846  0218'                    	endif
  2847  0218' 0008               	tblrd		*
  2848  021A' 50F5               	movf	tablat,w,c
  2849  021C' 6E00'              	movwf	tolower@c^0,c
  2850  021E' 6A00'              	clrf	(tolower@c+1)^0,c
  2851  0220' EC00' F000'        	call	_tolower	;wreg free
  2852  0224' 5000'              	movf	?_tolower^0,w,c
  2853  0226' 0100               	movlb	0	; () banked
  2854  0228' 6F00'              	movwf	(vfpfcnvrt@ct+2)& (0+255),b
  2855  022A'                    l5222:
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  2859  022A' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2860  022E' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2861  0232' CFDE FFF6          	movff	postinc2,tblptrl
  2862  0236' CFDD FFF7          	movff	postdec2,tblptrh
  2863  023A'                    	if	0	;tblptru may be non-zero
  2864  023A'                    	endif
  2865  023A'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2866  023A' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2867  023C' 6EF8               	movwf	tblptru,c
  2868  023E'                    	endif
  2869  023E' 0008               	tblrd		*
  2870  0240' 50F5               	movf	tablat,w,c
  2871  0242' 0A64               	xorlw	100
  2872  0244' B4D8               	btfsc	status,2,c
  2873  0246' EF00' F000'        	goto	u6211
  2874  024A' EF00' F000'        	goto	u6210
  2875  024E'                    u6211:
  2876  024E' EF00' F000'        	goto	l5226
  2877  0252'                    u6210:
  2878  0252'                    
  2879                           ; BSR set to: 0
  2880  0252' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2881  0256' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2882  025A' CFDE FFF6          	movff	postinc2,tblptrl
  2883  025E' CFDD FFF7          	movff	postdec2,tblptrh
  2884  0262'                    	if	0	;tblptru may be non-zero
  2885  0262'                    	endif
  2886  0262'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2887  0262' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2888  0264' 6EF8               	movwf	tblptru,c
  2889  0266'                    	endif
  2890  0266' 0008               	tblrd		*
  2891  0268' 50F5               	movf	tablat,w,c
  2892  026A' 0A69               	xorlw	105
  2893  026C' A4D8               	btfss	status,2,c
  2894  026E' EF00' F000'        	goto	u6221
  2895  0272' EF00' F000'        	goto	u6220
  2896  0276'                    u6221:
  2897  0276' EF00' F000'        	goto	l5232
  2898  027A'                    u6220:
  2899  027A'                    l5226:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  2903  027A' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2904  027E' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2905  0282' 2ADE               	incf	postinc2,f,c
  2906  0284' 0E00               	movlw	0
  2907  0286' 22DD               	addwfc	postdec2,f,c
  2908                           
  2909                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2910  0288' C04B' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2911  028C' C04C' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2912  0290' CFDF F04D'         	movff	indf2,??_vfpfcnvrt
  2913  0294' 0E02               	movlw	2
  2914  0296' 26DE               	addwf	postinc2,f,c
  2915  0298' CFDF F04E'         	movff	indf2,??_vfpfcnvrt+1
  2916  029C' 0E00               	movlw	0
  2917  029E' 22DD               	addwfc	postdec2,f,c
  2918  02A0' C04D' FFD9         	movff	??_vfpfcnvrt,fsr2l
  2919  02A4' C04E' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2920  02A8' CFDE F038'         	movff	postinc2,vfpfcnvrt@ll
  2921  02AC' CFDD F039'         	movff	postdec2,vfpfcnvrt@ll+1
  2922  02B0' 0E00               	movlw	0
  2923  02B2' BF00'              	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  2924  02B4' 0EFF               	movlw	-1
  2925  02B6' 6F00'              	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  2926  02B8' 6F00'              	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  2927  02BA' 6F00'              	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  2928  02BC' 6F00'              	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  2929  02BE' 6F00'              	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  2930  02C0' 6F00'              	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  2931  02C2'                    
  2932                           ; BSR set to: 0
  2933                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  2934  02C2' C047' F01B'        	movff	vfpfcnvrt@fp,dtoa@fp
  2935  02C6' C048' F01C'        	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2936  02CA' C038' F01D'        	movff	vfpfcnvrt@ll,dtoa@d
  2937  02CE' C039' F01E'        	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2938  02D2' C03A' F01F'        	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2939  02D6' C03B' F020'        	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2940  02DA' C03C' F021'        	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2941  02DE' C03D' F022'        	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2942  02E2' C03E' F023'        	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2943  02E6' C03F' F024'        	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2944  02EA' EC00' F000'        	call	_dtoa	;wreg free
  2945  02EE' C01B' F047'        	movff	?_dtoa,?_vfpfcnvrt
  2946  02F2' C01C' F048'        	movff	?_dtoa+1,?_vfpfcnvrt+1
  2947  02F6' EF00' F000'        	goto	l1474
  2948  02FA'                    l5232:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 942:         if (
      +                          ct[0] == 'f') {
  2952  02FA' 0E66               	movlw	102
  2953  02FC' 1900'              	xorwf	vfpfcnvrt@ct& (0+255),w,b
  2954  02FE' A4D8               	btfss	status,2,c
  2955  0300' EF00' F000'        	goto	u6231
  2956  0304' EF00' F000'        	goto	u6230
  2957  0308'                    u6231:
  2958  0308' EF00' F000'        	goto	l5244
  2959  030C'                    u6230:
  2960  030C'                    
  2961                           ; BSR set to: 0
  2962                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 944:             
      +                          c = (*fmt)[0];
  2963  030C' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2964  0310' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2965  0314' CFDE FFF6          	movff	postinc2,tblptrl
  2966  0318' CFDD FFF7          	movff	postdec2,tblptrh
  2967  031C'                    	if	0	;tblptru may be non-zero
  2968  031C'                    	endif
  2969  031C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2970  031C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2971  031E' 6EF8               	movwf	tblptru,c
  2972  0320'                    	endif
  2973  0320' 0008               	tblrd		*
  2974  0322' CFF5 F04B'         	movff	tablat,vfpfcnvrt@c
  2975  0326'                    
  2976                           ; BSR set to: 0
  2977                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 945:             
      +                          ++*fmt;
  2978  0326' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2979  032A' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2980  032E' 2ADE               	incf	postinc2,f,c
  2981  0330' 0E00               	movlw	0
  2982  0332' 22DD               	addwfc	postdec2,f,c
  2983  0334'                    
  2984                           ; BSR set to: 0
  2985                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 946:             
      +                          f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  2986  0334' C04B' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2987  0338' C04C' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2988  033C' CFDF F04D'         	movff	indf2,??_vfpfcnvrt
  2989  0340' 0E04               	movlw	4
  2990  0342' 26DE               	addwf	postinc2,f,c
  2991  0344' CFDF F04E'         	movff	indf2,??_vfpfcnvrt+1
  2992  0348' 0E00               	movlw	0
  2993  034A' 22DD               	addwfc	postdec2,f,c
  2994  034C' C04D' FFD9         	movff	??_vfpfcnvrt,fsr2l
  2995  0350' C04E' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2996  0354' CFDE F044'         	movff	postinc2,vfpfcnvrt@f
  2997  0358' CFDE F045'         	movff	postinc2,vfpfcnvrt@f+1
  2998  035C' CFDE F046'         	movff	postinc2,vfpfcnvrt@f+2
  2999  0360' CFDE F047'         	movff	postinc2,vfpfcnvrt@f+3
  3000  0364'                    l5240:
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 948:             
      +                          return efgtoa(fp, f, c);
  3004  0364' C047' F03B'        	movff	vfpfcnvrt@fp,efgtoa@fp
  3005  0368' C048' F03C'        	movff	vfpfcnvrt@fp+1,efgtoa@fp+1
  3006  036C' C044' F03D'        	movff	vfpfcnvrt@f,efgtoa@f
  3007  0370' C045' F03E'        	movff	vfpfcnvrt@f+1,efgtoa@f+1
  3008  0374' C046' F03F'        	movff	vfpfcnvrt@f+2,efgtoa@f+2
  3009  0378' C047' F040'        	movff	vfpfcnvrt@f+3,efgtoa@f+3
  3010  037C' C04B' F041'        	movff	vfpfcnvrt@c,efgtoa@c
  3011  0380' EC00' F000'        	call	_efgtoa	;wreg free
  3012  0384' C03B' F047'        	movff	?_efgtoa,?_vfpfcnvrt
  3013  0388' C03C' F048'        	movff	?_efgtoa+1,?_vfpfcnvrt+1
  3014  038C' EF00' F000'        	goto	l1474
  3015  0390'                    l5244:
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 950:         if (
      +                          !strncmp(ct, "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
  3019  0390' 0E00'              	movlw	low vfpfcnvrt@ct
  3020  0392' 6E00'              	movwf	strncmp@_l^0,c
  3021  0394' 0E00'              	movlw	high vfpfcnvrt@ct
  3022  0396' 6E00'              	movwf	(strncmp@_l+1)^0,c
  3023  0398' 0E00'              	movlw	low STR_10
  3024  039A' 6E00'              	movwf	strncmp@_r^0,c
  3025  039C' 0E00'              	movlw	high STR_10
  3026  039E' 6E00'              	movwf	(strncmp@_r+1)^0,c
  3027  03A0' 0E00               	movlw	0
  3028  03A2' 6E00'              	movwf	(strncmp@n+1)^0,c
  3029  03A4' 0E02               	movlw	2
  3030  03A6' 6E00'              	movwf	strncmp@n^0,c
  3031  03A8' EC00' F000'        	call	_strncmp	;wreg free
  3032  03AC' 5000'              	movf	?_strncmp^0,w,c
  3033  03AE' 1000'              	iorwf	(?_strncmp+1)^0,w,c
  3034  03B0' A4D8               	btfss	status,2,c
  3035  03B2' EF00' F000'        	goto	u6241
  3036  03B6' EF00' F000'        	goto	u6240
  3037  03BA'                    u6241:
  3038  03BA' EF00' F000'        	goto	l5260
  3039  03BE'                    u6240:
  3040  03BE'                    
  3041                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 953:             
      +                          if ((0 ? isupper((int)(*fmt)[0]) : ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
  3042  03BE' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3043  03C2' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3044  03C6' CFDE F04D'         	movff	postinc2,??_vfpfcnvrt
  3045  03CA' CFDD F04E'         	movff	postdec2,??_vfpfcnvrt+1
  3046  03CE' 0E01               	movlw	1
  3047  03D0' 2600'              	addwf	??_vfpfcnvrt^0,f,c
  3048  03D2' 0E00               	movlw	0
  3049  03D4' 2200'              	addwfc	(??_vfpfcnvrt+1)^0,f,c
  3050  03D6' C04D' FFF6         	movff	??_vfpfcnvrt,tblptrl
  3051  03DA' C04E' FFF7         	movff	??_vfpfcnvrt+1,tblptrh
  3052  03DE'                    	if	0	;tblptru may be non-zero
  3053  03DE'                    	endif
  3054  03DE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3055  03DE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3056  03E0' 6EF8               	movwf	tblptru,c
  3057  03E2'                    	endif
  3058  03E2' 0008               	tblrd		*
  3059  03E4' CFF5 F04B'         	movff	tablat,vfpfcnvrt@c
  3060  03E8' 0EBF               	movlw	191
  3061  03EA' 6E00'              	movwf	??_vfpfcnvrt^0,c
  3062  03EC' 0EFF               	movlw	255
  3063  03EE' 6E00'              	movwf	(??_vfpfcnvrt+1)^0,c
  3064  03F0' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3065  03F4' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3066  03F8' CFDE FFF6          	movff	postinc2,tblptrl
  3067  03FC' CFDD FFF7          	movff	postdec2,tblptrh
  3068  0400'                    	if	0	;tblptru may be non-zero
  3069  0400'                    	endif
  3070  0400'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3071  0400' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3072  0402' 6EF8               	movwf	tblptru,c
  3073  0404'                    	endif
  3074  0404' 0008               	tblrd		*
  3075  0406' 50F5               	movf	tablat,w,c
  3076  0408' 6E00'              	movwf	(??_vfpfcnvrt+2)^0,c
  3077  040A' 6A00'              	clrf	(??_vfpfcnvrt+3)^0,c
  3078  040C' 5000'              	movf	??_vfpfcnvrt^0,w,c
  3079  040E' 2600'              	addwf	(??_vfpfcnvrt+2)^0,f,c
  3080  0410' 5000'              	movf	(??_vfpfcnvrt+1)^0,w,c
  3081  0412' 2200'              	addwfc	(??_vfpfcnvrt+3)^0,f,c
  3082  0414' 5000'              	movf	(??_vfpfcnvrt+3)^0,w,c
  3083  0416' E10A               	bnz	u6250
  3084  0418' 0E1A               	movlw	26
  3085  041A' 5C00'              	subwf	(??_vfpfcnvrt+2)^0,w,c
  3086  041C' A0D8               	btfss	status,0,c
  3087  041E' EF00' F000'        	goto	u6251
  3088  0422' EF00' F000'        	goto	u6250
  3089  0426'                    u6251:
  3090  0426' 0E01               	movlw	1
  3091  0428' EF00' F000'        	goto	u6260
  3092  042C'                    u6250:
  3093  042C' 0E00               	movlw	0
  3094  042E'                    u6260:
  3095  042E' 0100               	movlb	0	; () banked
  3096  0430' 6F00'              	movwf	_vfpfcnvrt$2772& (0+255),b
  3097  0432' 6B00'              	clrf	(_vfpfcnvrt$2772+1)& (0+255),b
  3098  0434'                    
  3099                           ; BSR set to: 0
  3100  0434' 5100'              	movf	_vfpfcnvrt$2772& (0+255),w,b
  3101  0436' 1100'              	iorwf	(_vfpfcnvrt$2772+1)& (0+255),w,b
  3102  0438' B4D8               	btfsc	status,2,c
  3103  043A' EF00' F000'        	goto	u6271
  3104  043E' EF00' F000'        	goto	u6270
  3105  0442'                    u6271:
  3106  0442' EF00' F000'        	goto	l5254
  3107  0446'                    u6270:
  3108  0446'                    
  3109                           ; BSR set to: 0
  3110                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 954:             
      +                              f = (*(long double *)__va_arg(*(long double **)ap, (long double)0));
  3111  0446' C04B' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3112  044A' C04C' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3113  044E' CFDF F04D'         	movff	indf2,??_vfpfcnvrt
  3114  0452' 0E04               	movlw	4
  3115  0454' 26DE               	addwf	postinc2,f,c
  3116  0456' CFDF F04E'         	movff	indf2,??_vfpfcnvrt+1
  3117  045A' 0E00               	movlw	0
  3118  045C' 22DD               	addwfc	postdec2,f,c
  3119  045E' C04D' FFD9         	movff	??_vfpfcnvrt,fsr2l
  3120  0462' C04E' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3121  0466' CFDE F044'         	movff	postinc2,vfpfcnvrt@f
  3122  046A' CFDE F045'         	movff	postinc2,vfpfcnvrt@f+1
  3123  046E' CFDE F046'         	movff	postinc2,vfpfcnvrt@f+2
  3124  0472' CFDE F047'         	movff	postinc2,vfpfcnvrt@f+3
  3125                           
  3126                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 955:             
      +                          } else {
  3127  0476' EF00' F000'        	goto	l1482
  3128  047A'                    l5254:
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 956:             
      +                              f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  3132  047A' C04B' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3133  047E' C04C' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3134  0482' CFDF F04D'         	movff	indf2,??_vfpfcnvrt
  3135  0486' 0E04               	movlw	4
  3136  0488' 26DE               	addwf	postinc2,f,c
  3137  048A' CFDF F04E'         	movff	indf2,??_vfpfcnvrt+1
  3138  048E' 0E00               	movlw	0
  3139  0490' 22DD               	addwfc	postdec2,f,c
  3140  0492' C04D' FFD9         	movff	??_vfpfcnvrt,fsr2l
  3141  0496' C04E' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3142  049A' CFDE F044'         	movff	postinc2,vfpfcnvrt@f
  3143  049E' CFDE F045'         	movff	postinc2,vfpfcnvrt@f+1
  3144  04A2' CFDE F046'         	movff	postinc2,vfpfcnvrt@f+2
  3145  04A6' CFDE F047'         	movff	postinc2,vfpfcnvrt@f+3
  3146  04AA'                    l1482:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 958:             
      +                          *fmt += ((sizeof("lf")/sizeof("lf"[0]))-1);
  3150  04AA' 0E02               	movlw	2
  3151  04AC' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3152  04B0' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3153  04B4' 26DE               	addwf	postinc2,f,c
  3154  04B6' 0E00               	movlw	0
  3155  04B8' 22DD               	addwfc	postdec2,f,c
  3156  04BA' EF00' F000'        	goto	l5240
  3157  04BE'                    l5260:
  3158                           
  3159                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  3160  04BE' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3161  04C2' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3162  04C6' CFDE FFF6          	movff	postinc2,tblptrl
  3163  04CA' CFDD FFF7          	movff	postdec2,tblptrh
  3164  04CE'                    	if	0	;tblptru may be non-zero
  3165  04CE'                    	endif
  3166  04CE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3167  04CE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3168  04D0' 6EF8               	movwf	tblptru,c
  3169  04D2'                    	endif
  3170  04D2' 0008               	tblrd		*
  3171  04D4' 50F5               	movf	tablat,w,c
  3172  04D6' 0A25               	xorlw	37
  3173  04D8' A4D8               	btfss	status,2,c
  3174  04DA' EF00' F000'        	goto	u6281
  3175  04DE' EF00' F000'        	goto	u6280
  3176  04E2'                    u6281:
  3177  04E2' EF00' F000'        	goto	l5270
  3178  04E6'                    u6280:
  3179  04E6'                    
  3180                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  3181  04E6' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3182  04EA' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3183  04EE' 2ADE               	incf	postinc2,f,c
  3184  04F0' 0E00               	movlw	0
  3185  04F2' 22DD               	addwfc	postdec2,f,c
  3186  04F4'                    
  3187                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  3188  04F4' 0E00               	movlw	0
  3189  04F6' 6E00'              	movwf	(fputc@c+1)^0,c
  3190  04F8' 0E25               	movlw	37
  3191  04FA' 6E00'              	movwf	fputc@c^0,c
  3192  04FC' C047' F002'        	movff	vfpfcnvrt@fp,fputc@fp
  3193  0500' C048' F003'        	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3194  0504' EC00' F000'        	call	_fputc	;wreg free
  3195  0508'                    l5266:
  3196                           
  3197                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  3198  0508' 0E00               	movlw	0
  3199  050A' 6E00'              	movwf	(?_vfpfcnvrt+1)^0,c
  3200  050C' 0E01               	movlw	1
  3201  050E' 6E00'              	movwf	?_vfpfcnvrt^0,c
  3202  0510' EF00' F000'        	goto	l1474
  3203  0514'                    l5270:
  3204                           
  3205                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  3206  0514' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3207  0518' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3208  051C' 2ADE               	incf	postinc2,f,c
  3209  051E' 0E00               	movlw	0
  3210  0520' 22DD               	addwfc	postdec2,f,c
  3211  0522'                    
  3212                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  3213  0522' 0E00               	movlw	0
  3214  0524' 6E00'              	movwf	(?_vfpfcnvrt+1)^0,c
  3215  0526' 0E00               	movlw	0
  3216  0528' 6E00'              	movwf	?_vfpfcnvrt^0,c
  3217  052A' EF00' F000'        	goto	l1474
  3218  052E'                    l5276:
  3219                           
  3220                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  3221  052E' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3222  0532' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3223  0536' CFDE FFF6          	movff	postinc2,tblptrl
  3224  053A' CFDD FFF7          	movff	postdec2,tblptrh
  3225  053E'                    	if	0	;tblptru may be non-zero
  3226  053E'                    	endif
  3227  053E'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3228  053E' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3229  0540' 6EF8               	movwf	tblptru,c
  3230  0542'                    	endif
  3231  0542' 0008               	tblrd		*
  3232  0544' 50F5               	movf	tablat,w,c
  3233  0546' 6E00'              	movwf	fputc@c^0,c
  3234  0548' 6A00'              	clrf	(fputc@c+1)^0,c
  3235  054A' C047' F002'        	movff	vfpfcnvrt@fp,fputc@fp
  3236  054E' C048' F003'        	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3237  0552' EC00' F000'        	call	_fputc	;wreg free
  3238  0556'                    
  3239                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  3240  0556' C049' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3241  055A' C04A' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3242  055E' 2ADE               	incf	postinc2,f,c
  3243  0560' 0E00               	movlw	0
  3244  0562' 22DD               	addwfc	postdec2,f,c
  3245  0564' EF00' F000'        	goto	l5266
  3246  0568'                    l1474:
  3247  0568' 0012               	return		;funcret
  3248  056A'                    __end_of_vfpfcnvrt:
  3249                           	callstack 0
  3250                           
  3251 ;; *************** function _strncmp *****************
  3252 ;; Defined at:
  3253 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strncmp.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  _l              2    0[COMRAM] PTR const unsigned char 
  3256 ;;		 -> vfpfcnvrt@ct(3), 
  3257 ;;  _r              2    2[COMRAM] PTR const unsigned char 
  3258 ;;		 -> STR_12(3), 
  3259 ;;  n               2    4[COMRAM] unsigned int 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  r               2    9[COMRAM] PTR const unsigned char 
  3262 ;;		 -> STR_12(3), 
  3263 ;;  l               2    7[COMRAM] PTR const unsigned char 
  3264 ;;		 -> vfpfcnvrt@ct(3), 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  2    0[COMRAM] int 
  3267 ;; Registers used:
  3268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3274 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3277 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3278 ;;Total ram usage:       11 bytes
  3279 ;; Hardware stack levels used: 1
  3280 ;; This function calls:
  3281 ;;		Nothing
  3282 ;; This function is called by:
  3283 ;;		_vfpfcnvrt
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text11
  3288  0000'                    __ptext11:
  3289                           	callstack 0
  3290  0000'                    _strncmp:
  3291                           	callstack 26
  3292  0000' C000' F007'        	movff	strncmp@_l,strncmp@l
  3293  0004' C001' F008'        	movff	strncmp@_l+1,strncmp@l+1
  3294  0008' C002' F009'        	movff	strncmp@_r,strncmp@r
  3295  000C' C003' F00A'        	movff	strncmp@_r+1,strncmp@r+1
  3296  0010' 0600'              	decf	strncmp@n^0,f,c
  3297  0012' A0D8               	btfss	status,0,c
  3298  0014' 0600'              	decf	(strncmp@n+1)^0,f,c
  3299  0016' 2800'              	incf	strncmp@n^0,w,c
  3300  0018' E106               	bnz	u6021
  3301  001A' 2800'              	incf	(strncmp@n+1)^0,w,c
  3302  001C' A4D8               	btfss	status,2,c
  3303  001E' EF00' F000'        	goto	u6021
  3304  0022' EF00' F000'        	goto	u6020
  3305  0026'                    u6021:
  3306  0026' EF00' F000'        	goto	l5128
  3307  002A'                    u6020:
  3308  002A' 0E00               	movlw	0
  3309  002C' 6E00'              	movwf	(?_strncmp+1)^0,c
  3310  002E' 0E00               	movlw	0
  3311  0030' 6E00'              	movwf	?_strncmp^0,c
  3312  0032' EF00' F000'        	goto	l1610
  3313  0036'                    l5126:
  3314  0036' 4A00'              	infsnz	strncmp@l^0,f,c
  3315  0038' 2A00'              	incf	(strncmp@l+1)^0,f,c
  3316  003A' 4A00'              	infsnz	strncmp@r^0,f,c
  3317  003C' 2A00'              	incf	(strncmp@r+1)^0,f,c
  3318  003E' 0600'              	decf	strncmp@n^0,f,c
  3319  0040' A0D8               	btfss	status,0,c
  3320  0042' 0600'              	decf	(strncmp@n+1)^0,f,c
  3321  0044'                    l5128:
  3322  0044' C007' FFD9         	movff	strncmp@l,fsr2l
  3323  0048' C008' FFDA         	movff	strncmp@l+1,fsr2h
  3324  004C' 50DF               	movf	indf2,w,c
  3325  004E' B4D8               	btfsc	status,2,c
  3326  0050' EF00' F000'        	goto	u6031
  3327  0054' EF00' F000'        	goto	u6030
  3328  0058'                    u6031:
  3329  0058' EF00' F000'        	goto	l5136
  3330  005C'                    u6030:
  3331  005C' C009' FFF6         	movff	strncmp@r,tblptrl
  3332  0060' C00A' FFF7         	movff	strncmp@r+1,tblptrh
  3333  0064'                    	if	0	;tblptru may be non-zero
  3334  0064'                    	endif
  3335  0064'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3336  0064' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3337  0066' 6EF8               	movwf	tblptru,c
  3338  0068'                    	endif
  3339  0068' 0008               	tblrd		*
  3340  006A' 50F5               	movf	tablat,w,c
  3341  006C' 0900               	iorlw	0
  3342  006E' B4D8               	btfsc	status,2,c
  3343  0070' EF00' F000'        	goto	u6041
  3344  0074' EF00' F000'        	goto	u6040
  3345  0078'                    u6041:
  3346  0078' EF00' F000'        	goto	l5136
  3347  007C'                    u6040:
  3348  007C' 5000'              	movf	strncmp@n^0,w,c
  3349  007E' 1000'              	iorwf	(strncmp@n+1)^0,w,c
  3350  0080' B4D8               	btfsc	status,2,c
  3351  0082' EF00' F000'        	goto	u6051
  3352  0086' EF00' F000'        	goto	u6050
  3353  008A'                    u6051:
  3354  008A' EF00' F000'        	goto	l5136
  3355  008E'                    u6050:
  3356  008E' C007' FFD9         	movff	strncmp@l,fsr2l
  3357  0092' C008' FFDA         	movff	strncmp@l+1,fsr2h
  3358  0096' 50DF               	movf	indf2,w,c
  3359  0098' 6E00'              	movwf	??_strncmp^0,c
  3360  009A' C009' FFF6         	movff	strncmp@r,tblptrl
  3361  009E' C00A' FFF7         	movff	strncmp@r+1,tblptrh
  3362  00A2'                    	if	0	;tblptru may be non-zero
  3363  00A2'                    	endif
  3364  00A2'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3365  00A2' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3366  00A4' 6EF8               	movwf	tblptru,c
  3367  00A6'                    	endif
  3368  00A6' 0008               	tblrd		*
  3369  00A8' 50F5               	movf	tablat,w,c
  3370  00AA' 1800'              	xorwf	??_strncmp^0,w,c
  3371  00AC' B4D8               	btfsc	status,2,c
  3372  00AE' EF00' F000'        	goto	u6061
  3373  00B2' EF00' F000'        	goto	u6060
  3374  00B6'                    u6061:
  3375  00B6' EF00' F000'        	goto	l5126
  3376  00BA'                    u6060:
  3377  00BA'                    l5136:
  3378  00BA' C007' FFD9         	movff	strncmp@l,fsr2l
  3379  00BE' C008' FFDA         	movff	strncmp@l+1,fsr2h
  3380  00C2' 50DF               	movf	indf2,w,c
  3381  00C4' 6E00'              	movwf	??_strncmp^0,c
  3382  00C6' C009' FFF6         	movff	strncmp@r,tblptrl
  3383  00CA' C00A' FFF7         	movff	strncmp@r+1,tblptrh
  3384  00CE'                    	if	0	;tblptru may be non-zero
  3385  00CE'                    	endif
  3386  00CE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3387  00CE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3388  00D0' 6EF8               	movwf	tblptru,c
  3389  00D2'                    	endif
  3390  00D2' 0008               	tblrd		*
  3391  00D4' 50F5               	movf	tablat,w,c
  3392  00D6' 5C00'              	subwf	??_strncmp^0,w,c
  3393  00D8' 6E00'              	movwf	?_strncmp^0,c
  3394  00DA' 6A00'              	clrf	(?_strncmp+1)^0,c
  3395  00DC' A0D8               	btfss	status,0,c
  3396  00DE' 0600'              	decf	(?_strncmp+1)^0,f,c
  3397  00E0'                    l1610:
  3398  00E0' 0012               	return		;funcret
  3399  00E2'                    __end_of_strncmp:
  3400                           	callstack 0
  3401                           
  3402 ;; *************** function _efgtoa *****************
  3403 ;; Defined at:
  3404 ;;		line 332 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
  3407 ;;		 -> sprintf@f(6), 
  3408 ;;  f               4   61[COMRAM] PTR struct _IO_FILE
  3409 ;;  c               1   65[COMRAM] unsigned char 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  u               4   52[BANK0 ] unsigned char 
  3412 ;;  g               4   44[BANK0 ] unsigned char 
  3413 ;;  l               4   38[BANK0 ] unsigned char 
  3414 ;;  h               4   34[BANK0 ] unsigned char 
  3415 ;;  ou              4   20[BANK0 ] unsigned char 
  3416 ;;  n               2   50[BANK0 ] int 
  3417 ;;  e               2   48[BANK0 ] int 
  3418 ;;  i               2   42[BANK0 ] int 
  3419 ;;  w               2   30[BANK0 ] int 
  3420 ;;  p               2   28[BANK0 ] int 
  3421 ;;  sign            2   26[BANK0 ] int 
  3422 ;;  d               2   24[BANK0 ] int 
  3423 ;;  m               2   18[BANK0 ] int 
  3424 ;;  ne              2   16[BANK0 ] int 
  3425 ;;  pp              2   14[BANK0 ] int 
  3426 ;;  t               2   12[BANK0 ] int 
  3427 ;;  mode            1   33[BANK0 ] unsigned char 
  3428 ;;  nmode           1   32[BANK0 ] unsigned char 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  2   59[COMRAM] int 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3438 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3439 ;;      Locals:         0      56       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3440 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3441 ;;      Totals:        12      56       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3442 ;;Total ram usage:       68 bytes
  3443 ;; Hardware stack levels used: 1
  3444 ;; Hardware stack levels required when called: 4
  3445 ;; This function calls:
  3446 ;;		___awdiv
  3447 ;;		___awmod
  3448 ;;		___fladd
  3449 ;;		___fldiv
  3450 ;;		___fleq
  3451 ;;		___flge
  3452 ;;		___flmul
  3453 ;;		___flneg
  3454 ;;		___flsub
  3455 ;;		___fltol
  3456 ;;		___fpclassifyf
  3457 ;;		_floorf
  3458 ;;		_isupper
  3459 ;;		_pad
  3460 ;;		_strcpy
  3461 ;;		_tolower
  3462 ;; This function is called by:
  3463 ;;		_vfpfcnvrt
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text12
  3468  0000'                    __ptext12:
  3469                           	callstack 0
  3470  0000'                    _efgtoa:
  3471                           	callstack 22
  3472  0000'                    
  3473                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 332: static int e
      +                          fgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.32\pic\sources\
      +                          c99\common\doprnt.c: 333: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\
      +                          doprnt.c: 334:     char mode, nmode;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c9
      +                          9\common\doprnt.c: 335:     int d, e, i, m, n, ne, p, pp, sign, t, w;;C:\Program Files\M
      +                          icrochip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 336:     long double g, h, l, ou, u;
  3474  0000' 0E00               	movlw	0
  3475  0002' 0100               	movlb	0	; () banked
  3476  0004' 6F00'              	movwf	(efgtoa@sign+1)& (0+255),b
  3477  0006' 0E00               	movlw	0
  3478  0008' 6F00'              	movwf	efgtoa@sign& (0+255),b
  3479  000A'                    
  3480                           ; BSR set to: 0
  3481                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 340:     g = f;
  3482  000A' C03D' F02C'        	movff	efgtoa@f,efgtoa@g
  3483  000E' C03E' F02D'        	movff	efgtoa@f+1,efgtoa@g+1
  3484  0012' C03F' F02E'        	movff	efgtoa@f+2,efgtoa@g+2
  3485  0016' C040' F02F'        	movff	efgtoa@f+3,efgtoa@g+3
  3486  001A'                    
  3487                           ; BSR set to: 0
  3488                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 341:     if (g < 
      +                          0.0) {
  3489  001A' BF00'              	btfsc	(efgtoa@g+3)& (0+255),7,b
  3490  001C' EF00' F000'        	goto	u5410
  3491  0020' EF00' F000'        	goto	u5411
  3492  0024'                    u5411:
  3493  0024' EF00' F000'        	goto	l4780
  3494  0028'                    u5410:
  3495  0028'                    
  3496                           ; BSR set to: 0
  3497                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 342:         sign
      +                           = 1;
  3498  0028' 0E00               	movlw	0
  3499  002A' 6F00'              	movwf	(efgtoa@sign+1)& (0+255),b
  3500  002C' 0E01               	movlw	1
  3501  002E' 6F00'              	movwf	efgtoa@sign& (0+255),b
  3502  0030'                    
  3503                           ; BSR set to: 0
  3504                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 343:         g = 
      +                          -g;
  3505  0030' C02C' F000'        	movff	efgtoa@g,___flneg@f1
  3506  0034' C02D' F001'        	movff	efgtoa@g+1,___flneg@f1+1
  3507  0038' C02E' F002'        	movff	efgtoa@g+2,___flneg@f1+2
  3508  003C' C02F' F003'        	movff	efgtoa@g+3,___flneg@f1+3
  3509  0040' EC00' F000'        	call	___flneg	;wreg free
  3510  0044' C000' F02C'        	movff	?___flneg,efgtoa@g
  3511  0048' C001' F02D'        	movff	?___flneg+1,efgtoa@g+1
  3512  004C' C002' F02E'        	movff	?___flneg+2,efgtoa@g+2
  3513  0050' C003' F02F'        	movff	?___flneg+3,efgtoa@g+3
  3514  0054'                    l4780:
  3515                           
  3516                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 347:     n = 0;
  3517  0054' 0E00               	movlw	0
  3518  0056' 0100               	movlb	0	; () banked
  3519  0058' 6F00'              	movwf	(efgtoa@n+1)& (0+255),b
  3520  005A' 0E00               	movlw	0
  3521  005C' 6F00'              	movwf	efgtoa@n& (0+255),b
  3522  005E'                    
  3523                           ; BSR set to: 0
  3524                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 348:     w = widt
      +                          h;
  3525  005E' C002' F01E'        	movff	_width,efgtoa@w
  3526  0062' C003' F01F'        	movff	_width+1,efgtoa@w+1
  3527  0066'                    
  3528                           ; BSR set to: 0
  3529                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 349:     if (sign
      +                           || (flags & (1 << 2))) {
  3530  0066' 5100'              	movf	efgtoa@sign& (0+255),w,b
  3531  0068' 1100'              	iorwf	(efgtoa@sign+1)& (0+255),w,b
  3532  006A' A4D8               	btfss	status,2,c
  3533  006C' EF00' F000'        	goto	u5421
  3534  0070' EF00' F000'        	goto	u5420
  3535  0074'                    u5421:
  3536  0074' EF00' F000'        	goto	l4788
  3537  0078'                    u5420:
  3538  0078'                    
  3539                           ; BSR set to: 0
  3540  0078' A500'              	btfss	_flags& (0+255),2,b
  3541  007A' EF00' F000'        	goto	u5431
  3542  007E' EF00' F000'        	goto	u5430
  3543  0082'                    u5431:
  3544  0082' EF00' F000'        	goto	l4800
  3545  0086'                    u5430:
  3546  0086'                    l4788:
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 350:         dbuf
      +                          [n] = sign ? '-' : '+';
  3550  0086' 5100'              	movf	efgtoa@sign& (0+255),w,b
  3551  0088' 1100'              	iorwf	(efgtoa@sign+1)& (0+255),w,b
  3552  008A' A4D8               	btfss	status,2,c
  3553  008C' EF00' F000'        	goto	u5441
  3554  0090' EF00' F000'        	goto	u5440
  3555  0094'                    u5441:
  3556  0094' EF00' F000'        	goto	l4792
  3557  0098'                    u5440:
  3558  0098'                    
  3559                           ; BSR set to: 0
  3560  0098' 0E00               	movlw	0
  3561  009A' 6F00'              	movwf	(_efgtoa$2742+1)& (0+255),b
  3562  009C' 0E2B               	movlw	43
  3563  009E' 6F00'              	movwf	_efgtoa$2742& (0+255),b
  3564  00A0' EF00' F000'        	goto	l4794
  3565  00A4'                    l4792:
  3566                           
  3567                           ; BSR set to: 0
  3568  00A4' 0E00               	movlw	0
  3569  00A6' 6F00'              	movwf	(_efgtoa$2742+1)& (0+255),b
  3570  00A8' 0E2D               	movlw	45
  3571  00AA' 6F00'              	movwf	_efgtoa$2742& (0+255),b
  3572  00AC'                    l4794:
  3573                           
  3574                           ; BSR set to: 0
  3575  00AC' C000' F01E'        	movff	_efgtoa$2742,_dbuf
  3576  00B0'                    
  3577                           ; BSR set to: 0
  3578                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 351:         ++n;
  3579  00B0' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  3580  00B2' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  3581  00B4'                    
  3582                           ; BSR set to: 0
  3583                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 352:         --w;
  3584  00B4' 0700'              	decf	efgtoa@w& (0+255),f,b
  3585  00B6' A0D8               	btfss	status,0,c
  3586  00B8' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  3587  00BA'                    l4800:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 357:         if (
      +                          (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  3591  00BA' C02C' F000'        	movff	efgtoa@g,___fpclassifyf@x
  3592  00BE' C02D' F001'        	movff	efgtoa@g+1,___fpclassifyf@x+1
  3593  00C2' C02E' F002'        	movff	efgtoa@g+2,___fpclassifyf@x+2
  3594  00C6' C02F' F003'        	movff	efgtoa@g+3,___fpclassifyf@x+3
  3595  00CA' EC00' F000'        	call	___fpclassifyf	;wreg free
  3596  00CE' 0400'              	decf	?___fpclassifyf^0,w,c
  3597  00D0' 1000'              	iorwf	(?___fpclassifyf+1)^0,w,c
  3598  00D2' A4D8               	btfss	status,2,c
  3599  00D4' EF00' F000'        	goto	u5451
  3600  00D8' EF00' F000'        	goto	u5450
  3601  00DC'                    u5451:
  3602  00DC' EF00' F000'        	goto	l4818
  3603  00E0'                    u5450:
  3604  00E0' 0EBF               	movlw	191
  3605  00E2' 6E00'              	movwf	??_efgtoa^0,c
  3606  00E4' 0EFF               	movlw	255
  3607  00E6' 6E00'              	movwf	(??_efgtoa+1)^0,c
  3608  00E8' 5000'              	movf	efgtoa@c^0,w,c
  3609  00EA' 6E00'              	movwf	(??_efgtoa+2)^0,c
  3610  00EC' 6A00'              	clrf	(??_efgtoa+3)^0,c
  3611  00EE' 5000'              	movf	??_efgtoa^0,w,c
  3612  00F0' 2600'              	addwf	(??_efgtoa+2)^0,f,c
  3613  00F2' 5000'              	movf	(??_efgtoa+1)^0,w,c
  3614  00F4' 2200'              	addwfc	(??_efgtoa+3)^0,f,c
  3615  00F6' 5000'              	movf	(??_efgtoa+3)^0,w,c
  3616  00F8' E10A               	bnz	u5460
  3617  00FA' 0E1A               	movlw	26
  3618  00FC' 5C00'              	subwf	(??_efgtoa+2)^0,w,c
  3619  00FE' A0D8               	btfss	status,0,c
  3620  0100' EF00' F000'        	goto	u5461
  3621  0104' EF00' F000'        	goto	u5460
  3622  0108'                    u5461:
  3623  0108' 0E01               	movlw	1
  3624  010A' EF00' F000'        	goto	u5470
  3625  010E'                    u5460:
  3626  010E' 0E00               	movlw	0
  3627  0110'                    u5470:
  3628  0110' 0100               	movlb	0	; () banked
  3629  0112' 6F00'              	movwf	_efgtoa$2743& (0+255),b
  3630  0114' 6B00'              	clrf	(_efgtoa$2743+1)& (0+255),b
  3631  0116'                    
  3632                           ; BSR set to: 0
  3633  0116' 5100'              	movf	_efgtoa$2743& (0+255),w,b
  3634  0118' 1100'              	iorwf	(_efgtoa$2743+1)& (0+255),w,b
  3635  011A' B4D8               	btfsc	status,2,c
  3636  011C' EF00' F000'        	goto	u5481
  3637  0120' EF00' F000'        	goto	u5480
  3638  0124'                    u5481:
  3639  0124' EF00' F000'        	goto	l4810
  3640  0128'                    u5480:
  3641  0128'                    
  3642                           ; BSR set to: 0
  3643                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 358:             
      +                          strcpy(&dbuf[n], "INF");
  3644  0128' 0E00'              	movlw	low _dbuf
  3645  012A' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3646  012C' 6E00'              	movwf	strcpy@dest^0,c
  3647  012E' 0E00'              	movlw	high _dbuf
  3648  0130' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3649  0132' 6E00'              	movwf	(strcpy@dest+1)^0,c
  3650  0134' 0E00'              	movlw	low STR_2
  3651  0136' 6E00'              	movwf	strcpy@src^0,c
  3652  0138' 0E00'              	movlw	high STR_2
  3653  013A' 6E00'              	movwf	(strcpy@src+1)^0,c
  3654  013C' EC00' F000'        	call	_strcpy	;wreg free
  3655                           
  3656                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 359:         } el
      +                          se {
  3657  0140' EF00' F000'        	goto	l4812
  3658  0144'                    l4810:
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 360:             
      +                          strcpy(&dbuf[n], "inf");
  3662  0144' 0E00'              	movlw	low _dbuf
  3663  0146' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3664  0148' 6E00'              	movwf	strcpy@dest^0,c
  3665  014A' 0E00'              	movlw	high _dbuf
  3666  014C' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3667  014E' 6E00'              	movwf	(strcpy@dest+1)^0,c
  3668  0150' 0E00'              	movlw	low STR_3
  3669  0152' 6E00'              	movwf	strcpy@src^0,c
  3670  0154' 0E00'              	movlw	high STR_3
  3671  0156' 6E00'              	movwf	(strcpy@src+1)^0,c
  3672  0158' EC00' F000'        	call	_strcpy	;wreg free
  3673  015C'                    l4812:
  3674                           
  3675                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 362:         w -=
      +                           ((sizeof("inf")/sizeof("inf"[0]))-1);
  3676  015C' 0100               	movlb	0	; () banked
  3677  015E' 0EFD               	movlw	253
  3678  0160' 2700'              	addwf	efgtoa@w& (0+255),f,b
  3679  0162' 0EFF               	movlw	255
  3680  0164' 2300'              	addwfc	(efgtoa@w+1)& (0+255),f,b
  3681  0166'                    l4814:
  3682                           
  3683                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 363:         retu
      +                          rn pad(fp, &dbuf[0], w);
  3684  0166' C03B' F010'        	movff	efgtoa@fp,pad@fp
  3685  016A' C03C' F011'        	movff	efgtoa@fp+1,pad@fp+1
  3686  016E' 0E00'              	movlw	low _dbuf
  3687  0170' 6E00'              	movwf	pad@buf^0,c
  3688  0172' 0E00'              	movlw	high _dbuf
  3689  0174' 6E00'              	movwf	(pad@buf+1)^0,c
  3690  0176' C01E' F014'        	movff	efgtoa@w,pad@p
  3691  017A' C01F' F015'        	movff	efgtoa@w+1,pad@p+1
  3692  017E' EC00' F000'        	call	_pad	;wreg free
  3693  0182' C010' F03B'        	movff	?_pad,?_efgtoa
  3694  0186' C011' F03C'        	movff	?_pad+1,?_efgtoa+1
  3695  018A' EF00' F000'        	goto	l1380
  3696  018E'                    l4818:
  3697                           
  3698                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 366:         if (
      +                          (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  3699  018E' C02C' F000'        	movff	efgtoa@g,___fpclassifyf@x
  3700  0192' C02D' F001'        	movff	efgtoa@g+1,___fpclassifyf@x+1
  3701  0196' C02E' F002'        	movff	efgtoa@g+2,___fpclassifyf@x+2
  3702  019A' C02F' F003'        	movff	efgtoa@g+3,___fpclassifyf@x+3
  3703  019E' EC00' F000'        	call	___fpclassifyf	;wreg free
  3704  01A2' 5000'              	movf	?___fpclassifyf^0,w,c
  3705  01A4' 1000'              	iorwf	(?___fpclassifyf+1)^0,w,c
  3706  01A6' A4D8               	btfss	status,2,c
  3707  01A8' EF00' F000'        	goto	u5491
  3708  01AC' EF00' F000'        	goto	u5490
  3709  01B0'                    u5491:
  3710  01B0' EF00' F000'        	goto	l4836
  3711  01B4'                    u5490:
  3712  01B4' 0EBF               	movlw	191
  3713  01B6' 6E00'              	movwf	??_efgtoa^0,c
  3714  01B8' 0EFF               	movlw	255
  3715  01BA' 6E00'              	movwf	(??_efgtoa+1)^0,c
  3716  01BC' 5000'              	movf	efgtoa@c^0,w,c
  3717  01BE' 6E00'              	movwf	(??_efgtoa+2)^0,c
  3718  01C0' 6A00'              	clrf	(??_efgtoa+3)^0,c
  3719  01C2' 5000'              	movf	??_efgtoa^0,w,c
  3720  01C4' 2600'              	addwf	(??_efgtoa+2)^0,f,c
  3721  01C6' 5000'              	movf	(??_efgtoa+1)^0,w,c
  3722  01C8' 2200'              	addwfc	(??_efgtoa+3)^0,f,c
  3723  01CA' 5000'              	movf	(??_efgtoa+3)^0,w,c
  3724  01CC' E10A               	bnz	u5500
  3725  01CE' 0E1A               	movlw	26
  3726  01D0' 5C00'              	subwf	(??_efgtoa+2)^0,w,c
  3727  01D2' A0D8               	btfss	status,0,c
  3728  01D4' EF00' F000'        	goto	u5501
  3729  01D8' EF00' F000'        	goto	u5500
  3730  01DC'                    u5501:
  3731  01DC' 0E01               	movlw	1
  3732  01DE' EF00' F000'        	goto	u5510
  3733  01E2'                    u5500:
  3734  01E2' 0E00               	movlw	0
  3735  01E4'                    u5510:
  3736  01E4' 0100               	movlb	0	; () banked
  3737  01E6' 6F00'              	movwf	_efgtoa$2747& (0+255),b
  3738  01E8' 6B00'              	clrf	(_efgtoa$2747+1)& (0+255),b
  3739  01EA'                    
  3740                           ; BSR set to: 0
  3741  01EA' 5100'              	movf	_efgtoa$2747& (0+255),w,b
  3742  01EC' 1100'              	iorwf	(_efgtoa$2747+1)& (0+255),w,b
  3743  01EE' B4D8               	btfsc	status,2,c
  3744  01F0' EF00' F000'        	goto	u5521
  3745  01F4' EF00' F000'        	goto	u5520
  3746  01F8'                    u5521:
  3747  01F8' EF00' F000'        	goto	l4828
  3748  01FC'                    u5520:
  3749  01FC'                    
  3750                           ; BSR set to: 0
  3751                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 367:             
      +                          strcpy(&dbuf[n], "NAN");
  3752  01FC' 0E00'              	movlw	low _dbuf
  3753  01FE' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3754  0200' 6E00'              	movwf	strcpy@dest^0,c
  3755  0202' 0E00'              	movlw	high _dbuf
  3756  0204' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3757  0206' 6E00'              	movwf	(strcpy@dest+1)^0,c
  3758  0208' 0E00'              	movlw	low STR_6
  3759  020A' 6E00'              	movwf	strcpy@src^0,c
  3760  020C' 0E00'              	movlw	high STR_6
  3761  020E' 6E00'              	movwf	(strcpy@src+1)^0,c
  3762  0210' EC00' F000'        	call	_strcpy	;wreg free
  3763                           
  3764                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 368:         } el
      +                          se {
  3765  0214' EF00' F000'        	goto	l4812
  3766  0218'                    l4828:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 369:             
      +                          strcpy(&dbuf[n], "nan");
  3770  0218' 0E00'              	movlw	low _dbuf
  3771  021A' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3772  021C' 6E00'              	movwf	strcpy@dest^0,c
  3773  021E' 0E00'              	movlw	high _dbuf
  3774  0220' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3775  0222' 6E00'              	movwf	(strcpy@dest+1)^0,c
  3776  0224' 0E00'              	movlw	low STR_7
  3777  0226' 6E00'              	movwf	strcpy@src^0,c
  3778  0228' 0E00'              	movlw	high STR_7
  3779  022A' 6E00'              	movwf	(strcpy@src+1)^0,c
  3780  022C' EC00' F000'        	call	_strcpy	;wreg free
  3781  0230' EF00' F000'        	goto	l4812
  3782  0234'                    l4836:
  3783                           
  3784                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 376:     u = 1.0;
  3785  0234' 0E00               	movlw	0
  3786  0236' 0100               	movlb	0	; () banked
  3787  0238' 6F00'              	movwf	efgtoa@u& (0+255),b
  3788  023A' 0E00               	movlw	0
  3789  023C' 6F00'              	movwf	(efgtoa@u+1)& (0+255),b
  3790  023E' 0E80               	movlw	128
  3791  0240' 6F00'              	movwf	(efgtoa@u+2)& (0+255),b
  3792  0242' 0E3F               	movlw	63
  3793  0244' 6F00'              	movwf	(efgtoa@u+3)& (0+255),b
  3794                           
  3795                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 377:     e = 0;
  3796  0246' 0E00               	movlw	0
  3797  0248' 6F00'              	movwf	(efgtoa@e+1)& (0+255),b
  3798  024A' 0E00               	movlw	0
  3799  024C' 6F00'              	movwf	efgtoa@e& (0+255),b
  3800  024E'                    
  3801                           ; BSR set to: 0
  3802                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 378:     if (!(g 
      +                          == 0.0)) {
  3803  024E' C02C' F000'        	movff	efgtoa@g,___fleq@ff1
  3804  0252' C02D' F001'        	movff	efgtoa@g+1,___fleq@ff1+1
  3805  0256' C02E' F002'        	movff	efgtoa@g+2,___fleq@ff1+2
  3806  025A' C02F' F003'        	movff	efgtoa@g+3,___fleq@ff1+3
  3807  025E' 0E00               	movlw	0
  3808  0260' 6E00'              	movwf	___fleq@ff2^0,c
  3809  0262' 0E00               	movlw	0
  3810  0264' 6E00'              	movwf	(___fleq@ff2+1)^0,c
  3811  0266' 0E00               	movlw	0
  3812  0268' 6E00'              	movwf	(___fleq@ff2+2)^0,c
  3813  026A' 0E00               	movlw	0
  3814  026C' 6E00'              	movwf	(___fleq@ff2+3)^0,c
  3815  026E' EC00' F000'        	call	___fleq	;wreg free
  3816  0272' B0D8               	btfsc	status,0,c
  3817  0274' EF00' F000'        	goto	u5531
  3818  0278' EF00' F000'        	goto	u5530
  3819  027C'                    u5531:
  3820  027C' EF00' F000'        	goto	l4854
  3821  0280'                    u5530:
  3822  0280' EF00' F000'        	goto	l4846
  3823  0284'                    l4842:
  3824                           
  3825                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 380:             
      +                          u = u*10.0;
  3826  0284' C034' F000'        	movff	efgtoa@u,___flmul@b
  3827  0288' C035' F001'        	movff	efgtoa@u+1,___flmul@b+1
  3828  028C' C036' F002'        	movff	efgtoa@u+2,___flmul@b+2
  3829  0290' C037' F003'        	movff	efgtoa@u+3,___flmul@b+3
  3830  0294' 0E00               	movlw	0
  3831  0296' 6E00'              	movwf	___flmul@a^0,c
  3832  0298' 0E00               	movlw	0
  3833  029A' 6E00'              	movwf	(___flmul@a+1)^0,c
  3834  029C' 0E20               	movlw	32
  3835  029E' 6E00'              	movwf	(___flmul@a+2)^0,c
  3836  02A0' 0E41               	movlw	65
  3837  02A2' 6E00'              	movwf	(___flmul@a+3)^0,c
  3838  02A4' EC00' F000'        	call	___flmul	;wreg free
  3839  02A8' C000' F034'        	movff	?___flmul,efgtoa@u
  3840  02AC' C001' F035'        	movff	?___flmul+1,efgtoa@u+1
  3841  02B0' C002' F036'        	movff	?___flmul+2,efgtoa@u+2
  3842  02B4' C003' F037'        	movff	?___flmul+3,efgtoa@u+3
  3843  02B8'                    
  3844                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 381:             
      +                          ++e;
  3845  02B8' 0100               	movlb	0	; () banked
  3846  02BA' 4B00'              	infsnz	efgtoa@e& (0+255),f,b
  3847  02BC' 2B00'              	incf	(efgtoa@e+1)& (0+255),f,b
  3848  02BE'                    l4846:
  3849                           
  3850                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 379:         whil
      +                          e (!(g < (u*10.0))) {
  3851  02BE' C02C' F019'        	movff	efgtoa@g,___flge@ff1
  3852  02C2' C02D' F01A'        	movff	efgtoa@g+1,___flge@ff1+1
  3853  02C6' C02E' F01B'        	movff	efgtoa@g+2,___flge@ff1+2
  3854  02CA' C02F' F01C'        	movff	efgtoa@g+3,___flge@ff1+3
  3855  02CE' 0E00               	movlw	0
  3856  02D0' 6E00'              	movwf	___flmul@a^0,c
  3857  02D2' 0E00               	movlw	0
  3858  02D4' 6E00'              	movwf	(___flmul@a+1)^0,c
  3859  02D6' 0E20               	movlw	32
  3860  02D8' 6E00'              	movwf	(___flmul@a+2)^0,c
  3861  02DA' 0E41               	movlw	65
  3862  02DC' 6E00'              	movwf	(___flmul@a+3)^0,c
  3863  02DE' C034' F000'        	movff	efgtoa@u,___flmul@b
  3864  02E2' C035' F001'        	movff	efgtoa@u+1,___flmul@b+1
  3865  02E6' C036' F002'        	movff	efgtoa@u+2,___flmul@b+2
  3866  02EA' C037' F003'        	movff	efgtoa@u+3,___flmul@b+3
  3867  02EE' EC00' F000'        	call	___flmul	;wreg free
  3868  02F2' C000' F01D'        	movff	?___flmul,___flge@ff2
  3869  02F6' C001' F01E'        	movff	?___flmul+1,___flge@ff2+1
  3870  02FA' C002' F01F'        	movff	?___flmul+2,___flge@ff2+2
  3871  02FE' C003' F020'        	movff	?___flmul+3,___flge@ff2+3
  3872  0302' EC00' F000'        	call	___flge	;wreg free
  3873  0306' B0D8               	btfsc	status,0,c
  3874  0308' EF00' F000'        	goto	u5541
  3875  030C' EF00' F000'        	goto	u5540
  3876  0310'                    u5541:
  3877  0310' EF00' F000'        	goto	l4842
  3878  0314'                    u5540:
  3879  0314' EF00' F000'        	goto	l4852
  3880  0318'                    l4848:
  3881                           
  3882                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 384:             
      +                          u = u/10.0;
  3883  0318' C034' F00E'        	movff	efgtoa@u,___fldiv@b
  3884  031C' C035' F00F'        	movff	efgtoa@u+1,___fldiv@b+1
  3885  0320' C036' F010'        	movff	efgtoa@u+2,___fldiv@b+2
  3886  0324' C037' F011'        	movff	efgtoa@u+3,___fldiv@b+3
  3887  0328' 0E00               	movlw	0
  3888  032A' 6E00'              	movwf	___fldiv@a^0,c
  3889  032C' 0E00               	movlw	0
  3890  032E' 6E00'              	movwf	(___fldiv@a+1)^0,c
  3891  0330' 0E20               	movlw	32
  3892  0332' 6E00'              	movwf	(___fldiv@a+2)^0,c
  3893  0334' 0E41               	movlw	65
  3894  0336' 6E00'              	movwf	(___fldiv@a+3)^0,c
  3895  0338' EC00' F000'        	call	___fldiv	;wreg free
  3896  033C' C00E' F034'        	movff	?___fldiv,efgtoa@u
  3897  0340' C00F' F035'        	movff	?___fldiv+1,efgtoa@u+1
  3898  0344' C010' F036'        	movff	?___fldiv+2,efgtoa@u+2
  3899  0348' C011' F037'        	movff	?___fldiv+3,efgtoa@u+3
  3900  034C'                    
  3901                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 385:             
      +                          --e;
  3902  034C' 0100               	movlb	0	; () banked
  3903  034E' 0700'              	decf	efgtoa@e& (0+255),f,b
  3904  0350' A0D8               	btfss	status,0,c
  3905  0352' 0700'              	decf	(efgtoa@e+1)& (0+255),f,b
  3906  0354'                    l4852:
  3907                           
  3908                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 383:         whil
      +                          e (g < u) {
  3909  0354' C02C' F019'        	movff	efgtoa@g,___flge@ff1
  3910  0358' C02D' F01A'        	movff	efgtoa@g+1,___flge@ff1+1
  3911  035C' C02E' F01B'        	movff	efgtoa@g+2,___flge@ff1+2
  3912  0360' C02F' F01C'        	movff	efgtoa@g+3,___flge@ff1+3
  3913  0364' C034' F01D'        	movff	efgtoa@u,___flge@ff2
  3914  0368' C035' F01E'        	movff	efgtoa@u+1,___flge@ff2+1
  3915  036C' C036' F01F'        	movff	efgtoa@u+2,___flge@ff2+2
  3916  0370' C037' F020'        	movff	efgtoa@u+3,___flge@ff2+3
  3917  0374' EC00' F000'        	call	___flge	;wreg free
  3918  0378' A0D8               	btfss	status,0,c
  3919  037A' EF00' F000'        	goto	u5551
  3920  037E' EF00' F000'        	goto	u5550
  3921  0382'                    u5551:
  3922  0382' EF00' F000'        	goto	l4848
  3923  0386'                    u5550:
  3924  0386'                    l4854:
  3925                           
  3926                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 390:     mode = (
      +                          char)tolower((int)c);
  3927  0386' C041' F006'        	movff	efgtoa@c,tolower@c
  3928  038A' 6A00'              	clrf	(tolower@c+1)^0,c
  3929  038C' EC00' F000'        	call	_tolower	;wreg free
  3930  0390' 5000'              	movf	?_tolower^0,w,c
  3931  0392' 0100               	movlb	0	; () banked
  3932  0394' 6F00'              	movwf	efgtoa@mode& (0+255),b
  3933  0396'                    
  3934                           ; BSR set to: 0
  3935                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 391:     nmode = 
      +                          mode;
  3936  0396' C021' F020'        	movff	efgtoa@mode,efgtoa@nmode
  3937  039A'                    
  3938                           ; BSR set to: 0
  3939                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 392:     if (mode
      +                           == 'g') {
  3940  039A' 0E67               	movlw	103
  3941  039C' 1900'              	xorwf	efgtoa@mode& (0+255),w,b
  3942  039E' A4D8               	btfss	status,2,c
  3943  03A0' EF00' F000'        	goto	u5561
  3944  03A4' EF00' F000'        	goto	u5560
  3945  03A8'                    u5561:
  3946  03A8' EF00' F000'        	goto	l4868
  3947  03AC'                    u5560:
  3948  03AC'                    
  3949                           ; BSR set to: 0
  3950                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 393:   if (prec =
      +                          = 0) {
  3951  03AC' 5100'              	movf	_prec& (0+255),w,b
  3952  03AE' 1100'              	iorwf	(_prec+1)& (0+255),w,b
  3953  03B0' A4D8               	btfss	status,2,c
  3954  03B2' EF00' F000'        	goto	u5571
  3955  03B6' EF00' F000'        	goto	u5570
  3956  03BA'                    u5571:
  3957  03BA' EF00' F000'        	goto	l4864
  3958  03BE'                    u5570:
  3959  03BE'                    
  3960                           ; BSR set to: 0
  3961                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 394:    prec = 1;
  3962  03BE' 0E00               	movlw	0
  3963  03C0' 6F00'              	movwf	(_prec+1)& (0+255),b
  3964  03C2' 0E01               	movlw	1
  3965  03C4' 6F00'              	movwf	_prec& (0+255),b
  3966  03C6'                    l4864:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 396:         p = 
      +                          (0 < prec) ? prec : 6;
  3970  03C6' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  3971  03C8' EF00' F000'        	goto	u5580
  3972  03CC' 5100'              	movf	(_prec+1)& (0+255),w,b
  3973  03CE' E106               	bnz	u5581
  3974  03D0' 0500'              	decf	_prec& (0+255),w,b
  3975  03D2' B0D8               	btfsc	status,0,c
  3976  03D4' EF00' F000'        	goto	u5581
  3977  03D8' EF00' F000'        	goto	u5580
  3978  03DC'                    u5581:
  3979  03DC' EF00' F000'        	goto	l1398
  3980  03E0'                    u5580:
  3981  03E0'                    l4866:
  3982                           
  3983                           ; BSR set to: 0
  3984  03E0' 0E00               	movlw	0
  3985  03E2' 6F00'              	movwf	(efgtoa@p+1)& (0+255),b
  3986  03E4' 0E06               	movlw	6
  3987  03E6' 6F00'              	movwf	efgtoa@p& (0+255),b
  3988  03E8' EF00' F000'        	goto	l4874
  3989  03EC'                    l1398:
  3990                           
  3991                           ; BSR set to: 0
  3992  03EC' C004' F01C'        	movff	_prec,efgtoa@p
  3993  03F0' C005' F01D'        	movff	_prec+1,efgtoa@p+1
  3994  03F4' EF00' F000'        	goto	l4874
  3995  03F8'                    l4868:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 398:         p = 
      +                          (prec < 0) ? 6 : prec;
  3999  03F8' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  4000  03FA' EF00' F000'        	goto	u5591
  4001  03FE' EF00' F000'        	goto	u5590
  4002  0402'                    u5591:
  4003  0402' EF00' F000'        	goto	l4866
  4004  0406'                    u5590:
  4005  0406' EF00' F000'        	goto	l1398
  4006  040A'                    l4874:
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 402:     if (mode
      +                           == 'g') {
  4010  040A' 0E67               	movlw	103
  4011  040C' 1900'              	xorwf	efgtoa@mode& (0+255),w,b
  4012  040E' A4D8               	btfss	status,2,c
  4013  0410' EF00' F000'        	goto	u5601
  4014  0414' EF00' F000'        	goto	u5600
  4015  0418'                    u5601:
  4016  0418' EF00' F000'        	goto	l4884
  4017  041C'                    u5600:
  4018  041C'                    
  4019                           ; BSR set to: 0
  4020                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 403:         if (
      +                          !(e < -4) && !((p - 1) < e)) {
  4021  041C' AF00'              	btfss	(efgtoa@e+1)& (0+255),7,b
  4022  041E' EF00' F000'        	goto	u5610
  4023  0422' 0EFC               	movlw	252
  4024  0424' 5D00'              	subwf	efgtoa@e& (0+255),w,b
  4025  0426' 0EFF               	movlw	255
  4026  0428' 5900'              	subwfb	(efgtoa@e+1)& (0+255),w,b
  4027  042A' A0D8               	btfss	status,0,c
  4028  042C' EF00' F000'        	goto	u5611
  4029  0430' EF00' F000'        	goto	u5610
  4030  0434'                    u5611:
  4031  0434' EF00' F000'        	goto	l4882
  4032  0438'                    u5610:
  4033  0438'                    
  4034                           ; BSR set to: 0
  4035  0438' 0EFF               	movlw	255
  4036  043A' 6E00'              	movwf	??_efgtoa^0,c
  4037  043C' 0EFF               	movlw	255
  4038  043E' 6E00'              	movwf	(??_efgtoa+1)^0,c
  4039  0440' C01C' F044'        	movff	efgtoa@p,??_efgtoa+2
  4040  0444' C01D' F045'        	movff	efgtoa@p+1,??_efgtoa+3
  4041  0448' 5000'              	movf	??_efgtoa^0,w,c
  4042  044A' 2600'              	addwf	(??_efgtoa+2)^0,f,c
  4043  044C' 5000'              	movf	(??_efgtoa+1)^0,w,c
  4044  044E' 2200'              	addwfc	(??_efgtoa+3)^0,f,c
  4045  0450' 5100'              	movf	efgtoa@e& (0+255),w,b
  4046  0452' 5C00'              	subwf	(??_efgtoa+2)^0,w,c
  4047  0454' 5000'              	movf	(??_efgtoa+3)^0,w,c
  4048  0456' 0A80               	xorlw	128
  4049  0458' 6E00'              	movwf	(??_efgtoa+4)^0,c
  4050  045A' 5100'              	movf	(efgtoa@e+1)& (0+255),w,b
  4051  045C' 0A80               	xorlw	128
  4052  045E' 5800'              	subwfb	(??_efgtoa+4)^0,w,c
  4053  0460' A0D8               	btfss	status,0,c
  4054  0462' EF00' F000'        	goto	u5621
  4055  0466' EF00' F000'        	goto	u5620
  4056  046A'                    u5621:
  4057  046A' EF00' F000'        	goto	l4882
  4058  046E'                    u5620:
  4059  046E'                    
  4060                           ; BSR set to: 0
  4061                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 404:             
      +                          nmode = 'f';
  4062  046E' 0E66               	movlw	102
  4063  0470' 6F00'              	movwf	efgtoa@nmode& (0+255),b
  4064                           
  4065                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 405:         } el
      +                          se {
  4066  0472' EF00' F000'        	goto	l4884
  4067  0476'                    l4882:
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 406:             
      +                          nmode = 'e';
  4071  0476' 0E65               	movlw	101
  4072  0478' 6F00'              	movwf	efgtoa@nmode& (0+255),b
  4073  047A'                    l4884:
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 411:     m = p;
  4077  047A' C01C' F012'        	movff	efgtoa@p,efgtoa@m
  4078  047E' C01D' F013'        	movff	efgtoa@p+1,efgtoa@m+1
  4079  0482'                    
  4080                           ; BSR set to: 0
  4081                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 412:     if (!(mo
      +                          de == 'g') || ((nmode == 'f') && (e < 0))) {
  4082  0482' 0E67               	movlw	103
  4083  0484' 1900'              	xorwf	efgtoa@mode& (0+255),w,b
  4084  0486' A4D8               	btfss	status,2,c
  4085  0488' EF00' F000'        	goto	u5631
  4086  048C' EF00' F000'        	goto	u5630
  4087  0490'                    u5631:
  4088  0490' EF00' F000'        	goto	l4892
  4089  0494'                    u5630:
  4090  0494'                    
  4091                           ; BSR set to: 0
  4092  0494' 0E66               	movlw	102
  4093  0496' 1900'              	xorwf	efgtoa@nmode& (0+255),w,b
  4094  0498' A4D8               	btfss	status,2,c
  4095  049A' EF00' F000'        	goto	u5641
  4096  049E' EF00' F000'        	goto	u5640
  4097  04A2'                    u5641:
  4098  04A2' EF00' F000'        	goto	l4894
  4099  04A6'                    u5640:
  4100  04A6'                    
  4101                           ; BSR set to: 0
  4102  04A6' BF00'              	btfsc	(efgtoa@e+1)& (0+255),7,b
  4103  04A8' EF00' F000'        	goto	u5650
  4104  04AC' EF00' F000'        	goto	u5651
  4105  04B0'                    u5651:
  4106  04B0' EF00' F000'        	goto	l4894
  4107  04B4'                    u5650:
  4108  04B4'                    l4892:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 413:         ++m;
  4112  04B4' 4B00'              	infsnz	efgtoa@m& (0+255),f,b
  4113  04B6' 2B00'              	incf	(efgtoa@m+1)& (0+255),f,b
  4114  04B8'                    l4894:
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 417:     if (nmod
      +                          e == 'f') {
  4118  04B8' 0E66               	movlw	102
  4119  04BA' 1900'              	xorwf	efgtoa@nmode& (0+255),w,b
  4120  04BC' A4D8               	btfss	status,2,c
  4121  04BE' EF00' F000'        	goto	u5661
  4122  04C2' EF00' F000'        	goto	u5660
  4123  04C6'                    u5661:
  4124  04C6' EF00' F000'        	goto	l4904
  4125  04CA'                    u5660:
  4126  04CA'                    
  4127                           ; BSR set to: 0
  4128                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 418:         if (
      +                          e < 0) {
  4129  04CA' BF00'              	btfsc	(efgtoa@e+1)& (0+255),7,b
  4130  04CC' EF00' F000'        	goto	u5670
  4131  04D0' EF00' F000'        	goto	u5671
  4132  04D4'                    u5671:
  4133  04D4' EF00' F000'        	goto	l4900
  4134  04D8'                    u5670:
  4135  04D8'                    
  4136                           ; BSR set to: 0
  4137                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 419:             
      +                          u = 1.0;
  4138  04D8' 0E00               	movlw	0
  4139  04DA' 6F00'              	movwf	efgtoa@u& (0+255),b
  4140  04DC' 0E00               	movlw	0
  4141  04DE' 6F00'              	movwf	(efgtoa@u+1)& (0+255),b
  4142  04E0' 0E80               	movlw	128
  4143  04E2' 6F00'              	movwf	(efgtoa@u+2)& (0+255),b
  4144  04E4' 0E3F               	movlw	63
  4145  04E6' 6F00'              	movwf	(efgtoa@u+3)& (0+255),b
  4146                           
  4147                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 420:             
      +                          e = 0;
  4148  04E8' 0E00               	movlw	0
  4149  04EA' 6F00'              	movwf	(efgtoa@e+1)& (0+255),b
  4150  04EC' 0E00               	movlw	0
  4151  04EE' 6F00'              	movwf	efgtoa@e& (0+255),b
  4152  04F0'                    l4900:
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 422:         if (
      +                          !(mode == 'g')) {
  4156  04F0' 0E67               	movlw	103
  4157  04F2' 1900'              	xorwf	efgtoa@mode& (0+255),w,b
  4158  04F4' B4D8               	btfsc	status,2,c
  4159  04F6' EF00' F000'        	goto	u5681
  4160  04FA' EF00' F000'        	goto	u5680
  4161  04FE'                    u5681:
  4162  04FE' EF00' F000'        	goto	l4904
  4163  0502'                    u5680:
  4164  0502'                    
  4165                           ; BSR set to: 0
  4166                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 423:             
      +                          m += e;
  4167  0502' 5100'              	movf	efgtoa@e& (0+255),w,b
  4168  0504' 2700'              	addwf	efgtoa@m& (0+255),f,b
  4169  0506' 5100'              	movf	(efgtoa@e+1)& (0+255),w,b
  4170  0508' 2300'              	addwfc	(efgtoa@m+1)& (0+255),f,b
  4171  050A'                    l4904:
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 428:     i = 0;
  4175  050A' 0E00               	movlw	0
  4176  050C' 6F00'              	movwf	(efgtoa@i+1)& (0+255),b
  4177  050E' 0E00               	movlw	0
  4178  0510' 6F00'              	movwf	efgtoa@i& (0+255),b
  4179  0512'                    
  4180                           ; BSR set to: 0
  4181                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 429:     h = g;
  4182  0512' C02C' F022'        	movff	efgtoa@g,efgtoa@h
  4183  0516' C02D' F023'        	movff	efgtoa@g+1,efgtoa@h+1
  4184  051A' C02E' F024'        	movff	efgtoa@g+2,efgtoa@h+2
  4185  051E' C02F' F025'        	movff	efgtoa@g+3,efgtoa@h+3
  4186  0522'                    
  4187                           ; BSR set to: 0
  4188                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 430:     ou = u;
  4189  0522' C034' F014'        	movff	efgtoa@u,efgtoa@ou
  4190  0526' C035' F015'        	movff	efgtoa@u+1,efgtoa@ou+1
  4191  052A' C036' F016'        	movff	efgtoa@u+2,efgtoa@ou+2
  4192  052E' C037' F017'        	movff	efgtoa@u+3,efgtoa@ou+3
  4193                           
  4194                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  4195  0532' EF00' F000'        	goto	l4918
  4196  0536'                    l4910:
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 432:         l = 
      +                          floorf(h/u);
  4200  0536' C022' F00E'        	movff	efgtoa@h,___fldiv@b
  4201  053A' C023' F00F'        	movff	efgtoa@h+1,___fldiv@b+1
  4202  053E' C024' F010'        	movff	efgtoa@h+2,___fldiv@b+2
  4203  0542' C025' F011'        	movff	efgtoa@h+3,___fldiv@b+3
  4204  0546' C034' F012'        	movff	efgtoa@u,___fldiv@a
  4205  054A' C035' F013'        	movff	efgtoa@u+1,___fldiv@a+1
  4206  054E' C036' F014'        	movff	efgtoa@u+2,___fldiv@a+2
  4207  0552' C037' F015'        	movff	efgtoa@u+3,___fldiv@a+3
  4208  0556' EC00' F000'        	call	___fldiv	;wreg free
  4209  055A' C00E' F027'        	movff	?___fldiv,floorf@x
  4210  055E' C00F' F028'        	movff	?___fldiv+1,floorf@x+1
  4211  0562' C010' F029'        	movff	?___fldiv+2,floorf@x+2
  4212  0566' C011' F02A'        	movff	?___fldiv+3,floorf@x+3
  4213  056A' EC00' F000'        	call	_floorf	;wreg free
  4214  056E' C027' F026'        	movff	?_floorf,efgtoa@l
  4215  0572' C028' F027'        	movff	?_floorf+1,efgtoa@l+1
  4216  0576' C029' F028'        	movff	?_floorf+2,efgtoa@l+2
  4217  057A' C02A' F029'        	movff	?_floorf+3,efgtoa@l+3
  4218                           
  4219                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 433:         d = 
      +                          (int)l;
  4220  057E' C026' F000'        	movff	efgtoa@l,___fltol@f1
  4221  0582' C027' F001'        	movff	efgtoa@l+1,___fltol@f1+1
  4222  0586' C028' F002'        	movff	efgtoa@l+2,___fltol@f1+2
  4223  058A' C029' F003'        	movff	efgtoa@l+3,___fltol@f1+3
  4224  058E' EC00' F000'        	call	___fltol	;wreg free
  4225  0592' C000' F018'        	movff	?___fltol,efgtoa@d
  4226  0596' C001' F019'        	movff	?___fltol+1,efgtoa@d+1
  4227  059A'                    
  4228                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 434:         h -=
      +                           l*u;
  4229  059A' C022' F019'        	movff	efgtoa@h,___flsub@b
  4230  059E' C023' F01A'        	movff	efgtoa@h+1,___flsub@b+1
  4231  05A2' C024' F01B'        	movff	efgtoa@h+2,___flsub@b+2
  4232  05A6' C025' F01C'        	movff	efgtoa@h+3,___flsub@b+3
  4233  05AA' C034' F004'        	movff	efgtoa@u,___flmul@a
  4234  05AE' C035' F005'        	movff	efgtoa@u+1,___flmul@a+1
  4235  05B2' C036' F006'        	movff	efgtoa@u+2,___flmul@a+2
  4236  05B6' C037' F007'        	movff	efgtoa@u+3,___flmul@a+3
  4237  05BA' C026' F000'        	movff	efgtoa@l,___flmul@b
  4238  05BE' C027' F001'        	movff	efgtoa@l+1,___flmul@b+1
  4239  05C2' C028' F002'        	movff	efgtoa@l+2,___flmul@b+2
  4240  05C6' C029' F003'        	movff	efgtoa@l+3,___flmul@b+3
  4241  05CA' EC00' F000'        	call	___flmul	;wreg free
  4242  05CE' C000' F01D'        	movff	?___flmul,___flsub@a
  4243  05D2' C001' F01E'        	movff	?___flmul+1,___flsub@a+1
  4244  05D6' C002' F01F'        	movff	?___flmul+2,___flsub@a+2
  4245  05DA' C003' F020'        	movff	?___flmul+3,___flsub@a+3
  4246  05DE' EC00' F000'        	call	___flsub	;wreg free
  4247  05E2' C019' F022'        	movff	?___flsub,efgtoa@h
  4248  05E6' C01A' F023'        	movff	?___flsub+1,efgtoa@h+1
  4249  05EA' C01B' F024'        	movff	?___flsub+2,efgtoa@h+2
  4250  05EE' C01C' F025'        	movff	?___flsub+3,efgtoa@h+3
  4251  05F2'                    
  4252                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 435:         u = 
      +                          u/10.0;
  4253  05F2' C034' F00E'        	movff	efgtoa@u,___fldiv@b
  4254  05F6' C035' F00F'        	movff	efgtoa@u+1,___fldiv@b+1
  4255  05FA' C036' F010'        	movff	efgtoa@u+2,___fldiv@b+2
  4256  05FE' C037' F011'        	movff	efgtoa@u+3,___fldiv@b+3
  4257  0602' 0E00               	movlw	0
  4258  0604' 6E00'              	movwf	___fldiv@a^0,c
  4259  0606' 0E00               	movlw	0
  4260  0608' 6E00'              	movwf	(___fldiv@a+1)^0,c
  4261  060A' 0E20               	movlw	32
  4262  060C' 6E00'              	movwf	(___fldiv@a+2)^0,c
  4263  060E' 0E41               	movlw	65
  4264  0610' 6E00'              	movwf	(___fldiv@a+3)^0,c
  4265  0612' EC00' F000'        	call	___fldiv	;wreg free
  4266  0616' C00E' F034'        	movff	?___fldiv,efgtoa@u
  4267  061A' C00F' F035'        	movff	?___fldiv+1,efgtoa@u+1
  4268  061E' C010' F036'        	movff	?___fldiv+2,efgtoa@u+2
  4269  0622' C011' F037'        	movff	?___fldiv+3,efgtoa@u+3
  4270  0626'                    
  4271                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 436:         ++i;
  4272  0626' 0100               	movlb	0	; () banked
  4273  0628' 4B00'              	infsnz	efgtoa@i& (0+255),f,b
  4274  062A' 2B00'              	incf	(efgtoa@i+1)& (0+255),f,b
  4275  062C'                    l4918:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  4279  062C' 5100'              	movf	efgtoa@m& (0+255),w,b
  4280  062E' 5D00'              	subwf	efgtoa@i& (0+255),w,b
  4281  0630' 5100'              	movf	(efgtoa@i+1)& (0+255),w,b
  4282  0632' 0A80               	xorlw	128
  4283  0634' 6E00'              	movwf	??_efgtoa^0,c
  4284  0636' 5100'              	movf	(efgtoa@m+1)& (0+255),w,b
  4285  0638' 0A80               	xorlw	128
  4286  063A' 5800'              	subwfb	??_efgtoa^0,w,c
  4287  063C' A0D8               	btfss	status,0,c
  4288  063E' EF00' F000'        	goto	u5691
  4289  0642' EF00' F000'        	goto	u5690
  4290  0646'                    u5691:
  4291  0646' EF00' F000'        	goto	l4910
  4292  064A'                    u5690:
  4293  064A'                    
  4294                           ; BSR set to: 0
  4295                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 440:     l = u*5.
      +                          0;
  4296  064A' C034' F000'        	movff	efgtoa@u,___flmul@b
  4297  064E' C035' F001'        	movff	efgtoa@u+1,___flmul@b+1
  4298  0652' C036' F002'        	movff	efgtoa@u+2,___flmul@b+2
  4299  0656' C037' F003'        	movff	efgtoa@u+3,___flmul@b+3
  4300  065A' 0E00               	movlw	0
  4301  065C' 6E00'              	movwf	___flmul@a^0,c
  4302  065E' 0E00               	movlw	0
  4303  0660' 6E00'              	movwf	(___flmul@a+1)^0,c
  4304  0662' 0EA0               	movlw	160
  4305  0664' 6E00'              	movwf	(___flmul@a+2)^0,c
  4306  0666' 0E40               	movlw	64
  4307  0668' 6E00'              	movwf	(___flmul@a+3)^0,c
  4308  066A' EC00' F000'        	call	___flmul	;wreg free
  4309  066E' C000' F026'        	movff	?___flmul,efgtoa@l
  4310  0672' C001' F027'        	movff	?___flmul+1,efgtoa@l+1
  4311  0676' C002' F028'        	movff	?___flmul+2,efgtoa@l+2
  4312  067A' C003' F029'        	movff	?___flmul+3,efgtoa@l+3
  4313  067E'                    
  4314                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 441:     if (h < 
      +                          l) {
  4315  067E' C022' F019'        	movff	efgtoa@h,___flge@ff1
  4316  0682' C023' F01A'        	movff	efgtoa@h+1,___flge@ff1+1
  4317  0686' C024' F01B'        	movff	efgtoa@h+2,___flge@ff1+2
  4318  068A' C025' F01C'        	movff	efgtoa@h+3,___flge@ff1+3
  4319  068E' C026' F01D'        	movff	efgtoa@l,___flge@ff2
  4320  0692' C027' F01E'        	movff	efgtoa@l+1,___flge@ff2+1
  4321  0696' C028' F01F'        	movff	efgtoa@l+2,___flge@ff2+2
  4322  069A' C029' F020'        	movff	efgtoa@l+3,___flge@ff2+3
  4323  069E' EC00' F000'        	call	___flge	;wreg free
  4324  06A2' B0D8               	btfsc	status,0,c
  4325  06A4' EF00' F000'        	goto	u5701
  4326  06A8' EF00' F000'        	goto	u5700
  4327  06AC'                    u5701:
  4328  06AC' EF00' F000'        	goto	l4926
  4329  06B0'                    u5700:
  4330  06B0'                    
  4331                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 442:         l = 
      +                          0.0;
  4332  06B0' 0E00               	movlw	0
  4333  06B2' 0100               	movlb	0	; () banked
  4334  06B4' 6F00'              	movwf	efgtoa@l& (0+255),b
  4335  06B6' 0E00               	movlw	0
  4336  06B8' 6F00'              	movwf	(efgtoa@l+1)& (0+255),b
  4337  06BA' 0E00               	movlw	0
  4338  06BC' 6F00'              	movwf	(efgtoa@l+2)& (0+255),b
  4339  06BE' 0E00               	movlw	0
  4340  06C0' 6F00'              	movwf	(efgtoa@l+3)& (0+255),b
  4341                           
  4342                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 443:     } else {
  4343  06C2' EF00' F000'        	goto	l4932
  4344  06C6'                    l4926:
  4345                           
  4346                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 445:         if (
      +                          (h == l) && !(d % 2)) {
  4347  06C6' C022' F000'        	movff	efgtoa@h,___fleq@ff1
  4348  06CA' C023' F001'        	movff	efgtoa@h+1,___fleq@ff1+1
  4349  06CE' C024' F002'        	movff	efgtoa@h+2,___fleq@ff1+2
  4350  06D2' C025' F003'        	movff	efgtoa@h+3,___fleq@ff1+3
  4351  06D6' C026' F004'        	movff	efgtoa@l,___fleq@ff2
  4352  06DA' C027' F005'        	movff	efgtoa@l+1,___fleq@ff2+1
  4353  06DE' C028' F006'        	movff	efgtoa@l+2,___fleq@ff2+2
  4354  06E2' C029' F007'        	movff	efgtoa@l+3,___fleq@ff2+3
  4355  06E6' EC00' F000'        	call	___fleq	;wreg free
  4356  06EA' A0D8               	btfss	status,0,c
  4357  06EC' EF00' F000'        	goto	u5711
  4358  06F0' EF00' F000'        	goto	u5710
  4359  06F4'                    u5711:
  4360  06F4' EF00' F000'        	goto	l4932
  4361  06F8'                    u5710:
  4362  06F8' 0100               	movlb	0	; () banked
  4363  06FA' B100'              	btfsc	efgtoa@d& (0+255),0,b
  4364  06FC' EF00' F000'        	goto	u5721
  4365  0700' EF00' F000'        	goto	u5720
  4366  0704'                    u5721:
  4367  0704' EF00' F000'        	goto	l4932
  4368  0708'                    u5720:
  4369  0708'                    
  4370                           ; BSR set to: 0
  4371                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 446:             
      +                          l = 0.0;
  4372  0708' 0E00               	movlw	0
  4373  070A' 6F00'              	movwf	efgtoa@l& (0+255),b
  4374  070C' 0E00               	movlw	0
  4375  070E' 6F00'              	movwf	(efgtoa@l+1)& (0+255),b
  4376  0710' 0E00               	movlw	0
  4377  0712' 6F00'              	movwf	(efgtoa@l+2)& (0+255),b
  4378  0714' 0E00               	movlw	0
  4379  0716' 6F00'              	movwf	(efgtoa@l+3)& (0+255),b
  4380  0718'                    l4932:
  4381                           
  4382                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 451:     h = g + 
      +                          l;
  4383  0718' C02C' F000'        	movff	efgtoa@g,___fladd@b
  4384  071C' C02D' F001'        	movff	efgtoa@g+1,___fladd@b+1
  4385  0720' C02E' F002'        	movff	efgtoa@g+2,___fladd@b+2
  4386  0724' C02F' F003'        	movff	efgtoa@g+3,___fladd@b+3
  4387  0728' C026' F004'        	movff	efgtoa@l,___fladd@a
  4388  072C' C027' F005'        	movff	efgtoa@l+1,___fladd@a+1
  4389  0730' C028' F006'        	movff	efgtoa@l+2,___fladd@a+2
  4390  0734' C029' F007'        	movff	efgtoa@l+3,___fladd@a+3
  4391  0738' EC00' F000'        	call	___fladd	;wreg free
  4392  073C' C000' F022'        	movff	?___fladd,efgtoa@h
  4393  0740' C001' F023'        	movff	?___fladd+1,efgtoa@h+1
  4394  0744' C002' F024'        	movff	?___fladd+2,efgtoa@h+2
  4395  0748' C003' F025'        	movff	?___fladd+3,efgtoa@h+3
  4396  074C'                    
  4397                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 453:  if (h >= (o
      +                          u*10.0)) {
  4398  074C' C022' F019'        	movff	efgtoa@h,___flge@ff1
  4399  0750' C023' F01A'        	movff	efgtoa@h+1,___flge@ff1+1
  4400  0754' C024' F01B'        	movff	efgtoa@h+2,___flge@ff1+2
  4401  0758' C025' F01C'        	movff	efgtoa@h+3,___flge@ff1+3
  4402  075C' 0E00               	movlw	0
  4403  075E' 6E00'              	movwf	___flmul@a^0,c
  4404  0760' 0E00               	movlw	0
  4405  0762' 6E00'              	movwf	(___flmul@a+1)^0,c
  4406  0764' 0E20               	movlw	32
  4407  0766' 6E00'              	movwf	(___flmul@a+2)^0,c
  4408  0768' 0E41               	movlw	65
  4409  076A' 6E00'              	movwf	(___flmul@a+3)^0,c
  4410  076C' C014' F000'        	movff	efgtoa@ou,___flmul@b
  4411  0770' C015' F001'        	movff	efgtoa@ou+1,___flmul@b+1
  4412  0774' C016' F002'        	movff	efgtoa@ou+2,___flmul@b+2
  4413  0778' C017' F003'        	movff	efgtoa@ou+3,___flmul@b+3
  4414  077C' EC00' F000'        	call	___flmul	;wreg free
  4415  0780' C000' F01D'        	movff	?___flmul,___flge@ff2
  4416  0784' C001' F01E'        	movff	?___flmul+1,___flge@ff2+1
  4417  0788' C002' F01F'        	movff	?___flmul+2,___flge@ff2+2
  4418  078C' C003' F020'        	movff	?___flmul+3,___flge@ff2+3
  4419  0790' EC00' F000'        	call	___flge	;wreg free
  4420  0794' A0D8               	btfss	status,0,c
  4421  0796' EF00' F000'        	goto	u5731
  4422  079A' EF00' F000'        	goto	u5730
  4423  079E'                    u5731:
  4424  079E' EF00' F000'        	goto	l4944
  4425  07A2'                    u5730:
  4426  07A2'                    
  4427                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 454:   e++;
  4428  07A2' 0100               	movlb	0	; () banked
  4429  07A4' 4B00'              	infsnz	efgtoa@e& (0+255),f,b
  4430  07A6' 2B00'              	incf	(efgtoa@e+1)& (0+255),f,b
  4431  07A8'                    
  4432                           ; BSR set to: 0
  4433                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 455:   ou *= 10.0
      +                          ;
  4434  07A8' C014' F000'        	movff	efgtoa@ou,___flmul@b
  4435  07AC' C015' F001'        	movff	efgtoa@ou+1,___flmul@b+1
  4436  07B0' C016' F002'        	movff	efgtoa@ou+2,___flmul@b+2
  4437  07B4' C017' F003'        	movff	efgtoa@ou+3,___flmul@b+3
  4438  07B8' 0E00               	movlw	0
  4439  07BA' 6E00'              	movwf	___flmul@a^0,c
  4440  07BC' 0E00               	movlw	0
  4441  07BE' 6E00'              	movwf	(___flmul@a+1)^0,c
  4442  07C0' 0E20               	movlw	32
  4443  07C2' 6E00'              	movwf	(___flmul@a+2)^0,c
  4444  07C4' 0E41               	movlw	65
  4445  07C6' 6E00'              	movwf	(___flmul@a+3)^0,c
  4446  07C8' EC00' F000'        	call	___flmul	;wreg free
  4447  07CC' C000' F014'        	movff	?___flmul,efgtoa@ou
  4448  07D0' C001' F015'        	movff	?___flmul+1,efgtoa@ou+1
  4449  07D4' C002' F016'        	movff	?___flmul+2,efgtoa@ou+2
  4450  07D8' C003' F017'        	movff	?___flmul+3,efgtoa@ou+3
  4451  07DC'                    
  4452                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 456:   if (nmode 
      +                          == 'f') {
  4453  07DC' 0E66               	movlw	102
  4454  07DE' 0100               	movlb	0	; () banked
  4455  07E0' 1900'              	xorwf	efgtoa@nmode& (0+255),w,b
  4456  07E2' A4D8               	btfss	status,2,c
  4457  07E4' EF00' F000'        	goto	u5741
  4458  07E8' EF00' F000'        	goto	u5740
  4459  07EC'                    u5741:
  4460  07EC' EF00' F000'        	goto	l4944
  4461  07F0'                    u5740:
  4462  07F0'                    
  4463                           ; BSR set to: 0
  4464                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 458:    m++;
  4465  07F0' 4B00'              	infsnz	efgtoa@m& (0+255),f,b
  4466  07F2' 2B00'              	incf	(efgtoa@m+1)& (0+255),f,b
  4467  07F4'                    l4944:
  4468                           
  4469                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 463:     u = ou;
  4470  07F4' C014' F034'        	movff	efgtoa@ou,efgtoa@u
  4471  07F8' C015' F035'        	movff	efgtoa@ou+1,efgtoa@u+1
  4472  07FC' C016' F036'        	movff	efgtoa@ou+2,efgtoa@u+2
  4473  0800' C017' F037'        	movff	efgtoa@ou+3,efgtoa@u+3
  4474  0804'                    
  4475                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 464:     ne = (nm
      +                          ode == 'e') ? 0 : e;
  4476  0804' 0E65               	movlw	101
  4477  0806' 0100               	movlb	0	; () banked
  4478  0808' 1900'              	xorwf	efgtoa@nmode& (0+255),w,b
  4479  080A' B4D8               	btfsc	status,2,c
  4480  080C' EF00' F000'        	goto	u5751
  4481  0810' EF00' F000'        	goto	u5750
  4482  0814'                    u5751:
  4483  0814' EF00' F000'        	goto	l4950
  4484  0818'                    u5750:
  4485  0818'                    
  4486                           ; BSR set to: 0
  4487  0818' C030' F010'        	movff	efgtoa@e,efgtoa@ne
  4488  081C' C031' F011'        	movff	efgtoa@e+1,efgtoa@ne+1
  4489  0820' EF00' F000'        	goto	l1426
  4490  0824'                    l4950:
  4491                           
  4492                           ; BSR set to: 0
  4493  0824' 0E00               	movlw	0
  4494  0826' 6F00'              	movwf	(efgtoa@ne+1)& (0+255),b
  4495  0828' 0E00               	movlw	0
  4496  082A' 6F00'              	movwf	efgtoa@ne& (0+255),b
  4497  082C'                    l1426:
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 465:     pp = 0;
  4501  082C' 0E00               	movlw	0
  4502  082E' 6F00'              	movwf	(efgtoa@pp+1)& (0+255),b
  4503  0830' 0E00               	movlw	0
  4504  0832' 6F00'              	movwf	efgtoa@pp& (0+255),b
  4505                           
  4506                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 466:     t = 0;
  4507  0834' 0E00               	movlw	0
  4508  0836' 6F00'              	movwf	(efgtoa@t+1)& (0+255),b
  4509  0838' 0E00               	movlw	0
  4510  083A' 6F00'              	movwf	efgtoa@t& (0+255),b
  4511                           
  4512                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 467:     i = 0;
  4513  083C' 0E00               	movlw	0
  4514  083E' 6F00'              	movwf	(efgtoa@i+1)& (0+255),b
  4515  0840' 0E00               	movlw	0
  4516  0842' 6F00'              	movwf	efgtoa@i& (0+255),b
  4517                           
  4518                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  4519  0844' EF00' F000'        	goto	l5000
  4520  0848'                    l4952:
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 469:         l = 
      +                          floorf(h/u);
  4524  0848' C022' F00E'        	movff	efgtoa@h,___fldiv@b
  4525  084C' C023' F00F'        	movff	efgtoa@h+1,___fldiv@b+1
  4526  0850' C024' F010'        	movff	efgtoa@h+2,___fldiv@b+2
  4527  0854' C025' F011'        	movff	efgtoa@h+3,___fldiv@b+3
  4528  0858' C034' F012'        	movff	efgtoa@u,___fldiv@a
  4529  085C' C035' F013'        	movff	efgtoa@u+1,___fldiv@a+1
  4530  0860' C036' F014'        	movff	efgtoa@u+2,___fldiv@a+2
  4531  0864' C037' F015'        	movff	efgtoa@u+3,___fldiv@a+3
  4532  0868' EC00' F000'        	call	___fldiv	;wreg free
  4533  086C' C00E' F027'        	movff	?___fldiv,floorf@x
  4534  0870' C00F' F028'        	movff	?___fldiv+1,floorf@x+1
  4535  0874' C010' F029'        	movff	?___fldiv+2,floorf@x+2
  4536  0878' C011' F02A'        	movff	?___fldiv+3,floorf@x+3
  4537  087C' EC00' F000'        	call	_floorf	;wreg free
  4538  0880' C027' F026'        	movff	?_floorf,efgtoa@l
  4539  0884' C028' F027'        	movff	?_floorf+1,efgtoa@l+1
  4540  0888' C029' F028'        	movff	?_floorf+2,efgtoa@l+2
  4541  088C' C02A' F029'        	movff	?_floorf+3,efgtoa@l+3
  4542                           
  4543                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 470:         d = 
      +                          (int)l;
  4544  0890' C026' F000'        	movff	efgtoa@l,___fltol@f1
  4545  0894' C027' F001'        	movff	efgtoa@l+1,___fltol@f1+1
  4546  0898' C028' F002'        	movff	efgtoa@l+2,___fltol@f1+2
  4547  089C' C029' F003'        	movff	efgtoa@l+3,___fltol@f1+3
  4548  08A0' EC00' F000'        	call	___fltol	;wreg free
  4549  08A4' C000' F018'        	movff	?___fltol,efgtoa@d
  4550  08A8' C001' F019'        	movff	?___fltol+1,efgtoa@d+1
  4551  08AC'                    
  4552                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 471:         if (
      +                          !(flags & (1 << 4)) && !d && (mode == 'g') && (ne < 0)) {
  4553  08AC' 0100               	movlb	0	; () banked
  4554  08AE' B900'              	btfsc	_flags& (0+255),4,b
  4555  08B0' EF00' F000'        	goto	u5761
  4556  08B4' EF00' F000'        	goto	u5760
  4557  08B8'                    u5761:
  4558  08B8' EF00' F000'        	goto	l4964
  4559  08BC'                    u5760:
  4560  08BC'                    
  4561                           ; BSR set to: 0
  4562  08BC' 5100'              	movf	efgtoa@d& (0+255),w,b
  4563  08BE' 1100'              	iorwf	(efgtoa@d+1)& (0+255),w,b
  4564  08C0' A4D8               	btfss	status,2,c
  4565  08C2' EF00' F000'        	goto	u5771
  4566  08C6' EF00' F000'        	goto	u5770
  4567  08CA'                    u5771:
  4568  08CA' EF00' F000'        	goto	l4964
  4569  08CE'                    u5770:
  4570  08CE'                    
  4571                           ; BSR set to: 0
  4572  08CE' 0E67               	movlw	103
  4573  08D0' 1900'              	xorwf	efgtoa@mode& (0+255),w,b
  4574  08D2' A4D8               	btfss	status,2,c
  4575  08D4' EF00' F000'        	goto	u5781
  4576  08D8' EF00' F000'        	goto	u5780
  4577  08DC'                    u5781:
  4578  08DC' EF00' F000'        	goto	l4964
  4579  08E0'                    u5780:
  4580  08E0'                    
  4581                           ; BSR set to: 0
  4582  08E0' BF00'              	btfsc	(efgtoa@ne+1)& (0+255),7,b
  4583  08E2' EF00' F000'        	goto	u5790
  4584  08E6' EF00' F000'        	goto	u5791
  4585  08EA'                    u5791:
  4586  08EA' EF00' F000'        	goto	l4964
  4587  08EE'                    u5790:
  4588  08EE'                    
  4589                           ; BSR set to: 0
  4590                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 472:             
      +                          ++t;
  4591  08EE' 4B00'              	infsnz	efgtoa@t& (0+255),f,b
  4592  08F0' 2B00'              	incf	(efgtoa@t+1)& (0+255),f,b
  4593                           
  4594                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 473:         } el
      +                          se {
  4595  08F2' EF00' F000'        	goto	l4992
  4596  08F6'                    l4964:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 474:             
      +                          if (!pp && (ne < 0)) {
  4600  08F6' 5100'              	movf	efgtoa@pp& (0+255),w,b
  4601  08F8' 1100'              	iorwf	(efgtoa@pp+1)& (0+255),w,b
  4602  08FA' A4D8               	btfss	status,2,c
  4603  08FC' EF00' F000'        	goto	u5801
  4604  0900' EF00' F000'        	goto	u5800
  4605  0904'                    u5801:
  4606  0904' EF00' F000'        	goto	l4984
  4607  0908'                    u5800:
  4608  0908'                    
  4609                           ; BSR set to: 0
  4610  0908' BF00'              	btfsc	(efgtoa@ne+1)& (0+255),7,b
  4611  090A' EF00' F000'        	goto	u5810
  4612  090E' EF00' F000'        	goto	u5811
  4613  0912'                    u5811:
  4614  0912' EF00' F000'        	goto	l4984
  4615  0916'                    u5810:
  4616  0916'                    
  4617                           ; BSR set to: 0
  4618                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 475:             
      +                              dbuf[n++] = '.';
  4619  0916' 0E00'              	movlw	low _dbuf
  4620  0918' 2500'              	addwf	efgtoa@n& (0+255),w,b
  4621  091A' 6ED9               	movwf	fsr2l,c
  4622  091C' 0E00'              	movlw	high _dbuf
  4623  091E' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  4624  0920' 6EDA               	movwf	fsr2h,c
  4625  0922' 0E2E               	movlw	46
  4626  0924' 6EDF               	movwf	indf2,c
  4627  0926'                    
  4628                           ; BSR set to: 0
  4629  0926' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  4630  0928' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  4631  092A'                    
  4632                           ; BSR set to: 0
  4633                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 476:             
      +                              --w;
  4634  092A' 0700'              	decf	efgtoa@w& (0+255),f,b
  4635  092C' A0D8               	btfss	status,0,c
  4636  092E' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  4637  0930'                    
  4638                           ; BSR set to: 0
  4639                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 477:             
      +                              pp = 1;
  4640  0930' 0E00               	movlw	0
  4641  0932' 6F00'              	movwf	(efgtoa@pp+1)& (0+255),b
  4642  0934' 0E01               	movlw	1
  4643  0936' 6F00'              	movwf	efgtoa@pp& (0+255),b
  4644  0938' EF00' F000'        	goto	l4984
  4645  093C'                    l4976:
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 480:             
      +                              dbuf[n++] = '0';
  4649  093C' 0E00'              	movlw	low _dbuf
  4650  093E' 2500'              	addwf	efgtoa@n& (0+255),w,b
  4651  0940' 6ED9               	movwf	fsr2l,c
  4652  0942' 0E00'              	movlw	high _dbuf
  4653  0944' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  4654  0946' 6EDA               	movwf	fsr2h,c
  4655  0948' 0E30               	movlw	48
  4656  094A' 6EDF               	movwf	indf2,c
  4657  094C'                    
  4658                           ; BSR set to: 0
  4659  094C' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  4660  094E' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  4661  0950'                    
  4662                           ; BSR set to: 0
  4663                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 481:             
      +                              --w;
  4664  0950' 0700'              	decf	efgtoa@w& (0+255),f,b
  4665  0952' A0D8               	btfss	status,0,c
  4666  0954' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  4667  0956'                    
  4668                           ; BSR set to: 0
  4669                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 482:             
      +                              --t;
  4670  0956' 0700'              	decf	efgtoa@t& (0+255),f,b
  4671  0958' A0D8               	btfss	status,0,c
  4672  095A' 0700'              	decf	(efgtoa@t+1)& (0+255),f,b
  4673  095C'                    l4984:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 479:             
      +                          while (t) {
  4677  095C' 5100'              	movf	efgtoa@t& (0+255),w,b
  4678  095E' 1100'              	iorwf	(efgtoa@t+1)& (0+255),w,b
  4679  0960' A4D8               	btfss	status,2,c
  4680  0962' EF00' F000'        	goto	u5821
  4681  0966' EF00' F000'        	goto	u5820
  4682  096A'                    u5821:
  4683  096A' EF00' F000'        	goto	l4976
  4684  096E'                    u5820:
  4685  096E'                    
  4686                           ; BSR set to: 0
  4687                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 484:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  4688  096E' 0E00'              	movlw	low _dbuf
  4689  0970' 2500'              	addwf	efgtoa@n& (0+255),w,b
  4690  0972' 6ED9               	movwf	fsr2l,c
  4691  0974' 0E00'              	movlw	high _dbuf
  4692  0976' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  4693  0978' 6EDA               	movwf	fsr2h,c
  4694  097A' 5100'              	movf	efgtoa@d& (0+255),w,b
  4695  097C' 0F30               	addlw	48
  4696  097E' 6EDF               	movwf	indf2,c
  4697  0980'                    
  4698                           ; BSR set to: 0
  4699  0980' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  4700  0982' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  4701  0984'                    
  4702                           ; BSR set to: 0
  4703                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 485:             
      +                          --w;
  4704  0984' 0700'              	decf	efgtoa@w& (0+255),f,b
  4705  0986' A0D8               	btfss	status,0,c
  4706  0988' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  4707  098A'                    l4992:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 487:         h -=
      +                           l*u;
  4711  098A' C022' F019'        	movff	efgtoa@h,___flsub@b
  4712  098E' C023' F01A'        	movff	efgtoa@h+1,___flsub@b+1
  4713  0992' C024' F01B'        	movff	efgtoa@h+2,___flsub@b+2
  4714  0996' C025' F01C'        	movff	efgtoa@h+3,___flsub@b+3
  4715  099A' C034' F004'        	movff	efgtoa@u,___flmul@a
  4716  099E' C035' F005'        	movff	efgtoa@u+1,___flmul@a+1
  4717  09A2' C036' F006'        	movff	efgtoa@u+2,___flmul@a+2
  4718  09A6' C037' F007'        	movff	efgtoa@u+3,___flmul@a+3
  4719  09AA' C026' F000'        	movff	efgtoa@l,___flmul@b
  4720  09AE' C027' F001'        	movff	efgtoa@l+1,___flmul@b+1
  4721  09B2' C028' F002'        	movff	efgtoa@l+2,___flmul@b+2
  4722  09B6' C029' F003'        	movff	efgtoa@l+3,___flmul@b+3
  4723  09BA' EC00' F000'        	call	___flmul	;wreg free
  4724  09BE' C000' F01D'        	movff	?___flmul,___flsub@a
  4725  09C2' C001' F01E'        	movff	?___flmul+1,___flsub@a+1
  4726  09C6' C002' F01F'        	movff	?___flmul+2,___flsub@a+2
  4727  09CA' C003' F020'        	movff	?___flmul+3,___flsub@a+3
  4728  09CE' EC00' F000'        	call	___flsub	;wreg free
  4729  09D2' C019' F022'        	movff	?___flsub,efgtoa@h
  4730  09D6' C01A' F023'        	movff	?___flsub+1,efgtoa@h+1
  4731  09DA' C01B' F024'        	movff	?___flsub+2,efgtoa@h+2
  4732  09DE' C01C' F025'        	movff	?___flsub+3,efgtoa@h+3
  4733  09E2'                    
  4734                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 488:         u = 
      +                          u/10.0;
  4735  09E2' C034' F00E'        	movff	efgtoa@u,___fldiv@b
  4736  09E6' C035' F00F'        	movff	efgtoa@u+1,___fldiv@b+1
  4737  09EA' C036' F010'        	movff	efgtoa@u+2,___fldiv@b+2
  4738  09EE' C037' F011'        	movff	efgtoa@u+3,___fldiv@b+3
  4739  09F2' 0E00               	movlw	0
  4740  09F4' 6E00'              	movwf	___fldiv@a^0,c
  4741  09F6' 0E00               	movlw	0
  4742  09F8' 6E00'              	movwf	(___fldiv@a+1)^0,c
  4743  09FA' 0E20               	movlw	32
  4744  09FC' 6E00'              	movwf	(___fldiv@a+2)^0,c
  4745  09FE' 0E41               	movlw	65
  4746  0A00' 6E00'              	movwf	(___fldiv@a+3)^0,c
  4747  0A02' EC00' F000'        	call	___fldiv	;wreg free
  4748  0A06' C00E' F034'        	movff	?___fldiv,efgtoa@u
  4749  0A0A' C00F' F035'        	movff	?___fldiv+1,efgtoa@u+1
  4750  0A0E' C010' F036'        	movff	?___fldiv+2,efgtoa@u+2
  4751  0A12' C011' F037'        	movff	?___fldiv+3,efgtoa@u+3
  4752  0A16'                    
  4753                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 489:         --ne
      +                          ;
  4754  0A16' 0100               	movlb	0	; () banked
  4755  0A18' 0700'              	decf	efgtoa@ne& (0+255),f,b
  4756  0A1A' A0D8               	btfss	status,0,c
  4757  0A1C' 0700'              	decf	(efgtoa@ne+1)& (0+255),f,b
  4758  0A1E'                    
  4759                           ; BSR set to: 0
  4760                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 490:         ++i;
  4761  0A1E' 4B00'              	infsnz	efgtoa@i& (0+255),f,b
  4762  0A20' 2B00'              	incf	(efgtoa@i+1)& (0+255),f,b
  4763  0A22'                    l5000:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  4767  0A22' 5100'              	movf	efgtoa@m& (0+255),w,b
  4768  0A24' 5D00'              	subwf	efgtoa@i& (0+255),w,b
  4769  0A26' 5100'              	movf	(efgtoa@i+1)& (0+255),w,b
  4770  0A28' 0A80               	xorlw	128
  4771  0A2A' 6E00'              	movwf	??_efgtoa^0,c
  4772  0A2C' 5100'              	movf	(efgtoa@m+1)& (0+255),w,b
  4773  0A2E' 0A80               	xorlw	128
  4774  0A30' 5800'              	subwfb	??_efgtoa^0,w,c
  4775  0A32' B0D8               	btfsc	status,0,c
  4776  0A34' EF00' F000'        	goto	u5831
  4777  0A38' EF00' F000'        	goto	u5830
  4778  0A3C'                    u5831:
  4779  0A3C' EF00' F000'        	goto	l5004
  4780  0A40'                    u5830:
  4781  0A40'                    
  4782                           ; BSR set to: 0
  4783  0A40' BF00'              	btfsc	(efgtoa@n+1)& (0+255),7,b
  4784  0A42' EF00' F000'        	goto	u5841
  4785  0A46' 5100'              	movf	(efgtoa@n+1)& (0+255),w,b
  4786  0A48' E109               	bnz	u5840
  4787  0A4A' 0E4B               	movlw	75
  4788  0A4C' 5D00'              	subwf	efgtoa@n& (0+255),w,b
  4789  0A4E' A0D8               	btfss	status,0,c
  4790  0A50' EF00' F000'        	goto	u5841
  4791  0A54' EF00' F000'        	goto	u5840
  4792  0A58'                    u5841:
  4793  0A58' EF00' F000'        	goto	l4952
  4794  0A5C'                    u5840:
  4795  0A5C'                    l5004:
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 492:     if (!pp 
      +                          && (flags & (1 << 4))) {
  4799  0A5C' 5100'              	movf	efgtoa@pp& (0+255),w,b
  4800  0A5E' 1100'              	iorwf	(efgtoa@pp+1)& (0+255),w,b
  4801  0A60' A4D8               	btfss	status,2,c
  4802  0A62' EF00' F000'        	goto	u5851
  4803  0A66' EF00' F000'        	goto	u5850
  4804  0A6A'                    u5851:
  4805  0A6A' EF00' F000'        	goto	l5012
  4806  0A6E'                    u5850:
  4807  0A6E'                    
  4808                           ; BSR set to: 0
  4809  0A6E' A900'              	btfss	_flags& (0+255),4,b
  4810  0A70' EF00' F000'        	goto	u5861
  4811  0A74' EF00' F000'        	goto	u5860
  4812  0A78'                    u5861:
  4813  0A78' EF00' F000'        	goto	l5012
  4814  0A7C'                    u5860:
  4815  0A7C'                    
  4816                           ; BSR set to: 0
  4817                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 493:         dbuf
      +                          [n++] = '.';
  4818  0A7C' 0E00'              	movlw	low _dbuf
  4819  0A7E' 2500'              	addwf	efgtoa@n& (0+255),w,b
  4820  0A80' 6ED9               	movwf	fsr2l,c
  4821  0A82' 0E00'              	movlw	high _dbuf
  4822  0A84' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  4823  0A86' 6EDA               	movwf	fsr2h,c
  4824  0A88' 0E2E               	movlw	46
  4825  0A8A' 6EDF               	movwf	indf2,c
  4826  0A8C'                    
  4827                           ; BSR set to: 0
  4828  0A8C' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  4829  0A8E' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  4830  0A90'                    l5012:
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 495:     dbuf[n] 
      +                          = '\0';
  4834  0A90' 0E00'              	movlw	low _dbuf
  4835  0A92' 2500'              	addwf	efgtoa@n& (0+255),w,b
  4836  0A94' 6ED9               	movwf	fsr2l,c
  4837  0A96' 0E00'              	movlw	high _dbuf
  4838  0A98' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  4839  0A9A' 6EDA               	movwf	fsr2h,c
  4840  0A9C' 0E00               	movlw	0
  4841  0A9E' 6EDF               	movwf	indf2,c
  4842  0AA0'                    
  4843                           ; BSR set to: 0
  4844                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 498:     if (nmod
      +                          e == 'e') {
  4845  0AA0' 0E65               	movlw	101
  4846  0AA2' 1900'              	xorwf	efgtoa@nmode& (0+255),w,b
  4847  0AA4' A4D8               	btfss	status,2,c
  4848  0AA6' EF00' F000'        	goto	u5871
  4849  0AAA' EF00' F000'        	goto	u5870
  4850  0AAE'                    u5871:
  4851  0AAE' EF00' F000'        	goto	l4814
  4852  0AB2'                    u5870:
  4853  0AB2'                    
  4854                           ; BSR set to: 0
  4855                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 499:         i = 
      +                          sizeof(dbuf) - 1;
  4856  0AB2' 0E00               	movlw	0
  4857  0AB4' 6F00'              	movwf	(efgtoa@i+1)& (0+255),b
  4858  0AB6' 0E4F               	movlw	79
  4859  0AB8' 6F00'              	movwf	efgtoa@i& (0+255),b
  4860  0ABA'                    
  4861                           ; BSR set to: 0
  4862                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 500:         dbuf
      +                          [i] = '\0';
  4863  0ABA' 0E00'              	movlw	low _dbuf
  4864  0ABC' 2500'              	addwf	efgtoa@i& (0+255),w,b
  4865  0ABE' 6ED9               	movwf	fsr2l,c
  4866  0AC0' 0E00'              	movlw	high _dbuf
  4867  0AC2' 2100'              	addwfc	(efgtoa@i+1)& (0+255),w,b
  4868  0AC4' 6EDA               	movwf	fsr2h,c
  4869  0AC6' 0E00               	movlw	0
  4870  0AC8' 6EDF               	movwf	indf2,c
  4871  0ACA'                    
  4872                           ; BSR set to: 0
  4873                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 501:         sign
      +                           = 0;
  4874  0ACA' 0E00               	movlw	0
  4875  0ACC' 6F00'              	movwf	(efgtoa@sign+1)& (0+255),b
  4876  0ACE' 0E00               	movlw	0
  4877  0AD0' 6F00'              	movwf	efgtoa@sign& (0+255),b
  4878  0AD2'                    
  4879                           ; BSR set to: 0
  4880                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 502:         if (
      +                          e < 0) {
  4881  0AD2' BF00'              	btfsc	(efgtoa@e+1)& (0+255),7,b
  4882  0AD4' EF00' F000'        	goto	u5880
  4883  0AD8' EF00' F000'        	goto	u5881
  4884  0ADC'                    u5881:
  4885  0ADC' EF00' F000'        	goto	l5028
  4886  0AE0'                    u5880:
  4887  0AE0'                    
  4888                           ; BSR set to: 0
  4889                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 503:             
      +                          sign = 1;
  4890  0AE0' 0E00               	movlw	0
  4891  0AE2' 6F00'              	movwf	(efgtoa@sign+1)& (0+255),b
  4892  0AE4' 0E01               	movlw	1
  4893  0AE6' 6F00'              	movwf	efgtoa@sign& (0+255),b
  4894  0AE8'                    
  4895                           ; BSR set to: 0
  4896                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 504:             
      +                          e = -e;
  4897  0AE8' 6D00'              	negf	efgtoa@e& (0+255),b
  4898  0AEA' 1F00'              	comf	(efgtoa@e+1)& (0+255),f,b
  4899  0AEC' B0D8               	btfsc	status,0,c
  4900  0AEE' 2B00'              	incf	(efgtoa@e+1)& (0+255),f,b
  4901  0AF0'                    l5028:
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 506:         p = 
      +                          2;
  4905  0AF0' 0E00               	movlw	0
  4906  0AF2' 6F00'              	movwf	(efgtoa@p+1)& (0+255),b
  4907  0AF4' 0E02               	movlw	2
  4908  0AF6' 6F00'              	movwf	efgtoa@p& (0+255),b
  4909                           
  4910                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  4911  0AF8' EF00' F000'        	goto	l5040
  4912  0AFC'                    l5030:
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 508:             
      +                          --i;
  4916  0AFC' 0700'              	decf	efgtoa@i& (0+255),f,b
  4917  0AFE' A0D8               	btfss	status,0,c
  4918  0B00' 0700'              	decf	(efgtoa@i+1)& (0+255),f,b
  4919  0B02'                    
  4920                           ; BSR set to: 0
  4921                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 509:             
      +                          dbuf[i] = '0' + (e % 10);
  4922  0B02' 0E00'              	movlw	low _dbuf
  4923  0B04' 2500'              	addwf	efgtoa@i& (0+255),w,b
  4924  0B06' 6ED9               	movwf	fsr2l,c
  4925  0B08' 0E00'              	movlw	high _dbuf
  4926  0B0A' 2100'              	addwfc	(efgtoa@i+1)& (0+255),w,b
  4927  0B0C' 6EDA               	movwf	fsr2h,c
  4928  0B0E' C030' F000'        	movff	efgtoa@e,___awmod@dividend
  4929  0B12' C031' F001'        	movff	efgtoa@e+1,___awmod@dividend+1
  4930  0B16' 0E00               	movlw	0
  4931  0B18' 6E00'              	movwf	(___awmod@divisor+1)^0,c
  4932  0B1A' 0E0A               	movlw	10
  4933  0B1C' 6E00'              	movwf	___awmod@divisor^0,c
  4934  0B1E' EC00' F000'        	call	___awmod	;wreg free
  4935  0B22' 5000'              	movf	?___awmod^0,w,c
  4936  0B24' 0F30               	addlw	48
  4937  0B26' 6EDF               	movwf	indf2,c
  4938  0B28'                    
  4939                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 510:             
      +                          e = e / 10;
  4940  0B28' C030' F006'        	movff	efgtoa@e,___awdiv@dividend
  4941  0B2C' C031' F007'        	movff	efgtoa@e+1,___awdiv@dividend+1
  4942  0B30' 0E00               	movlw	0
  4943  0B32' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
  4944  0B34' 0E0A               	movlw	10
  4945  0B36' 6E00'              	movwf	___awdiv@divisor^0,c
  4946  0B38' EC00' F000'        	call	___awdiv	;wreg free
  4947  0B3C' C006' F030'        	movff	?___awdiv,efgtoa@e
  4948  0B40' C007' F031'        	movff	?___awdiv+1,efgtoa@e+1
  4949  0B44'                    
  4950                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 511:             
      +                          --p;
  4951  0B44' 0100               	movlb	0	; () banked
  4952  0B46' 0700'              	decf	efgtoa@p& (0+255),f,b
  4953  0B48' A0D8               	btfss	status,0,c
  4954  0B4A' 0700'              	decf	(efgtoa@p+1)& (0+255),f,b
  4955  0B4C'                    
  4956                           ; BSR set to: 0
  4957                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 512:             
      +                          --w;
  4958  0B4C' 0700'              	decf	efgtoa@w& (0+255),f,b
  4959  0B4E' A0D8               	btfss	status,0,c
  4960  0B50' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  4961  0B52'                    l5040:
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  4965  0B52' 5100'              	movf	efgtoa@e& (0+255),w,b
  4966  0B54' 1100'              	iorwf	(efgtoa@e+1)& (0+255),w,b
  4967  0B56' A4D8               	btfss	status,2,c
  4968  0B58' EF00' F000'        	goto	u5891
  4969  0B5C' EF00' F000'        	goto	u5890
  4970  0B60'                    u5891:
  4971  0B60' EF00' F000'        	goto	l5030
  4972  0B64'                    u5890:
  4973  0B64'                    
  4974                           ; BSR set to: 0
  4975  0B64' BF00'              	btfsc	(efgtoa@p+1)& (0+255),7,b
  4976  0B66' EF00' F000'        	goto	u5900
  4977  0B6A' 5100'              	movf	(efgtoa@p+1)& (0+255),w,b
  4978  0B6C' E106               	bnz	u5901
  4979  0B6E' 0500'              	decf	efgtoa@p& (0+255),w,b
  4980  0B70' B0D8               	btfsc	status,0,c
  4981  0B72' EF00' F000'        	goto	u5901
  4982  0B76' EF00' F000'        	goto	u5900
  4983  0B7A'                    u5901:
  4984  0B7A' EF00' F000'        	goto	l5030
  4985  0B7E'                    u5900:
  4986  0B7E'                    
  4987                           ; BSR set to: 0
  4988                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 514:         --i;
  4989  0B7E' 0700'              	decf	efgtoa@i& (0+255),f,b
  4990  0B80' A0D8               	btfss	status,0,c
  4991  0B82' 0700'              	decf	(efgtoa@i+1)& (0+255),f,b
  4992  0B84'                    
  4993                           ; BSR set to: 0
  4994                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 515:         dbuf
      +                          [i] = sign ? '-' : '+';
  4995  0B84' 5100'              	movf	efgtoa@sign& (0+255),w,b
  4996  0B86' 1100'              	iorwf	(efgtoa@sign+1)& (0+255),w,b
  4997  0B88' A4D8               	btfss	status,2,c
  4998  0B8A' EF00' F000'        	goto	u5911
  4999  0B8E' EF00' F000'        	goto	u5910
  5000  0B92'                    u5911:
  5001  0B92' EF00' F000'        	goto	l5050
  5002  0B96'                    u5910:
  5003  0B96'                    
  5004                           ; BSR set to: 0
  5005  0B96' 0E00               	movlw	0
  5006  0B98' 6F00'              	movwf	(_efgtoa$2751+1)& (0+255),b
  5007  0B9A' 0E2B               	movlw	43
  5008  0B9C' 6F00'              	movwf	_efgtoa$2751& (0+255),b
  5009  0B9E' EF00' F000'        	goto	l5052
  5010  0BA2'                    l5050:
  5011                           
  5012                           ; BSR set to: 0
  5013  0BA2' 0E00               	movlw	0
  5014  0BA4' 6F00'              	movwf	(_efgtoa$2751+1)& (0+255),b
  5015  0BA6' 0E2D               	movlw	45
  5016  0BA8' 6F00'              	movwf	_efgtoa$2751& (0+255),b
  5017  0BAA'                    l5052:
  5018                           
  5019                           ; BSR set to: 0
  5020  0BAA' 0E00'              	movlw	low _dbuf
  5021  0BAC' 2500'              	addwf	efgtoa@i& (0+255),w,b
  5022  0BAE' 6ED9               	movwf	fsr2l,c
  5023  0BB0' 0E00'              	movlw	high _dbuf
  5024  0BB2' 2100'              	addwfc	(efgtoa@i+1)& (0+255),w,b
  5025  0BB4' 6EDA               	movwf	fsr2h,c
  5026  0BB6' C006' FFDF         	movff	_efgtoa$2751,indf2
  5027  0BBA'                    
  5028                           ; BSR set to: 0
  5029                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 516:         --w;
  5030  0BBA' 0700'              	decf	efgtoa@w& (0+255),f,b
  5031  0BBC' A0D8               	btfss	status,0,c
  5032  0BBE' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  5033  0BC0'                    
  5034                           ; BSR set to: 0
  5035                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 518:         dbuf
      +                          [i] = (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
  5036  0BC0' 0700'              	decf	efgtoa@i& (0+255),f,b
  5037  0BC2' A0D8               	btfss	status,0,c
  5038  0BC4' 0700'              	decf	(efgtoa@i+1)& (0+255),f,b
  5039  0BC6'                    
  5040                           ; BSR set to: 0
  5041  0BC6' 0EBF               	movlw	191
  5042  0BC8' 6E00'              	movwf	??_efgtoa^0,c
  5043  0BCA' 0EFF               	movlw	255
  5044  0BCC' 6E00'              	movwf	(??_efgtoa+1)^0,c
  5045  0BCE' 5000'              	movf	efgtoa@c^0,w,c
  5046  0BD0' 6E00'              	movwf	(??_efgtoa+2)^0,c
  5047  0BD2' 6A00'              	clrf	(??_efgtoa+3)^0,c
  5048  0BD4' 5000'              	movf	??_efgtoa^0,w,c
  5049  0BD6' 2600'              	addwf	(??_efgtoa+2)^0,f,c
  5050  0BD8' 5000'              	movf	(??_efgtoa+1)^0,w,c
  5051  0BDA' 2200'              	addwfc	(??_efgtoa+3)^0,f,c
  5052  0BDC' 5000'              	movf	(??_efgtoa+3)^0,w,c
  5053  0BDE' E10A               	bnz	u5920
  5054  0BE0' 0E1A               	movlw	26
  5055  0BE2' 5C00'              	subwf	(??_efgtoa+2)^0,w,c
  5056  0BE4' A0D8               	btfss	status,0,c
  5057  0BE6' EF00' F000'        	goto	u5921
  5058  0BEA' EF00' F000'        	goto	u5920
  5059  0BEE'                    u5921:
  5060  0BEE' 0E01               	movlw	1
  5061  0BF0' EF00' F000'        	goto	u5930
  5062  0BF4'                    u5920:
  5063  0BF4' 0E00               	movlw	0
  5064  0BF6'                    u5930:
  5065  0BF6' 6F00'              	movwf	_efgtoa$2753& (0+255),b
  5066  0BF8' 6B00'              	clrf	(_efgtoa$2753+1)& (0+255),b
  5067  0BFA'                    
  5068                           ; BSR set to: 0
  5069  0BFA' 5100'              	movf	_efgtoa$2753& (0+255),w,b
  5070  0BFC' 1100'              	iorwf	(_efgtoa$2753+1)& (0+255),w,b
  5071  0BFE' A4D8               	btfss	status,2,c
  5072  0C00' EF00' F000'        	goto	u5941
  5073  0C04' EF00' F000'        	goto	u5940
  5074  0C08'                    u5941:
  5075  0C08' EF00' F000'        	goto	l5066
  5076  0C0C'                    u5940:
  5077  0C0C'                    
  5078                           ; BSR set to: 0
  5079  0C0C' 0E00               	movlw	0
  5080  0C0E' 6F00'              	movwf	(_efgtoa$2752+1)& (0+255),b
  5081  0C10' 0E65               	movlw	101
  5082  0C12' 6F00'              	movwf	_efgtoa$2752& (0+255),b
  5083  0C14' EF00' F000'        	goto	l5068
  5084  0C18'                    l5066:
  5085                           
  5086                           ; BSR set to: 0
  5087  0C18' 0E00               	movlw	0
  5088  0C1A' 6F00'              	movwf	(_efgtoa$2752+1)& (0+255),b
  5089  0C1C' 0E45               	movlw	69
  5090  0C1E' 6F00'              	movwf	_efgtoa$2752& (0+255),b
  5091  0C20'                    l5068:
  5092                           
  5093                           ; BSR set to: 0
  5094  0C20' 0E00'              	movlw	low _dbuf
  5095  0C22' 2500'              	addwf	efgtoa@i& (0+255),w,b
  5096  0C24' 6ED9               	movwf	fsr2l,c
  5097  0C26' 0E00'              	movlw	high _dbuf
  5098  0C28' 2100'              	addwfc	(efgtoa@i+1)& (0+255),w,b
  5099  0C2A' 6EDA               	movwf	fsr2h,c
  5100  0C2C' C008' FFDF         	movff	_efgtoa$2752,indf2
  5101  0C30'                    
  5102                           ; BSR set to: 0
  5103                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 519:         --w;
  5104  0C30' 0700'              	decf	efgtoa@w& (0+255),f,b
  5105  0C32' A0D8               	btfss	status,0,c
  5106  0C34' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  5107  0C36'                    
  5108                           ; BSR set to: 0
  5109                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 520:         strc
      +                          py(&dbuf[n], &dbuf[i]);
  5110  0C36' 0E00'              	movlw	low _dbuf
  5111  0C38' 2500'              	addwf	efgtoa@n& (0+255),w,b
  5112  0C3A' 6E00'              	movwf	strcpy@dest^0,c
  5113  0C3C' 0E00'              	movlw	high _dbuf
  5114  0C3E' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  5115  0C40' 6E00'              	movwf	(strcpy@dest+1)^0,c
  5116  0C42' 0E00'              	movlw	low _dbuf
  5117  0C44' 2500'              	addwf	efgtoa@i& (0+255),w,b
  5118  0C46' 6E00'              	movwf	strcpy@src^0,c
  5119  0C48' 0E00'              	movlw	high _dbuf
  5120  0C4A' 2100'              	addwfc	(efgtoa@i+1)& (0+255),w,b
  5121  0C4C' 6E00'              	movwf	(strcpy@src+1)^0,c
  5122  0C4E' EC00' F000'        	call	_strcpy	;wreg free
  5123  0C52' EF00' F000'        	goto	l4814
  5124  0C56'                    l1380:
  5125  0C56' 0012               	return		;funcret
  5126  0C58'                    __end_of_efgtoa:
  5127                           	callstack 0
  5128                           
  5129 ;; *************** function _tolower *****************
  5130 ;; Defined at:
  5131 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\tolower.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  c               2    6[COMRAM] int 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;		None
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  2    6[COMRAM] int 
  5138 ;; Registers used:
  5139 ;;		wreg, status,2, status,0
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5147 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5148 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;Total ram usage:        8 bytes
  5150 ;; Hardware stack levels used: 1
  5151 ;; Hardware stack levels required when called: 1
  5152 ;; This function calls:
  5153 ;;		_isupper
  5154 ;; This function is called by:
  5155 ;;		_efgtoa
  5156 ;;		_vfpfcnvrt
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text13
  5161  0000'                    __ptext13:
  5162                           	callstack 0
  5163  0000'                    _tolower:
  5164                           	callstack 25
  5165  0000' 0EBF               	movlw	191
  5166  0002' 6E00'              	movwf	??_tolower^0,c
  5167  0004' 0EFF               	movlw	255
  5168  0006' 6E00'              	movwf	(??_tolower+1)^0,c
  5169  0008' C006' F00A'        	movff	tolower@c,??_tolower+2
  5170  000C' C007' F00B'        	movff	tolower@c+1,??_tolower+3
  5171  0010' 5000'              	movf	??_tolower^0,w,c
  5172  0012' 2600'              	addwf	(??_tolower+2)^0,f,c
  5173  0014' 5000'              	movf	(??_tolower+1)^0,w,c
  5174  0016' 2200'              	addwfc	(??_tolower+3)^0,f,c
  5175  0018' 5000'              	movf	(??_tolower+3)^0,w,c
  5176  001A' E10A               	bnz	u5070
  5177  001C' 0E1A               	movlw	26
  5178  001E' 5C00'              	subwf	(??_tolower+2)^0,w,c
  5179  0020' A0D8               	btfss	status,0,c
  5180  0022' EF00' F000'        	goto	u5071
  5181  0026' EF00' F000'        	goto	u5070
  5182  002A'                    u5071:
  5183  002A' 0E01               	movlw	1
  5184  002C' EF00' F000'        	goto	u5080
  5185  0030'                    u5070:
  5186  0030' 0E00               	movlw	0
  5187  0032'                    u5080:
  5188  0032' 6E00'              	movwf	_tolower$2903^0,c
  5189  0034' 6A00'              	clrf	(_tolower$2903+1)^0,c
  5190  0036' 5000'              	movf	_tolower$2903^0,w,c
  5191  0038' 1000'              	iorwf	(_tolower$2903+1)^0,w,c
  5192  003A' B4D8               	btfsc	status,2,c
  5193  003C' EF00' F000'        	goto	u5091
  5194  0040' EF00' F000'        	goto	u5090
  5195  0044'                    u5091:
  5196  0044' EF00' F000'        	goto	l1620
  5197  0048'                    u5090:
  5198  0048' 0E20               	movlw	32
  5199  004A' 1000'              	iorwf	tolower@c^0,w,c
  5200  004C' 6E00'              	movwf	?_tolower^0,c
  5201  004E' 5000'              	movf	(tolower@c+1)^0,w,c
  5202  0050' 6E00'              	movwf	(?_tolower+1)^0,c
  5203  0052' EF00' F000'        	goto	l1625
  5204  0056'                    l1620:
  5205  0056' C006' F006'        	movff	tolower@c,?_tolower
  5206  005A' C007' F007'        	movff	tolower@c+1,?_tolower+1
  5207  005E'                    l1625:
  5208  005E' 0012               	return		;funcret
  5209  0060'                    __end_of_tolower:
  5210                           	callstack 0
  5211                           
  5212 ;; *************** function _isupper *****************
  5213 ;; Defined at:
  5214 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isupper.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  c               2    0[COMRAM] int 
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;		None
  5219 ;; Return value:  Size  Location     Type
  5220 ;;                  2    0[COMRAM] int 
  5221 ;; Registers used:
  5222 ;;		wreg, status,2, status,0
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5228 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5230 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5231 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5232 ;;Total ram usage:        6 bytes
  5233 ;; Hardware stack levels used: 1
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_efgtoa
  5238 ;;		_vfpfcnvrt
  5239 ;;		_tolower
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text14
  5244  0000'                    __ptext14:
  5245                           	callstack 0
  5246  0000'                    _isupper:
  5247                           	callstack 25
  5248  0000' 0EBF               	movlw	191
  5249  0002' 6E00'              	movwf	??_isupper^0,c
  5250  0004' 0EFF               	movlw	255
  5251  0006' 6E00'              	movwf	(??_isupper+1)^0,c
  5252  0008' C000' F004'        	movff	isupper@c,??_isupper+2
  5253  000C' C001' F005'        	movff	isupper@c+1,??_isupper+3
  5254  0010' 5000'              	movf	??_isupper^0,w,c
  5255  0012' 2600'              	addwf	(??_isupper+2)^0,f,c
  5256  0014' 5000'              	movf	(??_isupper+1)^0,w,c
  5257  0016' 2200'              	addwfc	(??_isupper+3)^0,f,c
  5258  0018' 5000'              	movf	(??_isupper+3)^0,w,c
  5259  001A' E10A               	bnz	u4080
  5260  001C' 0E1A               	movlw	26
  5261  001E' 5C00'              	subwf	(??_isupper+2)^0,w,c
  5262  0020' A0D8               	btfss	status,0,c
  5263  0022' EF00' F000'        	goto	u4081
  5264  0026' EF00' F000'        	goto	u4080
  5265  002A'                    u4081:
  5266  002A' 0E01               	movlw	1
  5267  002C' EF00' F000'        	goto	u4090
  5268  0030'                    u4080:
  5269  0030' 0E00               	movlw	0
  5270  0032'                    u4090:
  5271  0032' 6E00'              	movwf	?_isupper^0,c
  5272  0034' 6A00'              	clrf	(?_isupper+1)^0,c
  5273  0036' 0012               	return		;funcret
  5274  0038'                    __end_of_isupper:
  5275                           	callstack 0
  5276                           
  5277 ;; *************** function _strcpy *****************
  5278 ;; Defined at:
  5279 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strcpy.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  dest            2    0[COMRAM] PTR unsigned char 
  5282 ;;		 -> dbuf(80), 
  5283 ;;  src             2    2[COMRAM] PTR const unsigned char 
  5284 ;;		 -> STR_7(4), STR_6(4), STR_3(4), STR_2(4), 
  5285 ;;		 -> dbuf(80), 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  d               2    8[COMRAM] PTR unsigned char 
  5288 ;;		 -> dbuf(80), 
  5289 ;;  s               2    6[COMRAM] PTR const unsigned char 
  5290 ;;		 -> STR_7(4), STR_6(4), STR_3(4), STR_2(4), 
  5291 ;;		 -> dbuf(80), 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  2    0[COMRAM] PTR unsigned char 
  5294 ;; Registers used:
  5295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5302 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5303 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5304 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5305 ;;Total ram usage:       10 bytes
  5306 ;; Hardware stack levels used: 1
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_efgtoa
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text15
  5315  0000'                    __ptext15:
  5316                           	callstack 0
  5317  0000'                    _strcpy:
  5318                           	callstack 25
  5319  0000' C002' F006'        	movff	strcpy@src,strcpy@s
  5320  0004' C003' F007'        	movff	strcpy@src+1,strcpy@s+1
  5321  0008' C000' F008'        	movff	strcpy@dest,strcpy@d
  5322  000C' C001' F009'        	movff	strcpy@dest+1,strcpy@d+1
  5323  0010'                    l4648:
  5324  0010' 5000'              	movf	strcpy@s^0,w,c
  5325  0012' 6E00'              	movwf	??_strcpy^0,c
  5326  0014' 5000'              	movf	(strcpy@s+1)^0,w,c
  5327  0016' 6E00'              	movwf	(??_strcpy+1)^0,c
  5328  0018' 4A00'              	infsnz	strcpy@s^0,f,c
  5329  001A' 2A00'              	incf	(strcpy@s+1)^0,f,c
  5330  001C' C004' FFF6         	movff	??_strcpy,tblptrl
  5331  0020' C005' FFF7         	movff	??_strcpy+1,tblptrh
  5332  0024' 0E00'              	movlw	low (__smallconst shr (0+16))
  5333  0026' 6EF8               	movwf	tblptru,c
  5334  0028' C008' FFD9         	movff	strcpy@d,fsr2l
  5335  002C' C009' FFDA         	movff	strcpy@d+1,fsr2h
  5336  0030' 4A00'              	infsnz	strcpy@d^0,f,c
  5337  0032' 2A00'              	incf	(strcpy@d+1)^0,f,c
  5338  0034' 0EFF'              	movlw	(high __ramtop+-1)
  5339  0036' 64F7               	cpfsgt	tblptrh,c
  5340  0038' D003               	bra	u5057
  5341  003A' 0008               	tblrd		*
  5342  003C' 50F5               	movf	tablat,w,c
  5343  003E' D005               	bra	u5050
  5344  0040'                    u5057:
  5345  0040' CFF6 FFE9          	movff	tblptrl,fsr0l
  5346  0044' CFF7 FFEA          	movff	tblptrh,fsr0h
  5347  0048' 50EF               	movf	indf0,w,c
  5348  004A'                    u5050:
  5349  004A' 6EDF               	movwf	indf2,c
  5350  004C' 50DF               	movf	indf2,w,c
  5351  004E' A4D8               	btfss	status,2,c
  5352  0050' EF00' F000'        	goto	u5061
  5353  0054' EF00' F000'        	goto	u5060
  5354  0058'                    u5061:
  5355  0058' EF00' F000'        	goto	l4648
  5356  005C'                    u5060:
  5357  005C' 0012               	return		;funcret
  5358  005E'                    __end_of_strcpy:
  5359                           	callstack 0
  5360                           
  5361 ;; *************** function _floorf *****************
  5362 ;; Defined at:
  5363 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\floorf.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  x               4   39[COMRAM] float 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  u               4   55[COMRAM] struct .
  5368 ;;  m               4   49[COMRAM] unsigned long 
  5369 ;;  e               2   53[COMRAM] int 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  4   39[COMRAM] float 
  5372 ;; Registers used:
  5373 ;;		wreg, status,2, status,0
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5380 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5381 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5382 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5383 ;;Total ram usage:       20 bytes
  5384 ;; Hardware stack levels used: 1
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_efgtoa
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text16
  5393  0000'                    __ptext16:
  5394                           	callstack 0
  5395  0000'                    _floorf:
  5396                           	callstack 25
  5397  0000' C014' F037'        	movff	floorf@F527,floorf@u
  5398  0004' C015' F038'        	movff	floorf@F527+1,floorf@u+1
  5399  0008' C016' F039'        	movff	floorf@F527+2,floorf@u+2
  5400  000C' C017' F03A'        	movff	floorf@F527+3,floorf@u+3
  5401  0010' C027' F037'        	movff	floorf@x,floorf@u
  5402  0014' C028' F038'        	movff	floorf@x+1,floorf@u+1
  5403  0018' C029' F039'        	movff	floorf@x+2,floorf@u+2
  5404  001C' C02A' F03A'        	movff	floorf@x+3,floorf@u+3
  5405  0020' 0E81               	movlw	129
  5406  0022' 6E00'              	movwf	??_floorf^0,c
  5407  0024' 0EFF               	movlw	255
  5408  0026' 6E00'              	movwf	(??_floorf+1)^0,c
  5409  0028' C037' F02D'        	movff	floorf@u,??_floorf+2
  5410  002C' C038' F02E'        	movff	floorf@u+1,??_floorf+3
  5411  0030' C039' F02F'        	movff	floorf@u+2,??_floorf+4
  5412  0034' C03A' F030'        	movff	floorf@u+3,??_floorf+5
  5413  0038' 0E18               	movlw	24
  5414  003A' EF00' F000'        	goto	u5100
  5415  003E'                    u5105:
  5416  003E' 90D8               	bcf	status,0,c
  5417  0040' 3200'              	rrcf	(??_floorf+5)^0,f,c
  5418  0042' 3200'              	rrcf	(??_floorf+4)^0,f,c
  5419  0044' 3200'              	rrcf	(??_floorf+3)^0,f,c
  5420  0046' 3200'              	rrcf	(??_floorf+2)^0,f,c
  5421  0048'                    u5100:
  5422  0048' 2EE8               	decfsz	wreg,f,c
  5423  004A' EF00' F000'        	goto	u5105
  5424  004E' 5000'              	movf	(??_floorf+2)^0,w,c
  5425  0050' 2400'              	addwf	??_floorf^0,w,c
  5426  0052' 6E00'              	movwf	floorf@e^0,c
  5427  0054' 0E00               	movlw	0
  5428  0056' 2000'              	addwfc	(??_floorf+1)^0,w,c
  5429  0058' 6E00'              	movwf	(floorf@e+1)^0,c
  5430  005A' BE00'              	btfsc	(floorf@e+1)^0,7,c
  5431  005C' EF00' F000'        	goto	u5111
  5432  0060' 5000'              	movf	(floorf@e+1)^0,w,c
  5433  0062' E109               	bnz	u5110
  5434  0064' 0E17               	movlw	23
  5435  0066' 5C00'              	subwf	floorf@e^0,w,c
  5436  0068' A0D8               	btfss	status,0,c
  5437  006A' EF00' F000'        	goto	u5111
  5438  006E' EF00' F000'        	goto	u5110
  5439  0072'                    u5111:
  5440  0072' EF00' F000'        	goto	l4666
  5441  0076'                    u5110:
  5442  0076'                    l4664:
  5443  0076' C027' F027'        	movff	floorf@x,?_floorf
  5444  007A' C028' F028'        	movff	floorf@x+1,?_floorf+1
  5445  007E' C029' F029'        	movff	floorf@x+2,?_floorf+2
  5446  0082' C02A' F02A'        	movff	floorf@x+3,?_floorf+3
  5447  0086' EF00' F000'        	goto	l1544
  5448  008A'                    l4666:
  5449  008A' BE00'              	btfsc	(floorf@e+1)^0,7,c
  5450  008C' EF00' F000'        	goto	u5121
  5451  0090' EF00' F000'        	goto	u5120
  5452  0094'                    u5121:
  5453  0094' EF00' F000'        	goto	l4676
  5454  0098'                    u5120:
  5455  0098' C035' F02B'        	movff	floorf@e,??_floorf
  5456  009C' 0EFF               	movlw	255
  5457  009E' 6E00'              	movwf	(??_floorf+1)^0,c
  5458  00A0' 0EFF               	movlw	255
  5459  00A2' 6E00'              	movwf	(??_floorf+2)^0,c
  5460  00A4' 0E7F               	movlw	127
  5461  00A6' 6E00'              	movwf	(??_floorf+3)^0,c
  5462  00A8' 0E00               	movlw	0
  5463  00AA' 6E00'              	movwf	(??_floorf+4)^0,c
  5464  00AC'                    u5135:
  5465  00AC' 6600'              	tstfsz	??_floorf^0,c
  5466  00AE' EF00' F000'        	goto	u5136
  5467  00B2' EF00' F000'        	goto	u5137
  5468  00B6'                    u5136:
  5469  00B6' 3400'              	rlcf	(??_floorf+4)^0,w,c
  5470  00B8' 3200'              	rrcf	(??_floorf+4)^0,f,c
  5471  00BA' 3200'              	rrcf	(??_floorf+3)^0,f,c
  5472  00BC' 3200'              	rrcf	(??_floorf+2)^0,f,c
  5473  00BE' 3200'              	rrcf	(??_floorf+1)^0,f,c
  5474  00C0' 2E00'              	decfsz	??_floorf^0,f,c
  5475  00C2' EF00' F000'        	goto	u5135
  5476  00C6'                    u5137:
  5477  00C6' C02C' F031'        	movff	??_floorf+1,floorf@m
  5478  00CA' C02D' F032'        	movff	??_floorf+2,floorf@m+1
  5479  00CE' C02E' F033'        	movff	??_floorf+3,floorf@m+2
  5480  00D2' C02F' F034'        	movff	??_floorf+4,floorf@m+3
  5481  00D6' 5000'              	movf	floorf@m^0,w,c
  5482  00D8' 1400'              	andwf	floorf@u^0,w,c
  5483  00DA' 6E00'              	movwf	??_floorf^0,c
  5484  00DC' 5000'              	movf	(floorf@m+1)^0,w,c
  5485  00DE' 1400'              	andwf	(floorf@u+1)^0,w,c
  5486  00E0' 6E00'              	movwf	(??_floorf+1)^0,c
  5487  00E2' 5000'              	movf	(floorf@m+2)^0,w,c
  5488  00E4' 1400'              	andwf	(floorf@u+2)^0,w,c
  5489  00E6' 6E00'              	movwf	(??_floorf+2)^0,c
  5490  00E8' 5000'              	movf	(floorf@m+3)^0,w,c
  5491  00EA' 1400'              	andwf	(floorf@u+3)^0,w,c
  5492  00EC' 6E00'              	movwf	(??_floorf+3)^0,c
  5493  00EE' 5000'              	movf	??_floorf^0,w,c
  5494  00F0' 1000'              	iorwf	(??_floorf+1)^0,w,c
  5495  00F2' 1000'              	iorwf	(??_floorf+2)^0,w,c
  5496  00F4' 1000'              	iorwf	(??_floorf+3)^0,w,c
  5497  00F6' A4D8               	btfss	status,2,c
  5498  00F8' EF00' F000'        	goto	u5141
  5499  00FC' EF00' F000'        	goto	u5140
  5500  0100'                    u5141:
  5501  0100' EF00' F000'        	goto	l4672
  5502  0104'                    u5140:
  5503  0104' EF00' F000'        	goto	l4664
  5504  0108'                    l4672:
  5505  0108' C037' F02B'        	movff	floorf@u,??_floorf
  5506  010C' C038' F02C'        	movff	floorf@u+1,??_floorf+1
  5507  0110' C039' F02D'        	movff	floorf@u+2,??_floorf+2
  5508  0114' C03A' F02E'        	movff	floorf@u+3,??_floorf+3
  5509  0118' 0E20               	movlw	32
  5510  011A' EF00' F000'        	goto	u5150
  5511  011E'                    u5155:
  5512  011E' 90D8               	bcf	status,0,c
  5513  0120' 3200'              	rrcf	(??_floorf+3)^0,f,c
  5514  0122' 3200'              	rrcf	(??_floorf+2)^0,f,c
  5515  0124' 3200'              	rrcf	(??_floorf+1)^0,f,c
  5516  0126' 3200'              	rrcf	??_floorf^0,f,c
  5517  0128'                    u5150:
  5518  0128' 2EE8               	decfsz	wreg,f,c
  5519  012A' EF00' F000'        	goto	u5155
  5520  012E' 5000'              	movf	??_floorf^0,w,c
  5521  0130' 1000'              	iorwf	(??_floorf+1)^0,w,c
  5522  0132' 1000'              	iorwf	(??_floorf+2)^0,w,c
  5523  0134' 1000'              	iorwf	(??_floorf+3)^0,w,c
  5524  0136' B4D8               	btfsc	status,2,c
  5525  0138' EF00' F000'        	goto	u5161
  5526  013C' EF00' F000'        	goto	u5160
  5527  0140'                    u5161:
  5528  0140' EF00' F000'        	goto	l1547
  5529  0144'                    u5160:
  5530  0144' 5000'              	movf	floorf@m^0,w,c
  5531  0146' 2600'              	addwf	floorf@u^0,f,c
  5532  0148' 5000'              	movf	(floorf@m+1)^0,w,c
  5533  014A' 2200'              	addwfc	(floorf@u+1)^0,f,c
  5534  014C' 5000'              	movf	(floorf@m+2)^0,w,c
  5535  014E' 2200'              	addwfc	(floorf@u+2)^0,f,c
  5536  0150' 5000'              	movf	(floorf@m+3)^0,w,c
  5537  0152' 2200'              	addwfc	(floorf@u+3)^0,f,c
  5538  0154'                    l1547:
  5539  0154' 1C00'              	comf	floorf@m^0,w,c
  5540  0156' 6E00'              	movwf	??_floorf^0,c
  5541  0158' 1C00'              	comf	(floorf@m+1)^0,w,c
  5542  015A' 6E00'              	movwf	(??_floorf+1)^0,c
  5543  015C' 1C00'              	comf	(floorf@m+2)^0,w,c
  5544  015E' 6E00'              	movwf	(??_floorf+2)^0,c
  5545  0160' 1C00'              	comf	(floorf@m+3)^0,w,c
  5546  0162' 6E00'              	movwf	(??_floorf+3)^0,c
  5547  0164' 5000'              	movf	??_floorf^0,w,c
  5548  0166' 1600'              	andwf	floorf@u^0,f,c
  5549  0168' 5000'              	movf	(??_floorf+1)^0,w,c
  5550  016A' 1600'              	andwf	(floorf@u+1)^0,f,c
  5551  016C' 5000'              	movf	(??_floorf+2)^0,w,c
  5552  016E' 1600'              	andwf	(floorf@u+2)^0,f,c
  5553  0170' 5000'              	movf	(??_floorf+3)^0,w,c
  5554  0172' 1600'              	andwf	(floorf@u+3)^0,f,c
  5555  0174' EF00' F000'        	goto	l4684
  5556  0178'                    l4676:
  5557  0178' C037' F02B'        	movff	floorf@u,??_floorf
  5558  017C' C038' F02C'        	movff	floorf@u+1,??_floorf+1
  5559  0180' C039' F02D'        	movff	floorf@u+2,??_floorf+2
  5560  0184' C03A' F02E'        	movff	floorf@u+3,??_floorf+3
  5561  0188' 0E20               	movlw	32
  5562  018A' EF00' F000'        	goto	u5170
  5563  018E'                    u5175:
  5564  018E' 90D8               	bcf	status,0,c
  5565  0190' 3200'              	rrcf	(??_floorf+3)^0,f,c
  5566  0192' 3200'              	rrcf	(??_floorf+2)^0,f,c
  5567  0194' 3200'              	rrcf	(??_floorf+1)^0,f,c
  5568  0196' 3200'              	rrcf	??_floorf^0,f,c
  5569  0198'                    u5170:
  5570  0198' 2EE8               	decfsz	wreg,f,c
  5571  019A' EF00' F000'        	goto	u5175
  5572  019E' 5000'              	movf	??_floorf^0,w,c
  5573  01A0' 1000'              	iorwf	(??_floorf+1)^0,w,c
  5574  01A2' 1000'              	iorwf	(??_floorf+2)^0,w,c
  5575  01A4' 1000'              	iorwf	(??_floorf+3)^0,w,c
  5576  01A6' A4D8               	btfss	status,2,c
  5577  01A8' EF00' F000'        	goto	u5181
  5578  01AC' EF00' F000'        	goto	u5180
  5579  01B0'                    u5181:
  5580  01B0' EF00' F000'        	goto	l4680
  5581  01B4'                    u5180:
  5582  01B4' 0E00               	movlw	0
  5583  01B6' 6E00'              	movwf	floorf@u^0,c
  5584  01B8' 0E00               	movlw	0
  5585  01BA' 6E00'              	movwf	(floorf@u+1)^0,c
  5586  01BC' 0E00               	movlw	0
  5587  01BE' 6E00'              	movwf	(floorf@u+2)^0,c
  5588  01C0' 0E00               	movlw	0
  5589  01C2' 6E00'              	movwf	(floorf@u+3)^0,c
  5590  01C4' EF00' F000'        	goto	l4684
  5591  01C8'                    l4680:
  5592  01C8' 90D8               	bcf	status,0,c
  5593  01CA' 3400'              	rlcf	floorf@u^0,w,c
  5594  01CC' 6E00'              	movwf	??_floorf^0,c
  5595  01CE' 3400'              	rlcf	(floorf@u+1)^0,w,c
  5596  01D0' 6E00'              	movwf	(??_floorf+1)^0,c
  5597  01D2' 3400'              	rlcf	(floorf@u+2)^0,w,c
  5598  01D4' 6E00'              	movwf	(??_floorf+2)^0,c
  5599  01D6' 3400'              	rlcf	(floorf@u+3)^0,w,c
  5600  01D8' 6E00'              	movwf	(??_floorf+3)^0,c
  5601  01DA' 5000'              	movf	??_floorf^0,w,c
  5602  01DC' 1000'              	iorwf	(??_floorf+1)^0,w,c
  5603  01DE' 1000'              	iorwf	(??_floorf+2)^0,w,c
  5604  01E0' 1000'              	iorwf	(??_floorf+3)^0,w,c
  5605  01E2' B4D8               	btfsc	status,2,c
  5606  01E4' EF00' F000'        	goto	u5191
  5607  01E8' EF00' F000'        	goto	u5190
  5608  01EC'                    u5191:
  5609  01EC' EF00' F000'        	goto	l4684
  5610  01F0'                    u5190:
  5611  01F0' 0E00               	movlw	0
  5612  01F2' 6E00'              	movwf	floorf@u^0,c
  5613  01F4' 0E00               	movlw	0
  5614  01F6' 6E00'              	movwf	(floorf@u+1)^0,c
  5615  01F8' 0E80               	movlw	128
  5616  01FA' 6E00'              	movwf	(floorf@u+2)^0,c
  5617  01FC' 0EBF               	movlw	191
  5618  01FE' 6E00'              	movwf	(floorf@u+3)^0,c
  5619  0200'                    l4684:
  5620  0200' C037' F027'        	movff	floorf@u,?_floorf
  5621  0204' C038' F028'        	movff	floorf@u+1,?_floorf+1
  5622  0208' C039' F029'        	movff	floorf@u+2,?_floorf+2
  5623  020C' C03A' F02A'        	movff	floorf@u+3,?_floorf+3
  5624  0210'                    l1544:
  5625  0210' 0012               	return		;funcret
  5626  0212'                    __end_of_floorf:
  5627                           	callstack 0
  5628                           
  5629 ;; *************** function ___fpclassifyf *****************
  5630 ;; Defined at:
  5631 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__fpclassifyf.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  x               4    0[COMRAM] float 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  u               4   10[COMRAM] struct .
  5636 ;;  e               2    8[COMRAM] int 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  2    0[COMRAM] int 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5646 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5647 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5648 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5649 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5650 ;;Total ram usage:       14 bytes
  5651 ;; Hardware stack levels used: 1
  5652 ;; This function calls:
  5653 ;;		Nothing
  5654 ;; This function is called by:
  5655 ;;		_efgtoa
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text17
  5660  0000'                    __ptext17:
  5661                           	callstack 0
  5662  0000'                    ___fpclassifyf:
  5663                           	callstack 25
  5664  0000' C018' F00A'        	movff	___fpclassifyf@F465,___fpclassifyf@u
  5665  0004' C019' F00B'        	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  5666  0008' C01A' F00C'        	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  5667  000C' C01B' F00D'        	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  5668  0010' C000' F00A'        	movff	___fpclassifyf@x,___fpclassifyf@u
  5669  0014' C001' F00B'        	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  5670  0018' C002' F00C'        	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  5671  001C' C003' F00D'        	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  5672  0020' C00A' F004'        	movff	___fpclassifyf@u,??___fpclassifyf
  5673  0024' C00B' F005'        	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  5674  0028' C00C' F006'        	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  5675  002C' C00D' F007'        	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  5676  0030' 0E18               	movlw	24
  5677  0032' EF00' F000'        	goto	u4980
  5678  0036'                    u4985:
  5679  0036' 90D8               	bcf	status,0,c
  5680  0038' 3200'              	rrcf	(??___fpclassifyf+3)^0,f,c
  5681  003A' 3200'              	rrcf	(??___fpclassifyf+2)^0,f,c
  5682  003C' 3200'              	rrcf	(??___fpclassifyf+1)^0,f,c
  5683  003E' 3200'              	rrcf	??___fpclassifyf^0,f,c
  5684  0040'                    u4980:
  5685  0040' 2EE8               	decfsz	wreg,f,c
  5686  0042' EF00' F000'        	goto	u4985
  5687  0046' 5000'              	movf	??___fpclassifyf^0,w,c
  5688  0048' 6E00'              	movwf	___fpclassifyf@e^0,c
  5689  004A' 6A00'              	clrf	(___fpclassifyf@e+1)^0,c
  5690  004C' 5000'              	movf	___fpclassifyf@e^0,w,c
  5691  004E' 1000'              	iorwf	(___fpclassifyf@e+1)^0,w,c
  5692  0050' A4D8               	btfss	status,2,c
  5693  0052' EF00' F000'        	goto	u4991
  5694  0056' EF00' F000'        	goto	u4990
  5695  005A'                    u4991:
  5696  005A' EF00' F000'        	goto	l4636
  5697  005E'                    u4990:
  5698  005E' 90D8               	bcf	status,0,c
  5699  0060' 3400'              	rlcf	___fpclassifyf@u^0,w,c
  5700  0062' 6E00'              	movwf	??___fpclassifyf^0,c
  5701  0064' 3400'              	rlcf	(___fpclassifyf@u+1)^0,w,c
  5702  0066' 6E00'              	movwf	(??___fpclassifyf+1)^0,c
  5703  0068' 3400'              	rlcf	(___fpclassifyf@u+2)^0,w,c
  5704  006A' 6E00'              	movwf	(??___fpclassifyf+2)^0,c
  5705  006C' 3400'              	rlcf	(___fpclassifyf@u+3)^0,w,c
  5706  006E' 6E00'              	movwf	(??___fpclassifyf+3)^0,c
  5707  0070' 5000'              	movf	??___fpclassifyf^0,w,c
  5708  0072' 1000'              	iorwf	(??___fpclassifyf+1)^0,w,c
  5709  0074' 1000'              	iorwf	(??___fpclassifyf+2)^0,w,c
  5710  0076' 1000'              	iorwf	(??___fpclassifyf+3)^0,w,c
  5711  0078' A4D8               	btfss	status,2,c
  5712  007A' EF00' F000'        	goto	u5001
  5713  007E' EF00' F000'        	goto	u5000
  5714  0082'                    u5001:
  5715  0082' EF00' F000'        	goto	l4632
  5716  0086'                    u5000:
  5717  0086' 0E00               	movlw	0
  5718  0088' 6E00'              	movwf	(?___fpclassifyf+1)^0,c
  5719  008A' 0E02               	movlw	2
  5720  008C' 6E00'              	movwf	?___fpclassifyf^0,c
  5721  008E' EF00' F000'        	goto	l1499
  5722  0092'                    l4632:
  5723  0092' 0E00               	movlw	0
  5724  0094' 6E00'              	movwf	(?___fpclassifyf+1)^0,c
  5725  0096' 0E03               	movlw	3
  5726  0098' 6E00'              	movwf	?___fpclassifyf^0,c
  5727  009A' EF00' F000'        	goto	l1499
  5728  009E'                    l4636:
  5729  009E' 2800'              	incf	___fpclassifyf@e^0,w,c
  5730  00A0' 1000'              	iorwf	(___fpclassifyf@e+1)^0,w,c
  5731  00A2' A4D8               	btfss	status,2,c
  5732  00A4' EF00' F000'        	goto	u5011
  5733  00A8' EF00' F000'        	goto	u5010
  5734  00AC'                    u5011:
  5735  00AC' EF00' F000'        	goto	l4642
  5736  00B0'                    u5010:
  5737  00B0' C00A' F004'        	movff	___fpclassifyf@u,??___fpclassifyf
  5738  00B4' C00B' F005'        	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  5739  00B8' C00C' F006'        	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  5740  00BC' C00D' F007'        	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  5741  00C0' 0E09               	movlw	9
  5742  00C2'                    u5025:
  5743  00C2' 90D8               	bcf	status,0,c
  5744  00C4' 3600'              	rlcf	??___fpclassifyf^0,f,c
  5745  00C6' 3600'              	rlcf	(??___fpclassifyf+1)^0,f,c
  5746  00C8' 3600'              	rlcf	(??___fpclassifyf+2)^0,f,c
  5747  00CA' 3600'              	rlcf	(??___fpclassifyf+3)^0,f,c
  5748  00CC' 2EE8               	decfsz	wreg,f,c
  5749  00CE' EF00' F000'        	goto	u5025
  5750  00D2' 5000'              	movf	??___fpclassifyf^0,w,c
  5751  00D4' 1000'              	iorwf	(??___fpclassifyf+1)^0,w,c
  5752  00D6' 1000'              	iorwf	(??___fpclassifyf+2)^0,w,c
  5753  00D8' 1000'              	iorwf	(??___fpclassifyf+3)^0,w,c
  5754  00DA' B4D8               	btfsc	status,2,c
  5755  00DC' EF00' F000'        	goto	u5031
  5756  00E0' EF00' F000'        	goto	u5030
  5757  00E4'                    u5031:
  5758  00E4' 0E01               	movlw	1
  5759  00E6' EF00' F000'        	goto	u5040
  5760  00EA'                    u5030:
  5761  00EA' 0E00               	movlw	0
  5762  00EC'                    u5040:
  5763  00EC' 6E00'              	movwf	?___fpclassifyf^0,c
  5764  00EE' 6A00'              	clrf	(?___fpclassifyf+1)^0,c
  5765  00F0' EF00' F000'        	goto	l1499
  5766  00F4'                    l4642:
  5767  00F4' 0E00               	movlw	0
  5768  00F6' 6E00'              	movwf	(?___fpclassifyf+1)^0,c
  5769  00F8' 0E04               	movlw	4
  5770  00FA' 6E00'              	movwf	?___fpclassifyf^0,c
  5771  00FC'                    l1499:
  5772  00FC' 0012               	return		;funcret
  5773  00FE'                    __end_of___fpclassifyf:
  5774                           	callstack 0
  5775                           
  5776 ;; *************** function ___fltol *****************
  5777 ;; Defined at:
  5778 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  f1              4    0[COMRAM] int 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  exp1            1    9[COMRAM] unsigned char 
  5783 ;;  sign1           1    8[COMRAM] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  4    0[COMRAM] long 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5793 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5794 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5797 ;;Total ram usage:       10 bytes
  5798 ;; Hardware stack levels used: 1
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		_efgtoa
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text18
  5807  0000'                    __ptext18:
  5808                           	callstack 0
  5809  0000'                    ___fltol:
  5810                           	callstack 25
  5811  0000' 3400'              	rlcf	(___fltol@f1+2)^0,w,c
  5812  0002' 3400'              	rlcf	(___fltol@f1+3)^0,w,c
  5813  0004' 6E00'              	movwf	___fltol@exp1^0,c
  5814  0006' 5000'              	movf	___fltol@exp1^0,w,c
  5815  0008' A4D8               	btfss	status,2,c
  5816  000A' EF00' F000'        	goto	u4861
  5817  000E' EF00' F000'        	goto	u4860
  5818  0012'                    u4861:
  5819  0012' EF00' F000'        	goto	l4560
  5820  0016'                    u4860:
  5821  0016'                    l4556:
  5822  0016' 0E00               	movlw	0
  5823  0018' 6E00'              	movwf	?___fltol^0,c
  5824  001A' 0E00               	movlw	0
  5825  001C' 6E00'              	movwf	(?___fltol+1)^0,c
  5826  001E' 0E00               	movlw	0
  5827  0020' 6E00'              	movwf	(?___fltol+2)^0,c
  5828  0022' 0E00               	movlw	0
  5829  0024' 6E00'              	movwf	(?___fltol+3)^0,c
  5830  0026' EF00' F000'        	goto	l907
  5831  002A'                    l4560:
  5832  002A' C000' F004'        	movff	___fltol@f1,??___fltol
  5833  002E' C001' F005'        	movff	___fltol@f1+1,??___fltol+1
  5834  0032' C002' F006'        	movff	___fltol@f1+2,??___fltol+2
  5835  0036' C003' F007'        	movff	___fltol@f1+3,??___fltol+3
  5836  003A' 0E20               	movlw	32
  5837  003C' EF00' F000'        	goto	u4870
  5838  0040'                    u4875:
  5839  0040' 90D8               	bcf	status,0,c
  5840  0042' 3200'              	rrcf	(??___fltol+3)^0,f,c
  5841  0044' 3200'              	rrcf	(??___fltol+2)^0,f,c
  5842  0046' 3200'              	rrcf	(??___fltol+1)^0,f,c
  5843  0048' 3200'              	rrcf	??___fltol^0,f,c
  5844  004A'                    u4870:
  5845  004A' 2EE8               	decfsz	wreg,f,c
  5846  004C' EF00' F000'        	goto	u4875
  5847  0050' 5000'              	movf	??___fltol^0,w,c
  5848  0052' 6E00'              	movwf	___fltol@sign1^0,c
  5849  0054' 8E00'              	bsf	(___fltol@f1+2)^0,7,c
  5850  0056' 0EFF               	movlw	255
  5851  0058' 1600'              	andwf	___fltol@f1^0,f,c
  5852  005A' 0EFF               	movlw	255
  5853  005C' 1600'              	andwf	(___fltol@f1+1)^0,f,c
  5854  005E' 0EFF               	movlw	255
  5855  0060' 1600'              	andwf	(___fltol@f1+2)^0,f,c
  5856  0062' 0E00               	movlw	0
  5857  0064' 1600'              	andwf	(___fltol@f1+3)^0,f,c
  5858  0066' 0E96               	movlw	150
  5859  0068' 5E00'              	subwf	___fltol@exp1^0,f,c
  5860  006A' BE00'              	btfsc	___fltol@exp1^0,7,c
  5861  006C' EF00' F000'        	goto	u4880
  5862  0070' EF00' F000'        	goto	u4881
  5863  0074'                    u4881:
  5864  0074' EF00' F000'        	goto	l4580
  5865  0078'                    u4880:
  5866  0078' 5000'              	movf	___fltol@exp1^0,w,c
  5867  007A' 0A80               	xorlw	128
  5868  007C' 0F97               	addlw	151
  5869  007E' B0D8               	btfsc	status,0,c
  5870  0080' EF00' F000'        	goto	u4891
  5871  0084' EF00' F000'        	goto	u4890
  5872  0088'                    u4891:
  5873  0088' EF00' F000'        	goto	l4576
  5874  008C'                    u4890:
  5875  008C' EF00' F000'        	goto	l4556
  5876  0090'                    l4576:
  5877  0090' 90D8               	bcf	status,0,c
  5878  0092' 3200'              	rrcf	(___fltol@f1+3)^0,f,c
  5879  0094' 3200'              	rrcf	(___fltol@f1+2)^0,f,c
  5880  0096' 3200'              	rrcf	(___fltol@f1+1)^0,f,c
  5881  0098' 3200'              	rrcf	___fltol@f1^0,f,c
  5882  009A' 3E00'              	incfsz	___fltol@exp1^0,f,c
  5883  009C' EF00' F000'        	goto	l4576
  5884  00A0' EF00' F000'        	goto	l4590
  5885  00A4'                    l4580:
  5886  00A4' 0E1F               	movlw	31
  5887  00A6' 6400'              	cpfsgt	___fltol@exp1^0,c
  5888  00A8' EF00' F000'        	goto	u4901
  5889  00AC' EF00' F000'        	goto	u4900
  5890  00B0'                    u4901:
  5891  00B0' EF00' F000'        	goto	l4588
  5892  00B4'                    u4900:
  5893  00B4' EF00' F000'        	goto	l4556
  5894  00B8'                    l4586:
  5895  00B8' 90D8               	bcf	status,0,c
  5896  00BA' 3600'              	rlcf	___fltol@f1^0,f,c
  5897  00BC' 3600'              	rlcf	(___fltol@f1+1)^0,f,c
  5898  00BE' 3600'              	rlcf	(___fltol@f1+2)^0,f,c
  5899  00C0' 3600'              	rlcf	(___fltol@f1+3)^0,f,c
  5900  00C2' 0600'              	decf	___fltol@exp1^0,f,c
  5901  00C4'                    l4588:
  5902  00C4' 5000'              	movf	___fltol@exp1^0,w,c
  5903  00C6' A4D8               	btfss	status,2,c
  5904  00C8' EF00' F000'        	goto	u4911
  5905  00CC' EF00' F000'        	goto	u4910
  5906  00D0'                    u4911:
  5907  00D0' EF00' F000'        	goto	l4586
  5908  00D4'                    u4910:
  5909  00D4'                    l4590:
  5910  00D4' 5000'              	movf	___fltol@sign1^0,w,c
  5911  00D6' B4D8               	btfsc	status,2,c
  5912  00D8' EF00' F000'        	goto	u4921
  5913  00DC' EF00' F000'        	goto	u4920
  5914  00E0'                    u4921:
  5915  00E0' EF00' F000'        	goto	l4594
  5916  00E4'                    u4920:
  5917  00E4' 1E00'              	comf	(___fltol@f1+3)^0,f,c
  5918  00E6' 1E00'              	comf	(___fltol@f1+2)^0,f,c
  5919  00E8' 1E00'              	comf	(___fltol@f1+1)^0,f,c
  5920  00EA' 6C00'              	negf	___fltol@f1^0,c
  5921  00EC' 0E00               	movlw	0
  5922  00EE' 2200'              	addwfc	(___fltol@f1+1)^0,f,c
  5923  00F0' 2200'              	addwfc	(___fltol@f1+2)^0,f,c
  5924  00F2' 2200'              	addwfc	(___fltol@f1+3)^0,f,c
  5925  00F4'                    l4594:
  5926  00F4' C000' F000'        	movff	___fltol@f1,?___fltol
  5927  00F8' C001' F001'        	movff	___fltol@f1+1,?___fltol+1
  5928  00FC' C002' F002'        	movff	___fltol@f1+2,?___fltol+2
  5929  0100' C003' F003'        	movff	___fltol@f1+3,?___fltol+3
  5930  0104'                    l907:
  5931  0104' 0012               	return		;funcret
  5932  0106'                    __end_of___fltol:
  5933                           	callstack 0
  5934                           
  5935 ;; *************** function ___flsub *****************
  5936 ;; Defined at:
  5937 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcadd.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  b               4   25[COMRAM] long 
  5940 ;;  a               4   29[COMRAM] long 
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;		None
  5943 ;; Return value:  Size  Location     Type
  5944 ;;                  4   25[COMRAM] long 
  5945 ;; Registers used:
  5946 ;;		wreg, status,2, status,0, cstack
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5952 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5955 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;Total ram usage:        8 bytes
  5957 ;; Hardware stack levels used: 1
  5958 ;; Hardware stack levels required when called: 1
  5959 ;; This function calls:
  5960 ;;		___fladd
  5961 ;; This function is called by:
  5962 ;;		_efgtoa
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text19
  5967  0000'                    __ptext19:
  5968                           	callstack 0
  5969  0000'                    ___flsub:
  5970                           	callstack 24
  5971  0000' 0E00               	movlw	0
  5972  0002' 1A00'              	xorwf	___flsub@a^0,f,c
  5973  0004' 0E00               	movlw	0
  5974  0006' 1A00'              	xorwf	(___flsub@a+1)^0,f,c
  5975  0008' 0E00               	movlw	0
  5976  000A' 1A00'              	xorwf	(___flsub@a+2)^0,f,c
  5977  000C' 0E80               	movlw	128
  5978  000E' 1A00'              	xorwf	(___flsub@a+3)^0,f,c
  5979  0010' C019' F000'        	movff	___flsub@b,___fladd@b
  5980  0014' C01A' F001'        	movff	___flsub@b+1,___fladd@b+1
  5981  0018' C01B' F002'        	movff	___flsub@b+2,___fladd@b+2
  5982  001C' C01C' F003'        	movff	___flsub@b+3,___fladd@b+3
  5983  0020' C01D' F004'        	movff	___flsub@a,___fladd@a
  5984  0024' C01E' F005'        	movff	___flsub@a+1,___fladd@a+1
  5985  0028' C01F' F006'        	movff	___flsub@a+2,___fladd@a+2
  5986  002C' C020' F007'        	movff	___flsub@a+3,___fladd@a+3
  5987  0030' EC00' F000'        	call	___fladd	;wreg free
  5988  0034' C000' F019'        	movff	?___fladd,?___flsub
  5989  0038' C001' F01A'        	movff	?___fladd+1,?___flsub+1
  5990  003C' C002' F01B'        	movff	?___fladd+2,?___flsub+2
  5991  0040' C003' F01C'        	movff	?___fladd+3,?___flsub+3
  5992  0044' 0012               	return		;funcret
  5993  0046'                    __end_of___flsub:
  5994                           	callstack 0
  5995                           
  5996 ;; *************** function ___fladd *****************
  5997 ;; Defined at:
  5998 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcadd.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  b               4    0[COMRAM] long 
  6001 ;;  a               4    4[COMRAM] long 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  grs             1   15[COMRAM] unsigned char 
  6004 ;;  bexp            1   14[COMRAM] unsigned char 
  6005 ;;  aexp            1   13[COMRAM] unsigned char 
  6006 ;;  signs           1   12[COMRAM] unsigned char 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  4    0[COMRAM] unsigned char 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6016 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6017 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6018 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6019 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6020 ;;Total ram usage:       16 bytes
  6021 ;; Hardware stack levels used: 1
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		___flsub
  6026 ;;		_efgtoa
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text20
  6031  0000'                    __ptext20:
  6032                           	callstack 0
  6033  0000'                    ___fladd:
  6034                           	callstack 24
  6035  0000' 5000'              	movf	(___fladd@b+3)^0,w,c
  6036  0002' 0B80               	andlw	128
  6037  0004' 6E00'              	movwf	___fladd@signs^0,c
  6038  0006' 5000'              	movf	(___fladd@b+3)^0,w,c
  6039  0008' 2400'              	addwf	(___fladd@b+3)^0,w,c
  6040  000A' 6E00'              	movwf	___fladd@bexp^0,c
  6041  000C' AE00'              	btfss	(___fladd@b+2)^0,7,c
  6042  000E' EF00' F000'        	goto	u3671
  6043  0012' EF00' F000'        	goto	u3670
  6044  0016'                    u3671:
  6045  0016' EF00' F000'        	goto	l3850
  6046  001A'                    u3670:
  6047  001A' 8000'              	bsf	___fladd@bexp^0,0,c
  6048  001C'                    l3850:
  6049  001C' 5000'              	movf	___fladd@bexp^0,w,c
  6050  001E' B4D8               	btfsc	status,2,c
  6051  0020' EF00' F000'        	goto	u3681
  6052  0024' EF00' F000'        	goto	u3680
  6053  0028'                    u3681:
  6054  0028' EF00' F000'        	goto	l3860
  6055  002C'                    u3680:
  6056  002C' 2800'              	incf	___fladd@bexp^0,w,c
  6057  002E' A4D8               	btfss	status,2,c
  6058  0030' EF00' F000'        	goto	u3691
  6059  0034' EF00' F000'        	goto	u3690
  6060  0038'                    u3691:
  6061  0038' EF00' F000'        	goto	l3856
  6062  003C'                    u3690:
  6063  003C' 0E00               	movlw	0
  6064  003E' 6E00'              	movwf	___fladd@b^0,c
  6065  0040' 0E00               	movlw	0
  6066  0042' 6E00'              	movwf	(___fladd@b+1)^0,c
  6067  0044' 0E00               	movlw	0
  6068  0046' 6E00'              	movwf	(___fladd@b+2)^0,c
  6069  0048' 0E00               	movlw	0
  6070  004A' 6E00'              	movwf	(___fladd@b+3)^0,c
  6071  004C'                    l3856:
  6072  004C' 8E00'              	bsf	(___fladd@b+2)^0,7,c
  6073  004E' 0E00               	movlw	0
  6074  0050' 6E00'              	movwf	(___fladd@b+3)^0,c
  6075  0052' EF00' F000'        	goto	l3862
  6076  0056'                    l3860:
  6077  0056' 0E00               	movlw	0
  6078  0058' 6E00'              	movwf	___fladd@b^0,c
  6079  005A' 0E00               	movlw	0
  6080  005C' 6E00'              	movwf	(___fladd@b+1)^0,c
  6081  005E' 0E00               	movlw	0
  6082  0060' 6E00'              	movwf	(___fladd@b+2)^0,c
  6083  0062' 0E00               	movlw	0
  6084  0064' 6E00'              	movwf	(___fladd@b+3)^0,c
  6085  0066'                    l3862:
  6086  0066' 5000'              	movf	(___fladd@a+3)^0,w,c
  6087  0068' 0B80               	andlw	128
  6088  006A' 6E00'              	movwf	___fladd@aexp^0,c
  6089  006C' 5000'              	movf	___fladd@signs^0,w,c
  6090  006E' 1800'              	xorwf	___fladd@aexp^0,w,c
  6091  0070' B4D8               	btfsc	status,2,c
  6092  0072' EF00' F000'        	goto	u3701
  6093  0076' EF00' F000'        	goto	u3700
  6094  007A'                    u3701:
  6095  007A' EF00' F000'        	goto	l3868
  6096  007E'                    u3700:
  6097  007E' 8C00'              	bsf	___fladd@signs^0,6,c
  6098  0080'                    l3868:
  6099  0080' 5000'              	movf	(___fladd@a+3)^0,w,c
  6100  0082' 2400'              	addwf	(___fladd@a+3)^0,w,c
  6101  0084' 6E00'              	movwf	___fladd@aexp^0,c
  6102  0086' AE00'              	btfss	(___fladd@a+2)^0,7,c
  6103  0088' EF00' F000'        	goto	u3711
  6104  008C' EF00' F000'        	goto	u3710
  6105  0090'                    u3711:
  6106  0090' EF00' F000'        	goto	l3874
  6107  0094'                    u3710:
  6108  0094' 8000'              	bsf	___fladd@aexp^0,0,c
  6109  0096'                    l3874:
  6110  0096' 5000'              	movf	___fladd@aexp^0,w,c
  6111  0098' B4D8               	btfsc	status,2,c
  6112  009A' EF00' F000'        	goto	u3721
  6113  009E' EF00' F000'        	goto	u3720
  6114  00A2'                    u3721:
  6115  00A2' EF00' F000'        	goto	l3884
  6116  00A6'                    u3720:
  6117  00A6' 2800'              	incf	___fladd@aexp^0,w,c
  6118  00A8' A4D8               	btfss	status,2,c
  6119  00AA' EF00' F000'        	goto	u3731
  6120  00AE' EF00' F000'        	goto	u3730
  6121  00B2'                    u3731:
  6122  00B2' EF00' F000'        	goto	l3880
  6123  00B6'                    u3730:
  6124  00B6' 0E00               	movlw	0
  6125  00B8' 6E00'              	movwf	___fladd@a^0,c
  6126  00BA' 0E00               	movlw	0
  6127  00BC' 6E00'              	movwf	(___fladd@a+1)^0,c
  6128  00BE' 0E00               	movlw	0
  6129  00C0' 6E00'              	movwf	(___fladd@a+2)^0,c
  6130  00C2' 0E00               	movlw	0
  6131  00C4' 6E00'              	movwf	(___fladd@a+3)^0,c
  6132  00C6'                    l3880:
  6133  00C6' 8E00'              	bsf	(___fladd@a+2)^0,7,c
  6134  00C8' 0E00               	movlw	0
  6135  00CA' 6E00'              	movwf	(___fladd@a+3)^0,c
  6136  00CC' EF00' F000'        	goto	l3886
  6137  00D0'                    l3884:
  6138  00D0' 0E00               	movlw	0
  6139  00D2' 6E00'              	movwf	___fladd@a^0,c
  6140  00D4' 0E00               	movlw	0
  6141  00D6' 6E00'              	movwf	(___fladd@a+1)^0,c
  6142  00D8' 0E00               	movlw	0
  6143  00DA' 6E00'              	movwf	(___fladd@a+2)^0,c
  6144  00DC' 0E00               	movlw	0
  6145  00DE' 6E00'              	movwf	(___fladd@a+3)^0,c
  6146  00E0'                    l3886:
  6147  00E0' 5000'              	movf	___fladd@bexp^0,w,c
  6148  00E2' 5C00'              	subwf	___fladd@aexp^0,w,c
  6149  00E4' B0D8               	btfsc	status,0,c
  6150  00E6' EF00' F000'        	goto	u3741
  6151  00EA' EF00' F000'        	goto	u3740
  6152  00EE'                    u3741:
  6153  00EE' EF00' F000'        	goto	l3922
  6154  00F2'                    u3740:
  6155  00F2' AC00'              	btfss	___fladd@signs^0,6,c
  6156  00F4' EF00' F000'        	goto	u3751
  6157  00F8' EF00' F000'        	goto	u3750
  6158  00FC'                    u3751:
  6159  00FC' EF00' F000'        	goto	l3892
  6160  0100'                    u3750:
  6161  0100' 0E80               	movlw	128
  6162  0102' 1A00'              	xorwf	___fladd@signs^0,f,c
  6163  0104'                    l3892:
  6164  0104' C00E' F00F'        	movff	___fladd@bexp,___fladd@grs
  6165  0108' C00D' F00E'        	movff	___fladd@aexp,___fladd@bexp
  6166  010C' C00F' F00D'        	movff	___fladd@grs,___fladd@aexp
  6167  0110' C000' F00F'        	movff	___fladd@b,___fladd@grs
  6168  0114' C004' F000'        	movff	___fladd@a,___fladd@b
  6169  0118' C00F' F004'        	movff	___fladd@grs,___fladd@a
  6170  011C' C001' F00F'        	movff	___fladd@b+1,___fladd@grs
  6171  0120' C005' F001'        	movff	___fladd@a+1,___fladd@b+1
  6172  0124' C00F' F005'        	movff	___fladd@grs,___fladd@a+1
  6173  0128' C002' F00F'        	movff	___fladd@b+2,___fladd@grs
  6174  012C' C006' F002'        	movff	___fladd@a+2,___fladd@b+2
  6175  0130' C00F' F006'        	movff	___fladd@grs,___fladd@a+2
  6176  0134' C003' F00F'        	movff	___fladd@b+3,___fladd@grs
  6177  0138' C007' F003'        	movff	___fladd@a+3,___fladd@b+3
  6178  013C' C00F' F007'        	movff	___fladd@grs,___fladd@a+3
  6179  0140'                    l3922:
  6180  0140' 0E00               	movlw	0
  6181  0142' 6E00'              	movwf	___fladd@grs^0,c
  6182  0144' 5000'              	movf	___fladd@bexp^0,w,c
  6183  0146' C00D' F008'        	movff	___fladd@aexp,??___fladd
  6184  014A' 6A00'              	clrf	(??___fladd+1)^0,c
  6185  014C' 5E00'              	subwf	??___fladd^0,f,c
  6186  014E' 0E00               	movlw	0
  6187  0150' 5A00'              	subwfb	(??___fladd+1)^0,f,c
  6188  0152' BE00'              	btfsc	(??___fladd+1)^0,7,c
  6189  0154' EF00' F000'        	goto	u3761
  6190  0158' 5000'              	movf	(??___fladd+1)^0,w,c
  6191  015A' E109               	bnz	u3760
  6192  015C' 0E1A               	movlw	26
  6193  015E' 5C00'              	subwf	??___fladd^0,w,c
  6194  0160' A0D8               	btfss	status,0,c
  6195  0162' EF00' F000'        	goto	u3761
  6196  0166' EF00' F000'        	goto	u3760
  6197  016A'                    u3761:
  6198  016A' EF00' F000'        	goto	l1139
  6199  016E'                    u3760:
  6200  016E' 5000'              	movf	___fladd@b^0,w,c
  6201  0170' 1000'              	iorwf	(___fladd@b+1)^0,w,c
  6202  0172' 1000'              	iorwf	(___fladd@b+2)^0,w,c
  6203  0174' 1000'              	iorwf	(___fladd@b+3)^0,w,c
  6204  0176' A4D8               	btfss	status,2,c
  6205  0178' EF00' F000'        	goto	u3771
  6206  017C' EF00' F000'        	goto	u3770
  6207  0180'                    u3771:
  6208  0180' 0E01               	movlw	1
  6209  0182' EF00' F000'        	goto	u3780
  6210  0186'                    u3770:
  6211  0186' 0E00               	movlw	0
  6212  0188'                    u3780:
  6213  0188' 6E00'              	movwf	___fladd@grs^0,c
  6214  018A' 0E00               	movlw	0
  6215  018C' 6E00'              	movwf	___fladd@b^0,c
  6216  018E' 0E00               	movlw	0
  6217  0190' 6E00'              	movwf	(___fladd@b+1)^0,c
  6218  0192' 0E00               	movlw	0
  6219  0194' 6E00'              	movwf	(___fladd@b+2)^0,c
  6220  0196' 0E00               	movlw	0
  6221  0198' 6E00'              	movwf	(___fladd@b+3)^0,c
  6222  019A' C00D' F00E'        	movff	___fladd@aexp,___fladd@bexp
  6223  019E' EF00' F000'        	goto	l1138
  6224  01A2'                    l1140:
  6225  01A2' A000'              	btfss	___fladd@grs^0,0,c
  6226  01A4' EF00' F000'        	goto	u3791
  6227  01A8' EF00' F000'        	goto	u3790
  6228  01AC'                    u3791:
  6229  01AC' EF00' F000'        	goto	l3934
  6230  01B0'                    u3790:
  6231  01B0' 90D8               	bcf	status,0,c
  6232  01B2' 3000'              	rrcf	___fladd@grs^0,w,c
  6233  01B4' 0901               	iorlw	1
  6234  01B6' 6E00'              	movwf	___fladd@grs^0,c
  6235  01B8' EF00' F000'        	goto	l3936
  6236  01BC'                    l3934:
  6237  01BC' 90D8               	bcf	status,0,c
  6238  01BE' 3200'              	rrcf	___fladd@grs^0,f,c
  6239  01C0'                    l3936:
  6240  01C0' A000'              	btfss	___fladd@b^0,0,c
  6241  01C2' EF00' F000'        	goto	u3801
  6242  01C6' EF00' F000'        	goto	u3800
  6243  01CA'                    u3801:
  6244  01CA' EF00' F000'        	goto	l3940
  6245  01CE'                    u3800:
  6246  01CE' 8E00'              	bsf	___fladd@grs^0,7,c
  6247  01D0'                    l3940:
  6248  01D0' 3400'              	rlcf	(___fladd@b+3)^0,w,c
  6249  01D2' 3200'              	rrcf	(___fladd@b+3)^0,f,c
  6250  01D4' 3200'              	rrcf	(___fladd@b+2)^0,f,c
  6251  01D6' 3200'              	rrcf	(___fladd@b+1)^0,f,c
  6252  01D8' 3200'              	rrcf	___fladd@b^0,f,c
  6253  01DA' 2A00'              	incf	___fladd@bexp^0,f,c
  6254  01DC'                    l1139:
  6255  01DC' 5000'              	movf	___fladd@aexp^0,w,c
  6256  01DE' 5C00'              	subwf	___fladd@bexp^0,w,c
  6257  01E0' A0D8               	btfss	status,0,c
  6258  01E2' EF00' F000'        	goto	u3811
  6259  01E6' EF00' F000'        	goto	u3810
  6260  01EA'                    u3811:
  6261  01EA' EF00' F000'        	goto	l1140
  6262  01EE'                    u3810:
  6263  01EE'                    l1138:
  6264  01EE' BC00'              	btfsc	___fladd@signs^0,6,c
  6265  01F0' EF00' F000'        	goto	u3821
  6266  01F4' EF00' F000'        	goto	u3820
  6267  01F8'                    u3821:
  6268  01F8' EF00' F000'        	goto	l3968
  6269  01FC'                    u3820:
  6270  01FC' 5000'              	movf	___fladd@bexp^0,w,c
  6271  01FE' A4D8               	btfss	status,2,c
  6272  0200' EF00' F000'        	goto	u3831
  6273  0204' EF00' F000'        	goto	u3830
  6274  0208'                    u3831:
  6275  0208' EF00' F000'        	goto	l3950
  6276  020C'                    u3830:
  6277  020C' 0E00               	movlw	0
  6278  020E' 6E00'              	movwf	?___fladd^0,c
  6279  0210' 0E00               	movlw	0
  6280  0212' 6E00'              	movwf	(?___fladd+1)^0,c
  6281  0214' 0E00               	movlw	0
  6282  0216' 6E00'              	movwf	(?___fladd+2)^0,c
  6283  0218' 0E00               	movlw	0
  6284  021A' 6E00'              	movwf	(?___fladd+3)^0,c
  6285  021C' EF00' F000'        	goto	l1147
  6286  0220'                    l3950:
  6287  0220' 5000'              	movf	___fladd@a^0,w,c
  6288  0222' 2600'              	addwf	___fladd@b^0,f,c
  6289  0224' 5000'              	movf	(___fladd@a+1)^0,w,c
  6290  0226' 2200'              	addwfc	(___fladd@b+1)^0,f,c
  6291  0228' 5000'              	movf	(___fladd@a+2)^0,w,c
  6292  022A' 2200'              	addwfc	(___fladd@b+2)^0,f,c
  6293  022C' 5000'              	movf	(___fladd@a+3)^0,w,c
  6294  022E' 2200'              	addwfc	(___fladd@b+3)^0,f,c
  6295  0230' A000'              	btfss	(___fladd@b+3)^0,0,c
  6296  0232' EF00' F000'        	goto	u3841
  6297  0236' EF00' F000'        	goto	u3840
  6298  023A'                    u3841:
  6299  023A' EF00' F000'        	goto	l4004
  6300  023E'                    u3840:
  6301  023E' A000'              	btfss	___fladd@grs^0,0,c
  6302  0240' EF00' F000'        	goto	u3851
  6303  0244' EF00' F000'        	goto	u3850
  6304  0248'                    u3851:
  6305  0248' EF00' F000'        	goto	l3958
  6306  024C'                    u3850:
  6307  024C' 90D8               	bcf	status,0,c
  6308  024E' 3000'              	rrcf	___fladd@grs^0,w,c
  6309  0250' 0901               	iorlw	1
  6310  0252' 6E00'              	movwf	___fladd@grs^0,c
  6311  0254' EF00' F000'        	goto	l3960
  6312  0258'                    l3958:
  6313  0258' 90D8               	bcf	status,0,c
  6314  025A' 3200'              	rrcf	___fladd@grs^0,f,c
  6315  025C'                    l3960:
  6316  025C' A000'              	btfss	___fladd@b^0,0,c
  6317  025E' EF00' F000'        	goto	u3861
  6318  0262' EF00' F000'        	goto	u3860
  6319  0266'                    u3861:
  6320  0266' EF00' F000'        	goto	l3964
  6321  026A'                    u3860:
  6322  026A' 8E00'              	bsf	___fladd@grs^0,7,c
  6323  026C'                    l3964:
  6324  026C' 3400'              	rlcf	(___fladd@b+3)^0,w,c
  6325  026E' 3200'              	rrcf	(___fladd@b+3)^0,f,c
  6326  0270' 3200'              	rrcf	(___fladd@b+2)^0,f,c
  6327  0272' 3200'              	rrcf	(___fladd@b+1)^0,f,c
  6328  0274' 3200'              	rrcf	___fladd@b^0,f,c
  6329  0276' 2A00'              	incf	___fladd@bexp^0,f,c
  6330  0278' EF00' F000'        	goto	l4004
  6331  027C'                    l3968:
  6332  027C' 5000'              	movf	___fladd@a^0,w,c
  6333  027E' 5C00'              	subwf	___fladd@b^0,w,c
  6334  0280' 5000'              	movf	(___fladd@a+1)^0,w,c
  6335  0282' 5800'              	subwfb	(___fladd@b+1)^0,w,c
  6336  0284' 5000'              	movf	(___fladd@a+2)^0,w,c
  6337  0286' 5800'              	subwfb	(___fladd@b+2)^0,w,c
  6338  0288' 5000'              	movf	(___fladd@b+3)^0,w,c
  6339  028A' 0A80               	xorlw	128
  6340  028C' 6E00'              	movwf	??___fladd^0,c
  6341  028E' 5000'              	movf	(___fladd@a+3)^0,w,c
  6342  0290' 0A80               	xorlw	128
  6343  0292' 5800'              	subwfb	??___fladd^0,w,c
  6344  0294' B0D8               	btfsc	status,0,c
  6345  0296' EF00' F000'        	goto	u3871
  6346  029A' EF00' F000'        	goto	u3870
  6347  029E'                    u3871:
  6348  029E' EF00' F000'        	goto	l3978
  6349  02A2'                    u3870:
  6350  02A2' 5000'              	movf	___fladd@b^0,w,c
  6351  02A4' 5C00'              	subwf	___fladd@a^0,w,c
  6352  02A6' 6E00'              	movwf	??___fladd^0,c
  6353  02A8' 5000'              	movf	(___fladd@b+1)^0,w,c
  6354  02AA' 5800'              	subwfb	(___fladd@a+1)^0,w,c
  6355  02AC' 6E00'              	movwf	(??___fladd+1)^0,c
  6356  02AE' 5000'              	movf	(___fladd@b+2)^0,w,c
  6357  02B0' 5800'              	subwfb	(___fladd@a+2)^0,w,c
  6358  02B2' 6E00'              	movwf	(??___fladd+2)^0,c
  6359  02B4' 5000'              	movf	(___fladd@b+3)^0,w,c
  6360  02B6' 5800'              	subwfb	(___fladd@a+3)^0,w,c
  6361  02B8' 6E00'              	movwf	(??___fladd+3)^0,c
  6362  02BA' 0EFF               	movlw	255
  6363  02BC' 2400'              	addwf	??___fladd^0,w,c
  6364  02BE' 6E00'              	movwf	___fladd@b^0,c
  6365  02C0' 0EFF               	movlw	255
  6366  02C2' 2000'              	addwfc	(??___fladd+1)^0,w,c
  6367  02C4' 6E00'              	movwf	(___fladd@b+1)^0,c
  6368  02C6' 0EFF               	movlw	255
  6369  02C8' 2000'              	addwfc	(??___fladd+2)^0,w,c
  6370  02CA' 6E00'              	movwf	(___fladd@b+2)^0,c
  6371  02CC' 0EFF               	movlw	255
  6372  02CE' 2000'              	addwfc	(??___fladd+3)^0,w,c
  6373  02D0' 6E00'              	movwf	(___fladd@b+3)^0,c
  6374  02D2' 0E80               	movlw	128
  6375  02D4' 1A00'              	xorwf	___fladd@signs^0,f,c
  6376  02D6' 6C00'              	negf	___fladd@grs^0,c
  6377  02D8' 5000'              	movf	___fladd@grs^0,w,c
  6378  02DA' A4D8               	btfss	status,2,c
  6379  02DC' EF00' F000'        	goto	u3881
  6380  02E0' EF00' F000'        	goto	u3880
  6381  02E4'                    u3881:
  6382  02E4' EF00' F000'        	goto	l1155
  6383  02E8'                    u3880:
  6384  02E8' 0E01               	movlw	1
  6385  02EA' 2600'              	addwf	___fladd@b^0,f,c
  6386  02EC' 0E00               	movlw	0
  6387  02EE' 2200'              	addwfc	(___fladd@b+1)^0,f,c
  6388  02F0' 2200'              	addwfc	(___fladd@b+2)^0,f,c
  6389  02F2' 2200'              	addwfc	(___fladd@b+3)^0,f,c
  6390  02F4' EF00' F000'        	goto	l1155
  6391  02F8'                    l3978:
  6392  02F8' 5000'              	movf	___fladd@a^0,w,c
  6393  02FA' 5E00'              	subwf	___fladd@b^0,f,c
  6394  02FC' 5000'              	movf	(___fladd@a+1)^0,w,c
  6395  02FE' 5A00'              	subwfb	(___fladd@b+1)^0,f,c
  6396  0300' 5000'              	movf	(___fladd@a+2)^0,w,c
  6397  0302' 5A00'              	subwfb	(___fladd@b+2)^0,f,c
  6398  0304' 5000'              	movf	(___fladd@a+3)^0,w,c
  6399  0306' 5A00'              	subwfb	(___fladd@b+3)^0,f,c
  6400  0308'                    l1155:
  6401  0308' 5000'              	movf	___fladd@b^0,w,c
  6402  030A' 1000'              	iorwf	(___fladd@b+1)^0,w,c
  6403  030C' 1000'              	iorwf	(___fladd@b+2)^0,w,c
  6404  030E' 1000'              	iorwf	(___fladd@b+3)^0,w,c
  6405  0310' A4D8               	btfss	status,2,c
  6406  0312' EF00' F000'        	goto	u3891
  6407  0316' EF00' F000'        	goto	u3890
  6408  031A'                    u3891:
  6409  031A' EF00' F000'        	goto	l4002
  6410  031E'                    u3890:
  6411  031E' 5000'              	movf	___fladd@grs^0,w,c
  6412  0320' A4D8               	btfss	status,2,c
  6413  0322' EF00' F000'        	goto	u3901
  6414  0326' EF00' F000'        	goto	u3900
  6415  032A'                    u3901:
  6416  032A' EF00' F000'        	goto	l4002
  6417  032E'                    u3900:
  6418  032E' 0E00               	movlw	0
  6419  0330' 6E00'              	movwf	?___fladd^0,c
  6420  0332' 0E00               	movlw	0
  6421  0334' 6E00'              	movwf	(?___fladd+1)^0,c
  6422  0336' 0E00               	movlw	0
  6423  0338' 6E00'              	movwf	(?___fladd+2)^0,c
  6424  033A' 0E00               	movlw	0
  6425  033C' 6E00'              	movwf	(?___fladd+3)^0,c
  6426  033E' EF00' F000'        	goto	l1147
  6427  0342'                    l3986:
  6428  0342' 90D8               	bcf	status,0,c
  6429  0344' 3600'              	rlcf	___fladd@b^0,f,c
  6430  0346' 3600'              	rlcf	(___fladd@b+1)^0,f,c
  6431  0348' 3600'              	rlcf	(___fladd@b+2)^0,f,c
  6432  034A' 3600'              	rlcf	(___fladd@b+3)^0,f,c
  6433  034C' AE00'              	btfss	___fladd@grs^0,7,c
  6434  034E' EF00' F000'        	goto	u3911
  6435  0352' EF00' F000'        	goto	u3910
  6436  0356'                    u3911:
  6437  0356' EF00' F000'        	goto	l3992
  6438  035A'                    u3910:
  6439  035A' 8000'              	bsf	___fladd@b^0,0,c
  6440  035C'                    l3992:
  6441  035C' A000'              	btfss	___fladd@grs^0,0,c
  6442  035E' EF00' F000'        	goto	u3921
  6443  0362' EF00' F000'        	goto	u3920
  6444  0366'                    u3921:
  6445  0366' EF00' F000'        	goto	l3996
  6446  036A'                    u3920:
  6447  036A' 80D8               	bsf	status,0,c
  6448  036C' 3600'              	rlcf	___fladd@grs^0,f,c
  6449  036E' EF00' F000'        	goto	l3998
  6450  0372'                    l3996:
  6451  0372' 90D8               	bcf	status,0,c
  6452  0374' 3600'              	rlcf	___fladd@grs^0,f,c
  6453  0376'                    l3998:
  6454  0376' 5000'              	movf	___fladd@bexp^0,w,c
  6455  0378' B4D8               	btfsc	status,2,c
  6456  037A' EF00' F000'        	goto	u3931
  6457  037E' EF00' F000'        	goto	u3930
  6458  0382'                    u3931:
  6459  0382' EF00' F000'        	goto	l4002
  6460  0386'                    u3930:
  6461  0386' 0600'              	decf	___fladd@bexp^0,f,c
  6462  0388'                    l4002:
  6463  0388' AE00'              	btfss	(___fladd@b+2)^0,7,c
  6464  038A' EF00' F000'        	goto	u3941
  6465  038E' EF00' F000'        	goto	u3940
  6466  0392'                    u3941:
  6467  0392' EF00' F000'        	goto	l3986
  6468  0396'                    u3940:
  6469  0396'                    l4004:
  6470  0396' 0E00               	movlw	0
  6471  0398' 6E00'              	movwf	___fladd@aexp^0,c
  6472  039A' AE00'              	btfss	___fladd@grs^0,7,c
  6473  039C' EF00' F000'        	goto	u3951
  6474  03A0' EF00' F000'        	goto	u3950
  6475  03A4'                    u3951:
  6476  03A4' EF00' F000'        	goto	l1164
  6477  03A8'                    u3950:
  6478  03A8' C00F' F008'        	movff	___fladd@grs,??___fladd
  6479  03AC' 0E7F               	movlw	127
  6480  03AE' 1600'              	andwf	??___fladd^0,f,c
  6481  03B0' B4D8               	btfsc	status,2,c
  6482  03B2' EF00' F000'        	goto	u3961
  6483  03B6' EF00' F000'        	goto	u3960
  6484  03BA'                    u3961:
  6485  03BA' EF00' F000'        	goto	l1165
  6486  03BE'                    u3960:
  6487  03BE'                    l4010:
  6488  03BE' 0E01               	movlw	1
  6489  03C0' 6E00'              	movwf	___fladd@aexp^0,c
  6490  03C2' EF00' F000'        	goto	l1164
  6491  03C6'                    l1165:
  6492  03C6' A000'              	btfss	___fladd@b^0,0,c
  6493  03C8' EF00' F000'        	goto	u3971
  6494  03CC' EF00' F000'        	goto	u3970
  6495  03D0'                    u3971:
  6496  03D0' EF00' F000'        	goto	l1164
  6497  03D4'                    u3970:
  6498  03D4' EF00' F000'        	goto	l4010
  6499  03D8'                    l1164:
  6500  03D8' 5000'              	movf	___fladd@aexp^0,w,c
  6501  03DA' B4D8               	btfsc	status,2,c
  6502  03DC' EF00' F000'        	goto	u3981
  6503  03E0' EF00' F000'        	goto	u3980
  6504  03E4'                    u3981:
  6505  03E4' EF00' F000'        	goto	l4022
  6506  03E8'                    u3980:
  6507  03E8' 0E01               	movlw	1
  6508  03EA' 2600'              	addwf	___fladd@b^0,f,c
  6509  03EC' 0E00               	movlw	0
  6510  03EE' 2200'              	addwfc	(___fladd@b+1)^0,f,c
  6511  03F0' 2200'              	addwfc	(___fladd@b+2)^0,f,c
  6512  03F2' 2200'              	addwfc	(___fladd@b+3)^0,f,c
  6513  03F4' A000'              	btfss	(___fladd@b+3)^0,0,c
  6514  03F6' EF00' F000'        	goto	u3991
  6515  03FA' EF00' F000'        	goto	u3990
  6516  03FE'                    u3991:
  6517  03FE' EF00' F000'        	goto	l4022
  6518  0402'                    u3990:
  6519  0402' C000' F008'        	movff	___fladd@b,??___fladd
  6520  0406' C001' F009'        	movff	___fladd@b+1,??___fladd+1
  6521  040A' C002' F00A'        	movff	___fladd@b+2,??___fladd+2
  6522  040E' C003' F00B'        	movff	___fladd@b+3,??___fladd+3
  6523  0412' 3400'              	rlcf	(??___fladd+3)^0,w,c
  6524  0414' 3200'              	rrcf	(??___fladd+3)^0,f,c
  6525  0416' 3200'              	rrcf	(??___fladd+2)^0,f,c
  6526  0418' 3200'              	rrcf	(??___fladd+1)^0,f,c
  6527  041A' 3200'              	rrcf	??___fladd^0,f,c
  6528  041C' C008' F000'        	movff	??___fladd,___fladd@b
  6529  0420' C009' F001'        	movff	??___fladd+1,___fladd@b+1
  6530  0424' C00A' F002'        	movff	??___fladd+2,___fladd@b+2
  6531  0428' C00B' F003'        	movff	??___fladd+3,___fladd@b+3
  6532  042C' 2800'              	incf	___fladd@bexp^0,w,c
  6533  042E' B4D8               	btfsc	status,2,c
  6534  0430' EF00' F000'        	goto	u4001
  6535  0434' EF00' F000'        	goto	u4000
  6536  0438'                    u4001:
  6537  0438' EF00' F000'        	goto	l4022
  6538  043C'                    u4000:
  6539  043C' 2A00'              	incf	___fladd@bexp^0,f,c
  6540  043E'                    l4022:
  6541  043E' 2800'              	incf	___fladd@bexp^0,w,c
  6542  0440' B4D8               	btfsc	status,2,c
  6543  0442' EF00' F000'        	goto	u4011
  6544  0446' EF00' F000'        	goto	u4010
  6545  044A'                    u4011:
  6546  044A' EF00' F000'        	goto	l4026
  6547  044E'                    u4010:
  6548  044E' 5000'              	movf	___fladd@bexp^0,w,c
  6549  0450' A4D8               	btfss	status,2,c
  6550  0452' EF00' F000'        	goto	u4021
  6551  0456' EF00' F000'        	goto	u4020
  6552  045A'                    u4021:
  6553  045A' EF00' F000'        	goto	l4030
  6554  045E'                    u4020:
  6555  045E'                    l4026:
  6556  045E' 0E00               	movlw	0
  6557  0460' 6E00'              	movwf	___fladd@b^0,c
  6558  0462' 0E00               	movlw	0
  6559  0464' 6E00'              	movwf	(___fladd@b+1)^0,c
  6560  0466' 0E00               	movlw	0
  6561  0468' 6E00'              	movwf	(___fladd@b+2)^0,c
  6562  046A' 0E00               	movlw	0
  6563  046C' 6E00'              	movwf	(___fladd@b+3)^0,c
  6564  046E' 5000'              	movf	___fladd@bexp^0,w,c
  6565  0470' A4D8               	btfss	status,2,c
  6566  0472' EF00' F000'        	goto	u4031
  6567  0476' EF00' F000'        	goto	u4030
  6568  047A'                    u4031:
  6569  047A' EF00' F000'        	goto	l4030
  6570  047E'                    u4030:
  6571  047E' 0E00               	movlw	0
  6572  0480' 6E00'              	movwf	___fladd@signs^0,c
  6573  0482'                    l4030:
  6574  0482' A000'              	btfss	___fladd@bexp^0,0,c
  6575  0484' EF00' F000'        	goto	u4041
  6576  0488' EF00' F000'        	goto	u4040
  6577  048C'                    u4041:
  6578  048C' EF00' F000'        	goto	l4034
  6579  0490'                    u4040:
  6580  0490' 8E00'              	bsf	(___fladd@b+2)^0,7,c
  6581  0492' EF00' F000'        	goto	l4036
  6582  0496'                    l4034:
  6583  0496' 9E00'              	bcf	(___fladd@b+2)^0,7,c
  6584  0498'                    l4036:
  6585  0498' 90D8               	bcf	status,0,c
  6586  049A' 3000'              	rrcf	___fladd@bexp^0,w,c
  6587  049C' 6E00'              	movwf	(___fladd@b+3)^0,c
  6588  049E' AE00'              	btfss	___fladd@signs^0,7,c
  6589  04A0' EF00' F000'        	goto	u4051
  6590  04A4' EF00' F000'        	goto	u4050
  6591  04A8'                    u4051:
  6592  04A8' EF00' F000'        	goto	l4042
  6593  04AC'                    u4050:
  6594  04AC' 8E00'              	bsf	(___fladd@b+3)^0,7,c
  6595  04AE'                    l4042:
  6596  04AE' C000' F000'        	movff	___fladd@b,?___fladd
  6597  04B2' C001' F001'        	movff	___fladd@b+1,?___fladd+1
  6598  04B6' C002' F002'        	movff	___fladd@b+2,?___fladd+2
  6599  04BA' C003' F003'        	movff	___fladd@b+3,?___fladd+3
  6600  04BE'                    l1147:
  6601  04BE' 0012               	return		;funcret
  6602  04C0'                    __end_of___fladd:
  6603                           	callstack 0
  6604                           
  6605 ;; *************** function ___flneg *****************
  6606 ;; Defined at:
  6607 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\flneg.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;  f1              4    0[COMRAM] unsigned char 
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  4    0[COMRAM] unsigned char 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2, status,0
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6621 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6624 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6625 ;;Total ram usage:        4 bytes
  6626 ;; Hardware stack levels used: 1
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_efgtoa
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text21
  6635  0000'                    __ptext21:
  6636                           	callstack 0
  6637  0000'                    ___flneg:
  6638                           	callstack 25
  6639  0000' 5000'              	movf	___flneg@f1^0,w,c
  6640  0002' 1000'              	iorwf	(___flneg@f1+1)^0,w,c
  6641  0004' 1000'              	iorwf	(___flneg@f1+2)^0,w,c
  6642  0006' 1000'              	iorwf	(___flneg@f1+3)^0,w,c
  6643  0008' B4D8               	btfsc	status,2,c
  6644  000A' EF00' F000'        	goto	u4851
  6645  000E' EF00' F000'        	goto	u4850
  6646  0012'                    u4851:
  6647  0012' EF00' F000'        	goto	l4550
  6648  0016'                    u4850:
  6649  0016' 0E00               	movlw	0
  6650  0018' 1A00'              	xorwf	___flneg@f1^0,f,c
  6651  001A' 0E00               	movlw	0
  6652  001C' 1A00'              	xorwf	(___flneg@f1+1)^0,f,c
  6653  001E' 0E00               	movlw	0
  6654  0020' 1A00'              	xorwf	(___flneg@f1+2)^0,f,c
  6655  0022' 0E80               	movlw	128
  6656  0024' 1A00'              	xorwf	(___flneg@f1+3)^0,f,c
  6657  0026'                    l4550:
  6658  0026' C000' F000'        	movff	___flneg@f1,?___flneg
  6659  002A' C001' F001'        	movff	___flneg@f1+1,?___flneg+1
  6660  002E' C002' F002'        	movff	___flneg@f1+2,?___flneg+2
  6661  0032' C003' F003'        	movff	___flneg@f1+3,?___flneg+3
  6662  0036' 0012               	return		;funcret
  6663  0038'                    __end_of___flneg:
  6664                           	callstack 0
  6665                           
  6666 ;; *************** function ___flmul *****************
  6667 ;; Defined at:
  6668 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcmul.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;  b               4    0[COMRAM] unsigned char 
  6671 ;;  a               4    4[COMRAM] unsigned char 
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  prod            4   19[COMRAM] struct .
  6674 ;;  grs             4   13[COMRAM] unsigned long 
  6675 ;;  temp            2   23[COMRAM] struct .
  6676 ;;  bexp            1   18[COMRAM] unsigned char 
  6677 ;;  aexp            1   17[COMRAM] unsigned char 
  6678 ;;  sign            1   12[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  4    0[COMRAM] unsigned char 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0, prodl, prodh
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6688 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6689 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6690 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6691 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6692 ;;Total ram usage:       25 bytes
  6693 ;; Hardware stack levels used: 1
  6694 ;; This function calls:
  6695 ;;		Nothing
  6696 ;; This function is called by:
  6697 ;;		_efgtoa
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text22
  6702  0000'                    __ptext22:
  6703                           	callstack 0
  6704  0000'                    ___flmul:
  6705                           	callstack 25
  6706  0000' 5000'              	movf	(___flmul@b+3)^0,w,c
  6707  0002' 0B80               	andlw	128
  6708  0004' 6E00'              	movwf	___flmul@sign^0,c
  6709  0006' 5000'              	movf	(___flmul@b+3)^0,w,c
  6710  0008' 2400'              	addwf	(___flmul@b+3)^0,w,c
  6711  000A' 6E00'              	movwf	___flmul@bexp^0,c
  6712  000C' AE00'              	btfss	(___flmul@b+2)^0,7,c
  6713  000E' EF00' F000'        	goto	u4461
  6714  0012' EF00' F000'        	goto	u4460
  6715  0016'                    u4461:
  6716  0016' EF00' F000'        	goto	l4298
  6717  001A'                    u4460:
  6718  001A' 8000'              	bsf	___flmul@bexp^0,0,c
  6719  001C'                    l4298:
  6720  001C' 5000'              	movf	___flmul@bexp^0,w,c
  6721  001E' B4D8               	btfsc	status,2,c
  6722  0020' EF00' F000'        	goto	u4471
  6723  0024' EF00' F000'        	goto	u4470
  6724  0028'                    u4471:
  6725  0028' EF00' F000'        	goto	l4306
  6726  002C'                    u4470:
  6727  002C' 2800'              	incf	___flmul@bexp^0,w,c
  6728  002E' A4D8               	btfss	status,2,c
  6729  0030' EF00' F000'        	goto	u4481
  6730  0034' EF00' F000'        	goto	u4480
  6731  0038'                    u4481:
  6732  0038' EF00' F000'        	goto	l4304
  6733  003C'                    u4480:
  6734  003C' 0E00               	movlw	0
  6735  003E' 6E00'              	movwf	___flmul@b^0,c
  6736  0040' 0E00               	movlw	0
  6737  0042' 6E00'              	movwf	(___flmul@b+1)^0,c
  6738  0044' 0E00               	movlw	0
  6739  0046' 6E00'              	movwf	(___flmul@b+2)^0,c
  6740  0048' 0E00               	movlw	0
  6741  004A' 6E00'              	movwf	(___flmul@b+3)^0,c
  6742  004C'                    l4304:
  6743  004C' 8E00'              	bsf	(___flmul@b+2)^0,7,c
  6744  004E' EF00' F000'        	goto	l4308
  6745  0052'                    l4306:
  6746  0052' 0E00               	movlw	0
  6747  0054' 6E00'              	movwf	___flmul@b^0,c
  6748  0056' 0E00               	movlw	0
  6749  0058' 6E00'              	movwf	(___flmul@b+1)^0,c
  6750  005A' 0E00               	movlw	0
  6751  005C' 6E00'              	movwf	(___flmul@b+2)^0,c
  6752  005E' 0E00               	movlw	0
  6753  0060' 6E00'              	movwf	(___flmul@b+3)^0,c
  6754  0062'                    l4308:
  6755  0062' 5000'              	movf	(___flmul@a+3)^0,w,c
  6756  0064' 0B80               	andlw	128
  6757  0066' 1A00'              	xorwf	___flmul@sign^0,f,c
  6758  0068' 5000'              	movf	(___flmul@a+3)^0,w,c
  6759  006A' 2400'              	addwf	(___flmul@a+3)^0,w,c
  6760  006C' 6E00'              	movwf	___flmul@aexp^0,c
  6761  006E' AE00'              	btfss	(___flmul@a+2)^0,7,c
  6762  0070' EF00' F000'        	goto	u4491
  6763  0074' EF00' F000'        	goto	u4490
  6764  0078'                    u4491:
  6765  0078' EF00' F000'        	goto	l4316
  6766  007C'                    u4490:
  6767  007C' 8000'              	bsf	___flmul@aexp^0,0,c
  6768  007E'                    l4316:
  6769  007E' 5000'              	movf	___flmul@aexp^0,w,c
  6770  0080' B4D8               	btfsc	status,2,c
  6771  0082' EF00' F000'        	goto	u4501
  6772  0086' EF00' F000'        	goto	u4500
  6773  008A'                    u4501:
  6774  008A' EF00' F000'        	goto	l4324
  6775  008E'                    u4500:
  6776  008E' 2800'              	incf	___flmul@aexp^0,w,c
  6777  0090' A4D8               	btfss	status,2,c
  6778  0092' EF00' F000'        	goto	u4511
  6779  0096' EF00' F000'        	goto	u4510
  6780  009A'                    u4511:
  6781  009A' EF00' F000'        	goto	l4322
  6782  009E'                    u4510:
  6783  009E' 0E00               	movlw	0
  6784  00A0' 6E00'              	movwf	___flmul@a^0,c
  6785  00A2' 0E00               	movlw	0
  6786  00A4' 6E00'              	movwf	(___flmul@a+1)^0,c
  6787  00A6' 0E00               	movlw	0
  6788  00A8' 6E00'              	movwf	(___flmul@a+2)^0,c
  6789  00AA' 0E00               	movlw	0
  6790  00AC' 6E00'              	movwf	(___flmul@a+3)^0,c
  6791  00AE'                    l4322:
  6792  00AE' 8E00'              	bsf	(___flmul@a+2)^0,7,c
  6793  00B0' EF00' F000'        	goto	l1224
  6794  00B4'                    l4324:
  6795  00B4' 0E00               	movlw	0
  6796  00B6' 6E00'              	movwf	___flmul@a^0,c
  6797  00B8' 0E00               	movlw	0
  6798  00BA' 6E00'              	movwf	(___flmul@a+1)^0,c
  6799  00BC' 0E00               	movlw	0
  6800  00BE' 6E00'              	movwf	(___flmul@a+2)^0,c
  6801  00C0' 0E00               	movlw	0
  6802  00C2' 6E00'              	movwf	(___flmul@a+3)^0,c
  6803  00C4'                    l1224:
  6804  00C4' 5000'              	movf	___flmul@aexp^0,w,c
  6805  00C6' B4D8               	btfsc	status,2,c
  6806  00C8' EF00' F000'        	goto	u4521
  6807  00CC' EF00' F000'        	goto	u4520
  6808  00D0'                    u4521:
  6809  00D0' EF00' F000'        	goto	l4328
  6810  00D4'                    u4520:
  6811  00D4' 5000'              	movf	___flmul@bexp^0,w,c
  6812  00D6' A4D8               	btfss	status,2,c
  6813  00D8' EF00' F000'        	goto	u4531
  6814  00DC' EF00' F000'        	goto	u4530
  6815  00E0'                    u4531:
  6816  00E0' EF00' F000'        	goto	l4332
  6817  00E4'                    u4530:
  6818  00E4'                    l4328:
  6819  00E4' 0E00               	movlw	0
  6820  00E6' 6E00'              	movwf	?___flmul^0,c
  6821  00E8' 0E00               	movlw	0
  6822  00EA' 6E00'              	movwf	(?___flmul+1)^0,c
  6823  00EC' 0E00               	movlw	0
  6824  00EE' 6E00'              	movwf	(?___flmul+2)^0,c
  6825  00F0' 0E00               	movlw	0
  6826  00F2' 6E00'              	movwf	(?___flmul+3)^0,c
  6827  00F4' EF00' F000'        	goto	l1228
  6828  00F8'                    l4332:
  6829  00F8' 5000'              	movf	(___flmul@a+2)^0,w,c
  6830  00FA' 0200'              	mulwf	___flmul@b^0,c
  6831  00FC' CFF3 F017'         	movff	prodl,___flmul@temp
  6832  0100' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6833  0104' 5000'              	movf	___flmul@temp^0,w,c
  6834  0106' 6E00'              	movwf	___flmul@grs^0,c
  6835  0108' 6A00'              	clrf	(___flmul@grs+1)^0,c
  6836  010A' 6A00'              	clrf	(___flmul@grs+2)^0,c
  6837  010C' 6A00'              	clrf	(___flmul@grs+3)^0,c
  6838  010E' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6839  0110' 6E00'              	movwf	___flmul@prod^0,c
  6840  0112' 6A00'              	clrf	(___flmul@prod+1)^0,c
  6841  0114' 6A00'              	clrf	(___flmul@prod+2)^0,c
  6842  0116' 6A00'              	clrf	(___flmul@prod+3)^0,c
  6843  0118' 5000'              	movf	(___flmul@a+1)^0,w,c
  6844  011A' 0200'              	mulwf	(___flmul@b+1)^0,c
  6845  011C' CFF3 F017'         	movff	prodl,___flmul@temp
  6846  0120' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6847  0124' 5000'              	movf	___flmul@temp^0,w,c
  6848  0126' 2600'              	addwf	___flmul@grs^0,f,c
  6849  0128' 0E00               	movlw	0
  6850  012A' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  6851  012C' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  6852  012E' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  6853  0130' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6854  0132' 2600'              	addwf	___flmul@prod^0,f,c
  6855  0134' 0E00               	movlw	0
  6856  0136' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  6857  0138' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  6858  013A' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  6859  013C' 5000'              	movf	___flmul@a^0,w,c
  6860  013E' 0200'              	mulwf	(___flmul@b+2)^0,c
  6861  0140' CFF3 F017'         	movff	prodl,___flmul@temp
  6862  0144' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6863  0148' 5000'              	movf	___flmul@temp^0,w,c
  6864  014A' 2600'              	addwf	___flmul@grs^0,f,c
  6865  014C' 0E00               	movlw	0
  6866  014E' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  6867  0150' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  6868  0152' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  6869  0154' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6870  0156' 2600'              	addwf	___flmul@prod^0,f,c
  6871  0158' 0E00               	movlw	0
  6872  015A' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  6873  015C' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  6874  015E' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  6875  0160' C00F' F010'        	movff	___flmul@grs+2,___flmul@grs+3
  6876  0164' C00E' F00F'        	movff	___flmul@grs+1,___flmul@grs+2
  6877  0168' C00D' F00E'        	movff	___flmul@grs,___flmul@grs+1
  6878  016C' 6A00'              	clrf	___flmul@grs^0,c
  6879  016E' 5000'              	movf	___flmul@a^0,w,c
  6880  0170' 0200'              	mulwf	(___flmul@b+1)^0,c
  6881  0172' CFF3 F017'         	movff	prodl,___flmul@temp
  6882  0176' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6883  017A' 5000'              	movf	___flmul@temp^0,w,c
  6884  017C' 2600'              	addwf	___flmul@grs^0,f,c
  6885  017E' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6886  0180' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  6887  0182' 0E00               	movlw	0
  6888  0184' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  6889  0186' 0E00               	movlw	0
  6890  0188' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  6891  018A' 5000'              	movf	(___flmul@a+1)^0,w,c
  6892  018C' 0200'              	mulwf	___flmul@b^0,c
  6893  018E' CFF3 F017'         	movff	prodl,___flmul@temp
  6894  0192' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6895  0196' 5000'              	movf	___flmul@temp^0,w,c
  6896  0198' 2600'              	addwf	___flmul@grs^0,f,c
  6897  019A' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6898  019C' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  6899  019E' 0E00               	movlw	0
  6900  01A0' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  6901  01A2' 0E00               	movlw	0
  6902  01A4' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  6903  01A6' C00F' F010'        	movff	___flmul@grs+2,___flmul@grs+3
  6904  01AA' C00E' F00F'        	movff	___flmul@grs+1,___flmul@grs+2
  6905  01AE' C00D' F00E'        	movff	___flmul@grs,___flmul@grs+1
  6906  01B2' 6A00'              	clrf	___flmul@grs^0,c
  6907  01B4' 5000'              	movf	___flmul@a^0,w,c
  6908  01B6' 0200'              	mulwf	___flmul@b^0,c
  6909  01B8' CFF3 F017'         	movff	prodl,___flmul@temp
  6910  01BC' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6911  01C0' 5000'              	movf	___flmul@temp^0,w,c
  6912  01C2' 2600'              	addwf	___flmul@grs^0,f,c
  6913  01C4' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6914  01C6' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  6915  01C8' 0E00               	movlw	0
  6916  01CA' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  6917  01CC' 0E00               	movlw	0
  6918  01CE' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  6919  01D0' 5000'              	movf	(___flmul@a+2)^0,w,c
  6920  01D2' 0200'              	mulwf	(___flmul@b+1)^0,c
  6921  01D4' CFF3 F017'         	movff	prodl,___flmul@temp
  6922  01D8' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6923  01DC' 5000'              	movf	___flmul@temp^0,w,c
  6924  01DE' 2600'              	addwf	___flmul@prod^0,f,c
  6925  01E0' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6926  01E2' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  6927  01E4' 0E00               	movlw	0
  6928  01E6' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  6929  01E8' 0E00               	movlw	0
  6930  01EA' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  6931  01EC' 5000'              	movf	(___flmul@a+1)^0,w,c
  6932  01EE' 0200'              	mulwf	(___flmul@b+2)^0,c
  6933  01F0' CFF3 F017'         	movff	prodl,___flmul@temp
  6934  01F4' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6935  01F8' 5000'              	movf	___flmul@temp^0,w,c
  6936  01FA' 2600'              	addwf	___flmul@prod^0,f,c
  6937  01FC' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6938  01FE' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  6939  0200' 0E00               	movlw	0
  6940  0202' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  6941  0204' 0E00               	movlw	0
  6942  0206' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  6943  0208' 5000'              	movf	(___flmul@a+2)^0,w,c
  6944  020A' 0200'              	mulwf	(___flmul@b+2)^0,c
  6945  020C' CFF3 F017'         	movff	prodl,___flmul@temp
  6946  0210' CFF4 F018'         	movff	prodh,___flmul@temp+1
  6947  0214' 5000'              	movf	___flmul@temp^0,w,c
  6948  0216' 6E00'              	movwf	??___flmul^0,c
  6949  0218' 5000'              	movf	(___flmul@temp+1)^0,w,c
  6950  021A' 6E00'              	movwf	(??___flmul+1)^0,c
  6951  021C' 6A00'              	clrf	(??___flmul+2)^0,c
  6952  021E' 6A00'              	clrf	(??___flmul+3)^0,c
  6953  0220' C00A' F00B'        	movff	??___flmul+2,??___flmul+3
  6954  0224' C009' F00A'        	movff	??___flmul+1,??___flmul+2
  6955  0228' C008' F009'        	movff	??___flmul,??___flmul+1
  6956  022C' 6A00'              	clrf	??___flmul^0,c
  6957  022E' 5000'              	movf	??___flmul^0,w,c
  6958  0230' 2600'              	addwf	___flmul@prod^0,f,c
  6959  0232' 5000'              	movf	(??___flmul+1)^0,w,c
  6960  0234' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  6961  0236' 5000'              	movf	(??___flmul+2)^0,w,c
  6962  0238' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  6963  023A' 5000'              	movf	(??___flmul+3)^0,w,c
  6964  023C' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  6965  023E' C00D' F008'        	movff	___flmul@grs,??___flmul
  6966  0242' C00E' F009'        	movff	___flmul@grs+1,??___flmul+1
  6967  0246' C00F' F00A'        	movff	___flmul@grs+2,??___flmul+2
  6968  024A' C010' F00B'        	movff	___flmul@grs+3,??___flmul+3
  6969  024E' 0E19               	movlw	25
  6970  0250' EF00' F000'        	goto	u4540
  6971  0254'                    u4545:
  6972  0254' 90D8               	bcf	status,0,c
  6973  0256' 3200'              	rrcf	(??___flmul+3)^0,f,c
  6974  0258' 3200'              	rrcf	(??___flmul+2)^0,f,c
  6975  025A' 3200'              	rrcf	(??___flmul+1)^0,f,c
  6976  025C' 3200'              	rrcf	??___flmul^0,f,c
  6977  025E'                    u4540:
  6978  025E' 2EE8               	decfsz	wreg,f,c
  6979  0260' EF00' F000'        	goto	u4545
  6980  0264' 5000'              	movf	??___flmul^0,w,c
  6981  0266' 2600'              	addwf	___flmul@prod^0,f,c
  6982  0268' 5000'              	movf	(??___flmul+1)^0,w,c
  6983  026A' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  6984  026C' 5000'              	movf	(??___flmul+2)^0,w,c
  6985  026E' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  6986  0270' 5000'              	movf	(??___flmul+3)^0,w,c
  6987  0272' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  6988  0274' C00F' F010'        	movff	___flmul@grs+2,___flmul@grs+3
  6989  0278' C00E' F00F'        	movff	___flmul@grs+1,___flmul@grs+2
  6990  027C' C00D' F00E'        	movff	___flmul@grs,___flmul@grs+1
  6991  0280' 6A00'              	clrf	___flmul@grs^0,c
  6992  0282' 5000'              	movf	___flmul@aexp^0,w,c
  6993  0284' C012' F008'        	movff	___flmul@bexp,??___flmul
  6994  0288' 6A00'              	clrf	(??___flmul+1)^0,c
  6995  028A' 2600'              	addwf	??___flmul^0,f,c
  6996  028C' 0E00               	movlw	0
  6997  028E' 2200'              	addwfc	(??___flmul+1)^0,f,c
  6998  0290' 0E82               	movlw	130
  6999  0292' 2400'              	addwf	??___flmul^0,w,c
  7000  0294' 6E00'              	movwf	___flmul@temp^0,c
  7001  0296' 0EFF               	movlw	255
  7002  0298' 2000'              	addwfc	(??___flmul+1)^0,w,c
  7003  029A' 6E00'              	movwf	(___flmul@temp+1)^0,c
  7004  029C' EF00' F000'        	goto	l4380
  7005  02A0'                    l4374:
  7006  02A0' 90D8               	bcf	status,0,c
  7007  02A2' 3600'              	rlcf	___flmul@prod^0,f,c
  7008  02A4' 3600'              	rlcf	(___flmul@prod+1)^0,f,c
  7009  02A6' 3600'              	rlcf	(___flmul@prod+2)^0,f,c
  7010  02A8' 3600'              	rlcf	(___flmul@prod+3)^0,f,c
  7011  02AA' AE00'              	btfss	(___flmul@grs+3)^0,7,c
  7012  02AC' EF00' F000'        	goto	u4551
  7013  02B0' EF00' F000'        	goto	u4550
  7014  02B4'                    u4551:
  7015  02B4' EF00' F000'        	goto	l1231
  7016  02B8'                    u4550:
  7017  02B8' 8000'              	bsf	___flmul@prod^0,0,c
  7018  02BA'                    l1231:
  7019  02BA' 90D8               	bcf	status,0,c
  7020  02BC' 3600'              	rlcf	___flmul@grs^0,f,c
  7021  02BE' 3600'              	rlcf	(___flmul@grs+1)^0,f,c
  7022  02C0' 3600'              	rlcf	(___flmul@grs+2)^0,f,c
  7023  02C2' 3600'              	rlcf	(___flmul@grs+3)^0,f,c
  7024  02C4' 0600'              	decf	___flmul@temp^0,f,c
  7025  02C6' A0D8               	btfss	status,0,c
  7026  02C8' 0600'              	decf	(___flmul@temp+1)^0,f,c
  7027  02CA'                    l4380:
  7028  02CA' AE00'              	btfss	(___flmul@prod+2)^0,7,c
  7029  02CC' EF00' F000'        	goto	u4561
  7030  02D0' EF00' F000'        	goto	u4560
  7031  02D4'                    u4561:
  7032  02D4' EF00' F000'        	goto	l4374
  7033  02D8'                    u4560:
  7034  02D8' 0E00               	movlw	0
  7035  02DA' 6E00'              	movwf	___flmul@aexp^0,c
  7036  02DC' AE00'              	btfss	(___flmul@grs+3)^0,7,c
  7037  02DE' EF00' F000'        	goto	u4571
  7038  02E2' EF00' F000'        	goto	u4570
  7039  02E6'                    u4571:
  7040  02E6' EF00' F000'        	goto	l1233
  7041  02EA'                    u4570:
  7042  02EA' 0EFF               	movlw	255
  7043  02EC' 1400'              	andwf	___flmul@grs^0,w,c
  7044  02EE' 6E00'              	movwf	??___flmul^0,c
  7045  02F0' 0EFF               	movlw	255
  7046  02F2' 1400'              	andwf	(___flmul@grs+1)^0,w,c
  7047  02F4' 6E00'              	movwf	(??___flmul+1)^0,c
  7048  02F6' 0EFF               	movlw	255
  7049  02F8' 1400'              	andwf	(___flmul@grs+2)^0,w,c
  7050  02FA' 6E00'              	movwf	(??___flmul+2)^0,c
  7051  02FC' 0E7F               	movlw	127
  7052  02FE' 1400'              	andwf	(___flmul@grs+3)^0,w,c
  7053  0300' 6E00'              	movwf	(??___flmul+3)^0,c
  7054  0302' 5000'              	movf	??___flmul^0,w,c
  7055  0304' 1000'              	iorwf	(??___flmul+1)^0,w,c
  7056  0306' 1000'              	iorwf	(??___flmul+2)^0,w,c
  7057  0308' 1000'              	iorwf	(??___flmul+3)^0,w,c
  7058  030A' B4D8               	btfsc	status,2,c
  7059  030C' EF00' F000'        	goto	u4581
  7060  0310' EF00' F000'        	goto	u4580
  7061  0314'                    u4581:
  7062  0314' EF00' F000'        	goto	l1234
  7063  0318'                    u4580:
  7064  0318'                    l4388:
  7065  0318' 0E01               	movlw	1
  7066  031A' 6E00'              	movwf	___flmul@aexp^0,c
  7067  031C' EF00' F000'        	goto	l1233
  7068  0320'                    l1234:
  7069  0320' A000'              	btfss	___flmul@prod^0,0,c
  7070  0322' EF00' F000'        	goto	u4591
  7071  0326' EF00' F000'        	goto	u4590
  7072  032A'                    u4591:
  7073  032A' EF00' F000'        	goto	l1233
  7074  032E'                    u4590:
  7075  032E' EF00' F000'        	goto	l4388
  7076  0332'                    l1233:
  7077  0332' 5000'              	movf	___flmul@aexp^0,w,c
  7078  0334' B4D8               	btfsc	status,2,c
  7079  0336' EF00' F000'        	goto	u4601
  7080  033A' EF00' F000'        	goto	u4600
  7081  033E'                    u4601:
  7082  033E' EF00' F000'        	goto	l4400
  7083  0342'                    u4600:
  7084  0342' 0E01               	movlw	1
  7085  0344' 2600'              	addwf	___flmul@prod^0,f,c
  7086  0346' 0E00               	movlw	0
  7087  0348' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  7088  034A' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  7089  034C' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  7090  034E' A000'              	btfss	(___flmul@prod+3)^0,0,c
  7091  0350' EF00' F000'        	goto	u4611
  7092  0354' EF00' F000'        	goto	u4610
  7093  0358'                    u4611:
  7094  0358' EF00' F000'        	goto	l4400
  7095  035C'                    u4610:
  7096  035C' C013' F008'        	movff	___flmul@prod,??___flmul
  7097  0360' C014' F009'        	movff	___flmul@prod+1,??___flmul+1
  7098  0364' C015' F00A'        	movff	___flmul@prod+2,??___flmul+2
  7099  0368' C016' F00B'        	movff	___flmul@prod+3,??___flmul+3
  7100  036C' 3400'              	rlcf	(??___flmul+3)^0,w,c
  7101  036E' 3200'              	rrcf	(??___flmul+3)^0,f,c
  7102  0370' 3200'              	rrcf	(??___flmul+2)^0,f,c
  7103  0372' 3200'              	rrcf	(??___flmul+1)^0,f,c
  7104  0374' 3200'              	rrcf	??___flmul^0,f,c
  7105  0376' C008' F013'        	movff	??___flmul,___flmul@prod
  7106  037A' C009' F014'        	movff	??___flmul+1,___flmul@prod+1
  7107  037E' C00A' F015'        	movff	??___flmul+2,___flmul@prod+2
  7108  0382' C00B' F016'        	movff	??___flmul+3,___flmul@prod+3
  7109  0386' 4A00'              	infsnz	___flmul@temp^0,f,c
  7110  0388' 2A00'              	incf	(___flmul@temp+1)^0,f,c
  7111  038A'                    l4400:
  7112  038A' BE00'              	btfsc	(___flmul@temp+1)^0,7,c
  7113  038C' EF00' F000'        	goto	u4621
  7114  0390' 5000'              	movf	(___flmul@temp+1)^0,w,c
  7115  0392' E108               	bnz	u4620
  7116  0394' 2800'              	incf	___flmul@temp^0,w,c
  7117  0396' A0D8               	btfss	status,0,c
  7118  0398' EF00' F000'        	goto	u4621
  7119  039C' EF00' F000'        	goto	u4620
  7120  03A0'                    u4621:
  7121  03A0' EF00' F000'        	goto	l4404
  7122  03A4'                    u4620:
  7123  03A4' 0E00               	movlw	0
  7124  03A6' 6E00'              	movwf	___flmul@prod^0,c
  7125  03A8' 0E00               	movlw	0
  7126  03AA' 6E00'              	movwf	(___flmul@prod+1)^0,c
  7127  03AC' 0E80               	movlw	128
  7128  03AE' 6E00'              	movwf	(___flmul@prod+2)^0,c
  7129  03B0' 0E7F               	movlw	127
  7130  03B2' 6E00'              	movwf	(___flmul@prod+3)^0,c
  7131  03B4' EF00' F000'        	goto	l4416
  7132  03B8'                    l4404:
  7133  03B8' BE00'              	btfsc	(___flmul@temp+1)^0,7,c
  7134  03BA' EF00' F000'        	goto	u4630
  7135  03BE' 5000'              	movf	(___flmul@temp+1)^0,w,c
  7136  03C0' E106               	bnz	u4631
  7137  03C2' 0400'              	decf	___flmul@temp^0,w,c
  7138  03C4' B0D8               	btfsc	status,0,c
  7139  03C6' EF00' F000'        	goto	u4631
  7140  03CA' EF00' F000'        	goto	u4630
  7141  03CE'                    u4631:
  7142  03CE' EF00' F000'        	goto	l1241
  7143  03D2'                    u4630:
  7144  03D2' 0E00               	movlw	0
  7145  03D4' 6E00'              	movwf	___flmul@prod^0,c
  7146  03D6' 0E00               	movlw	0
  7147  03D8' 6E00'              	movwf	(___flmul@prod+1)^0,c
  7148  03DA' 0E00               	movlw	0
  7149  03DC' 6E00'              	movwf	(___flmul@prod+2)^0,c
  7150  03DE' 0E00               	movlw	0
  7151  03E0' 6E00'              	movwf	(___flmul@prod+3)^0,c
  7152  03E2' 0E00               	movlw	0
  7153  03E4' 6E00'              	movwf	___flmul@sign^0,c
  7154  03E6' EF00' F000'        	goto	l4416
  7155  03EA'                    l1241:
  7156  03EA' C017' F012'        	movff	___flmul@temp,___flmul@bexp
  7157  03EE' 0EFF               	movlw	255
  7158  03F0' 1600'              	andwf	___flmul@prod^0,f,c
  7159  03F2' 0EFF               	movlw	255
  7160  03F4' 1600'              	andwf	(___flmul@prod+1)^0,f,c
  7161  03F6' 0E7F               	movlw	127
  7162  03F8' 1600'              	andwf	(___flmul@prod+2)^0,f,c
  7163  03FA' 0E00               	movlw	0
  7164  03FC' 1600'              	andwf	(___flmul@prod+3)^0,f,c
  7165  03FE' A000'              	btfss	___flmul@bexp^0,0,c
  7166  0400' EF00' F000'        	goto	u4641
  7167  0404' EF00' F000'        	goto	u4640
  7168  0408'                    u4641:
  7169  0408' EF00' F000'        	goto	l4414
  7170  040C'                    u4640:
  7171  040C' 8E00'              	bsf	(___flmul@prod+2)^0,7,c
  7172  040E'                    l4414:
  7173  040E' 90D8               	bcf	status,0,c
  7174  0410' 3000'              	rrcf	___flmul@bexp^0,w,c
  7175  0412' 6E00'              	movwf	(___flmul@prod+3)^0,c
  7176  0414'                    l4416:
  7177  0414' 5000'              	movf	___flmul@sign^0,w,c
  7178  0416' 1200'              	iorwf	(___flmul@prod+3)^0,f,c
  7179  0418' C013' F000'        	movff	___flmul@prod,?___flmul
  7180  041C' C014' F001'        	movff	___flmul@prod+1,?___flmul+1
  7181  0420' C015' F002'        	movff	___flmul@prod+2,?___flmul+2
  7182  0424' C016' F003'        	movff	___flmul@prod+3,?___flmul+3
  7183  0428'                    l1228:
  7184  0428' 0012               	return		;funcret
  7185  042A'                    __end_of___flmul:
  7186                           	callstack 0
  7187                           
  7188 ;; *************** function ___fleq *****************
  7189 ;; Defined at:
  7190 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fleq.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  ff1             4    0[COMRAM] unsigned char 
  7193 ;;  ff2             4    4[COMRAM] unsigned char 
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;		None               void
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7205 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7207 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7208 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7209 ;;Total ram usage:       12 bytes
  7210 ;; Hardware stack levels used: 1
  7211 ;; This function calls:
  7212 ;;		Nothing
  7213 ;; This function is called by:
  7214 ;;		_efgtoa
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           	psect	text23
  7219  0000'                    __ptext23:
  7220                           	callstack 0
  7221  0000'                    ___fleq:
  7222                           	callstack 25
  7223  0000' 0E00               	movlw	0
  7224  0002' 1400'              	andwf	___fleq@ff1^0,w,c
  7225  0004' 6E00'              	movwf	??___fleq^0,c
  7226  0006' 0E00               	movlw	0
  7227  0008' 1400'              	andwf	(___fleq@ff1+1)^0,w,c
  7228  000A' 6E00'              	movwf	(??___fleq+1)^0,c
  7229  000C' 0E80               	movlw	128
  7230  000E' 1400'              	andwf	(___fleq@ff1+2)^0,w,c
  7231  0010' 6E00'              	movwf	(??___fleq+2)^0,c
  7232  0012' 0E7F               	movlw	127
  7233  0014' 1400'              	andwf	(___fleq@ff1+3)^0,w,c
  7234  0016' 6E00'              	movwf	(??___fleq+3)^0,c
  7235  0018' 5000'              	movf	??___fleq^0,w,c
  7236  001A' 1000'              	iorwf	(??___fleq+1)^0,w,c
  7237  001C' 1000'              	iorwf	(??___fleq+2)^0,w,c
  7238  001E' 1000'              	iorwf	(??___fleq+3)^0,w,c
  7239  0020' A4D8               	btfss	status,2,c
  7240  0022' EF00' F000'        	goto	u4771
  7241  0026' EF00' F000'        	goto	u4770
  7242  002A'                    u4771:
  7243  002A' EF00' F000'        	goto	l4512
  7244  002E'                    u4770:
  7245  002E' 0E00               	movlw	0
  7246  0030' 6E00'              	movwf	___fleq@ff1^0,c
  7247  0032' 0E00               	movlw	0
  7248  0034' 6E00'              	movwf	(___fleq@ff1+1)^0,c
  7249  0036' 0E00               	movlw	0
  7250  0038' 6E00'              	movwf	(___fleq@ff1+2)^0,c
  7251  003A' 0E00               	movlw	0
  7252  003C' 6E00'              	movwf	(___fleq@ff1+3)^0,c
  7253  003E'                    l4512:
  7254  003E' 0E00               	movlw	0
  7255  0040' 1400'              	andwf	___fleq@ff2^0,w,c
  7256  0042' 6E00'              	movwf	??___fleq^0,c
  7257  0044' 0E00               	movlw	0
  7258  0046' 1400'              	andwf	(___fleq@ff2+1)^0,w,c
  7259  0048' 6E00'              	movwf	(??___fleq+1)^0,c
  7260  004A' 0E80               	movlw	128
  7261  004C' 1400'              	andwf	(___fleq@ff2+2)^0,w,c
  7262  004E' 6E00'              	movwf	(??___fleq+2)^0,c
  7263  0050' 0E7F               	movlw	127
  7264  0052' 1400'              	andwf	(___fleq@ff2+3)^0,w,c
  7265  0054' 6E00'              	movwf	(??___fleq+3)^0,c
  7266  0056' 5000'              	movf	??___fleq^0,w,c
  7267  0058' 1000'              	iorwf	(??___fleq+1)^0,w,c
  7268  005A' 1000'              	iorwf	(??___fleq+2)^0,w,c
  7269  005C' 1000'              	iorwf	(??___fleq+3)^0,w,c
  7270  005E' A4D8               	btfss	status,2,c
  7271  0060' EF00' F000'        	goto	u4781
  7272  0064' EF00' F000'        	goto	u4780
  7273  0068'                    u4781:
  7274  0068' EF00' F000'        	goto	l4516
  7275  006C'                    u4780:
  7276  006C' 0E00               	movlw	0
  7277  006E' 6E00'              	movwf	___fleq@ff2^0,c
  7278  0070' 0E00               	movlw	0
  7279  0072' 6E00'              	movwf	(___fleq@ff2+1)^0,c
  7280  0074' 0E00               	movlw	0
  7281  0076' 6E00'              	movwf	(___fleq@ff2+2)^0,c
  7282  0078' 0E00               	movlw	0
  7283  007A' 6E00'              	movwf	(___fleq@ff2+3)^0,c
  7284  007C'                    l4516:
  7285  007C' 5000'              	movf	___fleq@ff2^0,w,c
  7286  007E' 1800'              	xorwf	___fleq@ff1^0,w,c
  7287  0080' E10F               	bnz	u4790
  7288  0082' 5000'              	movf	(___fleq@ff2+1)^0,w,c
  7289  0084' 1800'              	xorwf	(___fleq@ff1+1)^0,w,c
  7290  0086' E10C               	bnz	u4790
  7291  0088' 5000'              	movf	(___fleq@ff2+2)^0,w,c
  7292  008A' 1800'              	xorwf	(___fleq@ff1+2)^0,w,c
  7293  008C' E109               	bnz	u4790
  7294  008E' 5000'              	movf	(___fleq@ff2+3)^0,w,c
  7295  0090' 1800'              	xorwf	(___fleq@ff1+3)^0,w,c
  7296  0092' B4D8               	btfsc	status,2,c
  7297  0094' EF00' F000'        	goto	u4791
  7298  0098' EF00' F000'        	goto	u4790
  7299  009C'                    u4791:
  7300  009C' EF00' F000'        	goto	l4520
  7301  00A0'                    u4790:
  7302  00A0' 90D8               	bcf	status,0,c
  7303  00A2' EF00' F000'        	goto	l869
  7304  00A6'                    l4520:
  7305  00A6' 80D8               	bsf	status,0,c
  7306  00A8'                    l869:
  7307  00A8' 0012               	return		;funcret
  7308  00AA'                    __end_of___fleq:
  7309                           	callstack 0
  7310                           
  7311 ;; *************** function ___awmod *****************
  7312 ;; Defined at:
  7313 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  dividend        2    0[COMRAM] int 
  7316 ;;  divisor         2    2[COMRAM] int 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  sign            1    5[COMRAM] unsigned char 
  7319 ;;  counter         1    4[COMRAM] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  2    0[COMRAM] int 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2, status,0
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7329 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7332 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7333 ;;Total ram usage:        6 bytes
  7334 ;; Hardware stack levels used: 1
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		_efgtoa
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text24
  7343  0000'                    __ptext24:
  7344                           	callstack 0
  7345  0000'                    ___awmod:
  7346                           	callstack 25
  7347  0000' 0E00               	movlw	0
  7348  0002' 6E00'              	movwf	___awmod@sign^0,c
  7349  0004' BE00'              	btfsc	(___awmod@dividend+1)^0,7,c
  7350  0006' EF00' F000'        	goto	u4710
  7351  000A' EF00' F000'        	goto	u4711
  7352  000E'                    u4711:
  7353  000E' EF00' F000'        	goto	l4480
  7354  0012'                    u4710:
  7355  0012' 6C00'              	negf	___awmod@dividend^0,c
  7356  0014' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
  7357  0016' B0D8               	btfsc	status,0,c
  7358  0018' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
  7359  001A' 0E01               	movlw	1
  7360  001C' 6E00'              	movwf	___awmod@sign^0,c
  7361  001E'                    l4480:
  7362  001E' BE00'              	btfsc	(___awmod@divisor+1)^0,7,c
  7363  0020' EF00' F000'        	goto	u4720
  7364  0024' EF00' F000'        	goto	u4721
  7365  0028'                    u4721:
  7366  0028' EF00' F000'        	goto	l4484
  7367  002C'                    u4720:
  7368  002C' 6C00'              	negf	___awmod@divisor^0,c
  7369  002E' 1E00'              	comf	(___awmod@divisor+1)^0,f,c
  7370  0030' B0D8               	btfsc	status,0,c
  7371  0032' 2A00'              	incf	(___awmod@divisor+1)^0,f,c
  7372  0034'                    l4484:
  7373  0034' 5000'              	movf	___awmod@divisor^0,w,c
  7374  0036' 1000'              	iorwf	(___awmod@divisor+1)^0,w,c
  7375  0038' B4D8               	btfsc	status,2,c
  7376  003A' EF00' F000'        	goto	u4731
  7377  003E' EF00' F000'        	goto	u4730
  7378  0042'                    u4731:
  7379  0042' EF00' F000'        	goto	l4500
  7380  0046'                    u4730:
  7381  0046' 0E01               	movlw	1
  7382  0048' 6E00'              	movwf	___awmod@counter^0,c
  7383  004A' EF00' F000'        	goto	l4490
  7384  004E'                    l4488:
  7385  004E' 90D8               	bcf	status,0,c
  7386  0050' 3600'              	rlcf	___awmod@divisor^0,f,c
  7387  0052' 3600'              	rlcf	(___awmod@divisor+1)^0,f,c
  7388  0054' 2A00'              	incf	___awmod@counter^0,f,c
  7389  0056'                    l4490:
  7390  0056' AE00'              	btfss	(___awmod@divisor+1)^0,7,c
  7391  0058' EF00' F000'        	goto	u4741
  7392  005C' EF00' F000'        	goto	u4740
  7393  0060'                    u4741:
  7394  0060' EF00' F000'        	goto	l4488
  7395  0064'                    u4740:
  7396  0064'                    l4492:
  7397  0064' 5000'              	movf	___awmod@divisor^0,w,c
  7398  0066' 5C00'              	subwf	___awmod@dividend^0,w,c
  7399  0068' 5000'              	movf	(___awmod@divisor+1)^0,w,c
  7400  006A' 5800'              	subwfb	(___awmod@dividend+1)^0,w,c
  7401  006C' A0D8               	btfss	status,0,c
  7402  006E' EF00' F000'        	goto	u4751
  7403  0072' EF00' F000'        	goto	u4750
  7404  0076'                    u4751:
  7405  0076' EF00' F000'        	goto	l4496
  7406  007A'                    u4750:
  7407  007A' 5000'              	movf	___awmod@divisor^0,w,c
  7408  007C' 5E00'              	subwf	___awmod@dividend^0,f,c
  7409  007E' 5000'              	movf	(___awmod@divisor+1)^0,w,c
  7410  0080' 5A00'              	subwfb	(___awmod@dividend+1)^0,f,c
  7411  0082'                    l4496:
  7412  0082' 90D8               	bcf	status,0,c
  7413  0084' 3200'              	rrcf	(___awmod@divisor+1)^0,f,c
  7414  0086' 3200'              	rrcf	___awmod@divisor^0,f,c
  7415  0088' 2E00'              	decfsz	___awmod@counter^0,f,c
  7416  008A' EF00' F000'        	goto	l4492
  7417  008E'                    l4500:
  7418  008E' 5000'              	movf	___awmod@sign^0,w,c
  7419  0090' B4D8               	btfsc	status,2,c
  7420  0092' EF00' F000'        	goto	u4761
  7421  0096' EF00' F000'        	goto	u4760
  7422  009A'                    u4761:
  7423  009A' EF00' F000'        	goto	l4504
  7424  009E'                    u4760:
  7425  009E' 6C00'              	negf	___awmod@dividend^0,c
  7426  00A0' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
  7427  00A2' B0D8               	btfsc	status,0,c
  7428  00A4' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
  7429  00A6'                    l4504:
  7430  00A6' C000' F000'        	movff	___awmod@dividend,?___awmod
  7431  00AA' C001' F001'        	movff	___awmod@dividend+1,?___awmod+1
  7432  00AE' 0012               	return		;funcret
  7433  00B0'                    __end_of___awmod:
  7434                           	callstack 0
  7435                           
  7436 ;; *************** function _dtoa *****************
  7437 ;; Defined at:
  7438 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  7441 ;;		 -> sprintf@f(6), 
  7442 ;;  d               8   29[COMRAM] long long 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  n               8   53[COMRAM] long long 
  7445 ;;  i               2   61[COMRAM] int 
  7446 ;;  s               2   51[COMRAM] int 
  7447 ;;  w               2   49[COMRAM] int 
  7448 ;;  p               2   47[COMRAM] int 
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  2   27[COMRAM] int 
  7451 ;; Registers used:
  7452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7458 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7459 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7460 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7461 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7462 ;;Total ram usage:       36 bytes
  7463 ;; Hardware stack levels used: 1
  7464 ;; Hardware stack levels required when called: 4
  7465 ;; This function calls:
  7466 ;;		___aodiv
  7467 ;;		___aomod
  7468 ;;		_abs
  7469 ;;		_pad
  7470 ;; This function is called by:
  7471 ;;		_vfpfcnvrt
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text25
  7476  0000'                    __ptext25:
  7477                           	callstack 0
  7478  0000'                    _dtoa:
  7479                           	callstack 22
  7480  0000'                    
  7481                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  7482  0000' C01D' F035'        	movff	dtoa@d,dtoa@n
  7483  0004' C01E' F036'        	movff	dtoa@d+1,dtoa@n+1
  7484  0008' C01F' F037'        	movff	dtoa@d+2,dtoa@n+2
  7485  000C' C020' F038'        	movff	dtoa@d+3,dtoa@n+3
  7486  0010' C021' F039'        	movff	dtoa@d+4,dtoa@n+4
  7487  0014' C022' F03A'        	movff	dtoa@d+5,dtoa@n+5
  7488  0018' C023' F03B'        	movff	dtoa@d+6,dtoa@n+6
  7489  001C' C024' F03C'        	movff	dtoa@d+7,dtoa@n+7
  7490  0020'                    
  7491                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  7492  0020' BE00'              	btfsc	(dtoa@n+7)^0,7,c
  7493  0022' EF00' F000'        	goto	u5261
  7494  0026' EF00' F000'        	goto	u5260
  7495  002A'                    u5261:
  7496  002A' 0E01               	movlw	1
  7497  002C' EF00' F000'        	goto	u5270
  7498  0030'                    u5260:
  7499  0030' 0E00               	movlw	0
  7500  0032'                    u5270:
  7501  0032' 6E00'              	movwf	dtoa@s^0,c
  7502  0034' 6A00'              	clrf	(dtoa@s+1)^0,c
  7503                           
  7504                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  7505  0036' 5000'              	movf	dtoa@s^0,w,c
  7506  0038' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  7507  003A' B4D8               	btfsc	status,2,c
  7508  003C' EF00' F000'        	goto	u5281
  7509  0040' EF00' F000'        	goto	u5280
  7510  0044'                    u5281:
  7511  0044' EF00' F000'        	goto	l4714
  7512  0048'                    u5280:
  7513  0048'                    
  7514                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  7515  0048' 1E00'              	comf	(dtoa@n+7)^0,f,c
  7516  004A' 1E00'              	comf	(dtoa@n+6)^0,f,c
  7517  004C' 1E00'              	comf	(dtoa@n+5)^0,f,c
  7518  004E' 1E00'              	comf	(dtoa@n+4)^0,f,c
  7519  0050' 1E00'              	comf	(dtoa@n+3)^0,f,c
  7520  0052' 1E00'              	comf	(dtoa@n+2)^0,f,c
  7521  0054' 1E00'              	comf	(dtoa@n+1)^0,f,c
  7522  0056' 6C00'              	negf	dtoa@n^0,c
  7523  0058' 0E00               	movlw	0
  7524  005A' 2200'              	addwfc	(dtoa@n+1)^0,f,c
  7525  005C' 2200'              	addwfc	(dtoa@n+2)^0,f,c
  7526  005E' 2200'              	addwfc	(dtoa@n+3)^0,f,c
  7527  0060' 2200'              	addwfc	(dtoa@n+4)^0,f,c
  7528  0062' 2200'              	addwfc	(dtoa@n+5)^0,f,c
  7529  0064' 2200'              	addwfc	(dtoa@n+6)^0,f,c
  7530  0066' 2200'              	addwfc	(dtoa@n+7)^0,f,c
  7531  0068'                    l4714:
  7532                           
  7533                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  7534  0068' 0100               	movlb	0	; () banked
  7535  006A' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  7536  006C' EF00' F000'        	goto	u5291
  7537  0070' EF00' F000'        	goto	u5290
  7538  0074'                    u5291:
  7539  0074' EF00' F000'        	goto	l4718
  7540  0078'                    u5290:
  7541  0078'                    
  7542                           ; BSR set to: 0
  7543                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  7544  0078' 9300'              	bcf	_flags& (0+255),1,b
  7545  007A'                    l4718:
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  7549  007A' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  7550  007C' EF00' F000'        	goto	u5300
  7551  0080' 5100'              	movf	(_prec+1)& (0+255),w,b
  7552  0082' E106               	bnz	u5301
  7553  0084' 0500'              	decf	_prec& (0+255),w,b
  7554  0086' B0D8               	btfsc	status,0,c
  7555  0088' EF00' F000'        	goto	u5301
  7556  008C' EF00' F000'        	goto	u5300
  7557  0090'                    u5301:
  7558  0090' EF00' F000'        	goto	l1342
  7559  0094'                    u5300:
  7560  0094'                    
  7561                           ; BSR set to: 0
  7562  0094' 0E00               	movlw	0
  7563  0096' 6E00'              	movwf	(dtoa@p+1)^0,c
  7564  0098' 0E01               	movlw	1
  7565  009A' 6E00'              	movwf	dtoa@p^0,c
  7566  009C' EF00' F000'        	goto	l1344
  7567  00A0'                    l1342:
  7568                           
  7569                           ; BSR set to: 0
  7570  00A0' C004' F02F'        	movff	_prec,dtoa@p
  7571  00A4' C005' F030'        	movff	_prec+1,dtoa@p+1
  7572  00A8'                    l1344:
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  7576  00A8' C002' F031'        	movff	_width,dtoa@w
  7577  00AC' C003' F032'        	movff	_width+1,dtoa@w+1
  7578  00B0'                    
  7579                           ; BSR set to: 0
  7580                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  7581  00B0' 5000'              	movf	dtoa@s^0,w,c
  7582  00B2' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  7583  00B4' A4D8               	btfss	status,2,c
  7584  00B6' EF00' F000'        	goto	u5311
  7585  00BA' EF00' F000'        	goto	u5310
  7586  00BE'                    u5311:
  7587  00BE' EF00' F000'        	goto	l4726
  7588  00C2'                    u5310:
  7589  00C2'                    
  7590                           ; BSR set to: 0
  7591  00C2' A500'              	btfss	_flags& (0+255),2,b
  7592  00C4' EF00' F000'        	goto	u5321
  7593  00C8' EF00' F000'        	goto	u5320
  7594  00CC'                    u5321:
  7595  00CC' EF00' F000'        	goto	l4728
  7596  00D0'                    u5320:
  7597  00D0'                    l4726:
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
  7601  00D0' 0600'              	decf	dtoa@w^0,f,c
  7602  00D2' A0D8               	btfss	status,0,c
  7603  00D4' 0600'              	decf	(dtoa@w+1)^0,f,c
  7604  00D6'                    l4728:
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  7608  00D6' 0E00               	movlw	0
  7609  00D8' 6E00'              	movwf	(dtoa@i+1)^0,c
  7610  00DA' 0E4F               	movlw	79
  7611  00DC' 6E00'              	movwf	dtoa@i^0,c
  7612  00DE'                    
  7613                           ; BSR set to: 0
  7614                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  7615  00DE' 0E00               	movlw	0
  7616  00E0' 0101               	movlb	1	; () banked
  7617  00E2' 6F00'              	movwf	(_dbuf+79)& (0+255),b
  7618                           
  7619                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  7620  00E4' EF00' F000'        	goto	l4742
  7621  00E8'                    l4732:
  7622                           
  7623                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
  7624  00E8' 0600'              	decf	dtoa@i^0,f,c
  7625  00EA' A0D8               	btfss	status,0,c
  7626  00EC' 0600'              	decf	(dtoa@i+1)^0,f,c
  7627  00EE'                    
  7628                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  7629  00EE' 0E00'              	movlw	low _dbuf
  7630  00F0' 2400'              	addwf	dtoa@i^0,w,c
  7631  00F2' 6ED9               	movwf	fsr2l,c
  7632  00F4' 0E00'              	movlw	high _dbuf
  7633  00F6' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  7634  00F8' 6EDA               	movwf	fsr2h,c
  7635  00FA' C035' F000'        	movff	dtoa@n,___aomod@dividend
  7636  00FE' C036' F001'        	movff	dtoa@n+1,___aomod@dividend+1
  7637  0102' C037' F002'        	movff	dtoa@n+2,___aomod@dividend+2
  7638  0106' C038' F003'        	movff	dtoa@n+3,___aomod@dividend+3
  7639  010A' C039' F004'        	movff	dtoa@n+4,___aomod@dividend+4
  7640  010E' C03A' F005'        	movff	dtoa@n+5,___aomod@dividend+5
  7641  0112' C03B' F006'        	movff	dtoa@n+6,___aomod@dividend+6
  7642  0116' C03C' F007'        	movff	dtoa@n+7,___aomod@dividend+7
  7643  011A' 0E0A               	movlw	10
  7644  011C' 6E00'              	movwf	___aomod@divisor^0,c
  7645  011E' 0E00               	movlw	0
  7646  0120' 6E00'              	movwf	(___aomod@divisor+1)^0,c
  7647  0122' 0E00               	movlw	0
  7648  0124' 6E00'              	movwf	(___aomod@divisor+2)^0,c
  7649  0126' 0E00               	movlw	0
  7650  0128' 6E00'              	movwf	(___aomod@divisor+3)^0,c
  7651  012A' 0E00               	movlw	0
  7652  012C' 6E00'              	movwf	(___aomod@divisor+4)^0,c
  7653  012E' 0E00               	movlw	0
  7654  0130' 6E00'              	movwf	(___aomod@divisor+5)^0,c
  7655  0132' 0E00               	movlw	0
  7656  0134' 6E00'              	movwf	(___aomod@divisor+6)^0,c
  7657  0136' 0E00               	movlw	0
  7658  0138' 6E00'              	movwf	(___aomod@divisor+7)^0,c
  7659  013A' EC00' F000'        	call	___aomod	;wreg free
  7660  013E' C000' F025'        	movff	?___aomod,??_dtoa
  7661  0142' C001' F026'        	movff	?___aomod+1,??_dtoa+1
  7662  0146' C002' F027'        	movff	?___aomod+2,??_dtoa+2
  7663  014A' C003' F028'        	movff	?___aomod+3,??_dtoa+3
  7664  014E' C004' F029'        	movff	?___aomod+4,??_dtoa+4
  7665  0152' C005' F02A'        	movff	?___aomod+5,??_dtoa+5
  7666  0156' C006' F02B'        	movff	?___aomod+6,??_dtoa+6
  7667  015A' C007' F02C'        	movff	?___aomod+7,??_dtoa+7
  7668  015E' C025' F012'        	movff	??_dtoa,abs@a
  7669  0162' C027' F013'        	movff	??_dtoa+2,abs@a+1
  7670  0166' EC00' F000'        	call	_abs	;wreg free
  7671  016A' 5000'              	movf	?_abs^0,w,c
  7672  016C' 0F30               	addlw	48
  7673  016E' 6EDF               	movwf	indf2,c
  7674  0170'                    
  7675                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
  7676  0170' 0600'              	decf	dtoa@p^0,f,c
  7677  0172' A0D8               	btfss	status,0,c
  7678  0174' 0600'              	decf	(dtoa@p+1)^0,f,c
  7679  0176'                    
  7680                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
  7681  0176' 0600'              	decf	dtoa@w^0,f,c
  7682  0178' A0D8               	btfss	status,0,c
  7683  017A' 0600'              	decf	(dtoa@w+1)^0,f,c
  7684  017C'                    
  7685                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  7686  017C' C035' F000'        	movff	dtoa@n,___aodiv@dividend
  7687  0180' C036' F001'        	movff	dtoa@n+1,___aodiv@dividend+1
  7688  0184' C037' F002'        	movff	dtoa@n+2,___aodiv@dividend+2
  7689  0188' C038' F003'        	movff	dtoa@n+3,___aodiv@dividend+3
  7690  018C' C039' F004'        	movff	dtoa@n+4,___aodiv@dividend+4
  7691  0190' C03A' F005'        	movff	dtoa@n+5,___aodiv@dividend+5
  7692  0194' C03B' F006'        	movff	dtoa@n+6,___aodiv@dividend+6
  7693  0198' C03C' F007'        	movff	dtoa@n+7,___aodiv@dividend+7
  7694  019C' 0E0A               	movlw	10
  7695  019E' 6E00'              	movwf	___aodiv@divisor^0,c
  7696  01A0' 0E00               	movlw	0
  7697  01A2' 6E00'              	movwf	(___aodiv@divisor+1)^0,c
  7698  01A4' 0E00               	movlw	0
  7699  01A6' 6E00'              	movwf	(___aodiv@divisor+2)^0,c
  7700  01A8' 0E00               	movlw	0
  7701  01AA' 6E00'              	movwf	(___aodiv@divisor+3)^0,c
  7702  01AC' 0E00               	movlw	0
  7703  01AE' 6E00'              	movwf	(___aodiv@divisor+4)^0,c
  7704  01B0' 0E00               	movlw	0
  7705  01B2' 6E00'              	movwf	(___aodiv@divisor+5)^0,c
  7706  01B4' 0E00               	movlw	0
  7707  01B6' 6E00'              	movwf	(___aodiv@divisor+6)^0,c
  7708  01B8' 0E00               	movlw	0
  7709  01BA' 6E00'              	movwf	(___aodiv@divisor+7)^0,c
  7710  01BC' EC00' F000'        	call	___aodiv	;wreg free
  7711  01C0' C000' F035'        	movff	?___aodiv,dtoa@n
  7712  01C4' C001' F036'        	movff	?___aodiv+1,dtoa@n+1
  7713  01C8' C002' F037'        	movff	?___aodiv+2,dtoa@n+2
  7714  01CC' C003' F038'        	movff	?___aodiv+3,dtoa@n+3
  7715  01D0' C004' F039'        	movff	?___aodiv+4,dtoa@n+4
  7716  01D4' C005' F03A'        	movff	?___aodiv+5,dtoa@n+5
  7717  01D8' C006' F03B'        	movff	?___aodiv+6,dtoa@n+6
  7718  01DC' C007' F03C'        	movff	?___aodiv+7,dtoa@n+7
  7719  01E0'                    l4742:
  7720                           
  7721                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  7722  01E0' BE00'              	btfsc	(dtoa@i+1)^0,7,c
  7723  01E2' EF00' F000'        	goto	u5331
  7724  01E6' 5000'              	movf	(dtoa@i+1)^0,w,c
  7725  01E8' E108               	bnz	u5330
  7726  01EA' 0400'              	decf	dtoa@i^0,w,c
  7727  01EC' A0D8               	btfss	status,0,c
  7728  01EE' EF00' F000'        	goto	u5331
  7729  01F2' EF00' F000'        	goto	u5330
  7730  01F6'                    u5331:
  7731  01F6' EF00' F000'        	goto	l4752
  7732  01FA'                    u5330:
  7733  01FA' 5000'              	movf	dtoa@n^0,w,c
  7734  01FC' 1000'              	iorwf	(dtoa@n+1)^0,w,c
  7735  01FE' 1000'              	iorwf	(dtoa@n+2)^0,w,c
  7736  0200' 1000'              	iorwf	(dtoa@n+3)^0,w,c
  7737  0202' 1000'              	iorwf	(dtoa@n+4)^0,w,c
  7738  0204' 1000'              	iorwf	(dtoa@n+5)^0,w,c
  7739  0206' 1000'              	iorwf	(dtoa@n+6)^0,w,c
  7740  0208' 1000'              	iorwf	(dtoa@n+7)^0,w,c
  7741  020A' A4D8               	btfss	status,2,c
  7742  020C' EF00' F000'        	goto	u5341
  7743  0210' EF00' F000'        	goto	u5340
  7744  0214'                    u5341:
  7745  0214' EF00' F000'        	goto	l4732
  7746  0218'                    u5340:
  7747  0218' BE00'              	btfsc	(dtoa@p+1)^0,7,c
  7748  021A' EF00' F000'        	goto	u5350
  7749  021E' 5000'              	movf	(dtoa@p+1)^0,w,c
  7750  0220' E106               	bnz	u5351
  7751  0222' 0400'              	decf	dtoa@p^0,w,c
  7752  0224' B0D8               	btfsc	status,0,c
  7753  0226' EF00' F000'        	goto	u5351
  7754  022A' EF00' F000'        	goto	u5350
  7755  022E'                    u5351:
  7756  022E' EF00' F000'        	goto	l4732
  7757  0232'                    u5350:
  7758  0232' BE00'              	btfsc	(dtoa@w+1)^0,7,c
  7759  0234' EF00' F000'        	goto	u5361
  7760  0238' 5000'              	movf	(dtoa@w+1)^0,w,c
  7761  023A' E108               	bnz	u5360
  7762  023C' 0400'              	decf	dtoa@w^0,w,c
  7763  023E' A0D8               	btfss	status,0,c
  7764  0240' EF00' F000'        	goto	u5361
  7765  0244' EF00' F000'        	goto	u5360
  7766  0248'                    u5361:
  7767  0248' EF00' F000'        	goto	l4752
  7768  024C'                    u5360:
  7769  024C' 0100               	movlb	0	; () banked
  7770  024E' B300'              	btfsc	_flags& (0+255),1,b
  7771  0250' EF00' F000'        	goto	u5371
  7772  0254' EF00' F000'        	goto	u5370
  7773  0258'                    u5371:
  7774  0258' EF00' F000'        	goto	l4732
  7775  025C'                    u5370:
  7776  025C'                    l4752:
  7777                           
  7778                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  7779  025C' 5000'              	movf	dtoa@s^0,w,c
  7780  025E' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  7781  0260' A4D8               	btfss	status,2,c
  7782  0262' EF00' F000'        	goto	u5381
  7783  0266' EF00' F000'        	goto	u5380
  7784  026A'                    u5381:
  7785  026A' EF00' F000'        	goto	l4756
  7786  026E'                    u5380:
  7787  026E' 0100               	movlb	0	; () banked
  7788  0270' A500'              	btfss	_flags& (0+255),2,b
  7789  0272' EF00' F000'        	goto	u5391
  7790  0276' EF00' F000'        	goto	u5390
  7791  027A'                    u5391:
  7792  027A' EF00' F000'        	goto	l4766
  7793  027E'                    u5390:
  7794  027E'                    l4756:
  7795                           
  7796                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
  7797  027E' 0600'              	decf	dtoa@i^0,f,c
  7798  0280' A0D8               	btfss	status,0,c
  7799  0282' 0600'              	decf	(dtoa@i+1)^0,f,c
  7800  0284'                    
  7801                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  7802  0284' 5000'              	movf	dtoa@s^0,w,c
  7803  0286' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  7804  0288' A4D8               	btfss	status,2,c
  7805  028A' EF00' F000'        	goto	u5401
  7806  028E' EF00' F000'        	goto	u5400
  7807  0292'                    u5401:
  7808  0292' EF00' F000'        	goto	l4762
  7809  0296'                    u5400:
  7810  0296' 0E00               	movlw	0
  7811  0298' 6E00'              	movwf	(_dtoa$2718+1)^0,c
  7812  029A' 0E2B               	movlw	43
  7813  029C' 6E00'              	movwf	_dtoa$2718^0,c
  7814  029E' EF00' F000'        	goto	l4764
  7815  02A2'                    l4762:
  7816  02A2' 0E00               	movlw	0
  7817  02A4' 6E00'              	movwf	(_dtoa$2718+1)^0,c
  7818  02A6' 0E2D               	movlw	45
  7819  02A8' 6E00'              	movwf	_dtoa$2718^0,c
  7820  02AA'                    l4764:
  7821  02AA' 0E00'              	movlw	low _dbuf
  7822  02AC' 2400'              	addwf	dtoa@i^0,w,c
  7823  02AE' 6ED9               	movwf	fsr2l,c
  7824  02B0' 0E00'              	movlw	high _dbuf
  7825  02B2' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  7826  02B4' 6EDA               	movwf	fsr2h,c
  7827  02B6' C02D' FFDF         	movff	_dtoa$2718,indf2
  7828  02BA'                    l4766:
  7829                           
  7830                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  7831  02BA' C01B' F010'        	movff	dtoa@fp,pad@fp
  7832  02BE' C01C' F011'        	movff	dtoa@fp+1,pad@fp+1
  7833  02C2' 0E00'              	movlw	low _dbuf
  7834  02C4' 2400'              	addwf	dtoa@i^0,w,c
  7835  02C6' 6E00'              	movwf	pad@buf^0,c
  7836  02C8' 0E00'              	movlw	high _dbuf
  7837  02CA' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  7838  02CC' 6E00'              	movwf	(pad@buf+1)^0,c
  7839  02CE' C031' F014'        	movff	dtoa@w,pad@p
  7840  02D2' C032' F015'        	movff	dtoa@w+1,pad@p+1
  7841  02D6' EC00' F000'        	call	_pad	;wreg free
  7842  02DA' C010' F01B'        	movff	?_pad,?_dtoa
  7843  02DE' C011' F01C'        	movff	?_pad+1,?_dtoa+1
  7844  02E2' 0012               	return		;funcret
  7845  02E4'                    __end_of_dtoa:
  7846                           	callstack 0
  7847                           
  7848 ;; *************** function _pad *****************
  7849 ;; Defined at:
  7850 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  7853 ;;		 -> sprintf@f(6), 
  7854 ;;  buf             2   18[COMRAM] PTR unsigned char 
  7855 ;;		 -> dbuf(80), 
  7856 ;;  p               2   20[COMRAM] int 
  7857 ;; Auto vars:     Size  Location     Type
  7858 ;;  w               2   25[COMRAM] int 
  7859 ;;  i               2   23[COMRAM] int 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  2   16[COMRAM] int 
  7862 ;; Registers used:
  7863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7869 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7870 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7872 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7873 ;;Total ram usage:       11 bytes
  7874 ;; Hardware stack levels used: 1
  7875 ;; Hardware stack levels required when called: 3
  7876 ;; This function calls:
  7877 ;;		_fputc
  7878 ;;		_fputs
  7879 ;;		_strlen
  7880 ;; This function is called by:
  7881 ;;		_dtoa
  7882 ;;		_efgtoa
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           	psect	text26
  7887  0000'                    __ptext26:
  7888                           	callstack 0
  7889  0000'                    _pad:
  7890                           	callstack 22
  7891  0000'                    
  7892                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  7893  0000' 0100               	movlb	0	; () banked
  7894  0002' A100'              	btfss	_flags& (0+255),0,b
  7895  0004' EF00' F000'        	goto	u4931
  7896  0008' EF00' F000'        	goto	u4930
  7897  000C'                    u4931:
  7898  000C' EF00' F000'        	goto	l4602
  7899  0010'                    u4930:
  7900  0010'                    
  7901                           ; BSR set to: 0
  7902                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  7903  0010' C012' F009'        	movff	pad@buf,fputs@s
  7904  0014' C013' F00A'        	movff	pad@buf+1,fputs@s+1
  7905  0018' C010' F00B'        	movff	pad@fp,fputs@fp
  7906  001C' C011' F00C'        	movff	pad@fp+1,fputs@fp+1
  7907  0020' EC00' F000'        	call	_fputs	;wreg free
  7908  0024'                    l4602:
  7909                           
  7910                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  7911  0024' BE00'              	btfsc	(pad@p+1)^0,7,c
  7912  0026' EF00' F000'        	goto	u4941
  7913  002A' EF00' F000'        	goto	u4940
  7914  002E'                    u4941:
  7915  002E' EF00' F000'        	goto	l4606
  7916  0032'                    u4940:
  7917  0032' C014' F019'        	movff	pad@p,pad@w
  7918  0036' C015' F01A'        	movff	pad@p+1,pad@w+1
  7919  003A' EF00' F000'        	goto	l1331
  7920  003E'                    l4606:
  7921  003E' 0E00               	movlw	0
  7922  0040' 6E00'              	movwf	(pad@w+1)^0,c
  7923  0042' 0E00               	movlw	0
  7924  0044' 6E00'              	movwf	pad@w^0,c
  7925  0046'                    l1331:
  7926                           
  7927                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  7928  0046' 0E00               	movlw	0
  7929  0048' 6E00'              	movwf	(pad@i+1)^0,c
  7930  004A' 0E00               	movlw	0
  7931  004C' 6E00'              	movwf	pad@i^0,c
  7932                           
  7933                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  7934  004E' EF00' F000'        	goto	l4612
  7935  0052'                    l4608:
  7936                           
  7937                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  7938  0052' 0E00               	movlw	0
  7939  0054' 6E00'              	movwf	(fputc@c+1)^0,c
  7940  0056' 0E20               	movlw	32
  7941  0058' 6E00'              	movwf	fputc@c^0,c
  7942  005A' C010' F002'        	movff	pad@fp,fputc@fp
  7943  005E' C011' F003'        	movff	pad@fp+1,fputc@fp+1
  7944  0062' EC00' F000'        	call	_fputc	;wreg free
  7945  0066'                    
  7946                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  7947  0066' 4A00'              	infsnz	pad@i^0,f,c
  7948  0068' 2A00'              	incf	(pad@i+1)^0,f,c
  7949  006A'                    l4612:
  7950                           
  7951                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  7952  006A' 5000'              	movf	pad@w^0,w,c
  7953  006C' 5C00'              	subwf	pad@i^0,w,c
  7954  006E' 5000'              	movf	(pad@i+1)^0,w,c
  7955  0070' 0A80               	xorlw	128
  7956  0072' 6E00'              	movwf	??_pad^0,c
  7957  0074' 5000'              	movf	(pad@w+1)^0,w,c
  7958  0076' 0A80               	xorlw	128
  7959  0078' 5800'              	subwfb	??_pad^0,w,c
  7960  007A' A0D8               	btfss	status,0,c
  7961  007C' EF00' F000'        	goto	u4951
  7962  0080' EF00' F000'        	goto	u4950
  7963  0084'                    u4951:
  7964  0084' EF00' F000'        	goto	l4608
  7965  0088'                    u4950:
  7966  0088'                    
  7967                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  7968  0088' 0100               	movlb	0	; () banked
  7969  008A' B100'              	btfsc	_flags& (0+255),0,b
  7970  008C' EF00' F000'        	goto	u4961
  7971  0090' EF00' F000'        	goto	u4960
  7972  0094'                    u4961:
  7973  0094' EF00' F000'        	goto	l4616
  7974  0098'                    u4960:
  7975  0098'                    
  7976                           ; BSR set to: 0
  7977                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  7978  0098' C012' F009'        	movff	pad@buf,fputs@s
  7979  009C' C013' F00A'        	movff	pad@buf+1,fputs@s+1
  7980  00A0' C010' F00B'        	movff	pad@fp,fputs@fp
  7981  00A4' C011' F00C'        	movff	pad@fp+1,fputs@fp+1
  7982  00A8' EC00' F000'        	call	_fputs	;wreg free
  7983  00AC'                    l4616:
  7984                           
  7985                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  7986  00AC' C012' F000'        	movff	pad@buf,strlen@s
  7987  00B0' C013' F001'        	movff	pad@buf+1,strlen@s+1
  7988  00B4' EC00' F000'        	call	_strlen	;wreg free
  7989  00B8' 5000'              	movf	pad@w^0,w,c
  7990  00BA' 2400'              	addwf	?_strlen^0,w,c
  7991  00BC' 6E00'              	movwf	?_pad^0,c
  7992  00BE' 5000'              	movf	(pad@w+1)^0,w,c
  7993  00C0' 2000'              	addwfc	(?_strlen+1)^0,w,c
  7994  00C2' 6E00'              	movwf	(?_pad+1)^0,c
  7995  00C4' 0012               	return		;funcret
  7996  00C6'                    __end_of_pad:
  7997                           	callstack 0
  7998                           
  7999 ;; *************** function _strlen *****************
  8000 ;; Defined at:
  8001 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  s               2    0[COMRAM] PTR const unsigned char 
  8004 ;;		 -> dbuf(80), 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  a               2    2[COMRAM] PTR const unsigned char 
  8007 ;;		 -> dbuf(80), 
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  2    0[COMRAM] unsigned int 
  8010 ;; Registers used:
  8011 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8017 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8020 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8021 ;;Total ram usage:        4 bytes
  8022 ;; Hardware stack levels used: 1
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;;		_pad
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text27
  8031  0000'                    __ptext27:
  8032                           	callstack 0
  8033  0000'                    _strlen:
  8034                           	callstack 24
  8035  0000' C000' F002'        	movff	strlen@s,strlen@a
  8036  0004' C001' F003'        	movff	strlen@s+1,strlen@a+1
  8037  0008' EF00' F000'        	goto	l4058
  8038  000C'                    l4056:
  8039  000C' 4A00'              	infsnz	strlen@s^0,f,c
  8040  000E' 2A00'              	incf	(strlen@s+1)^0,f,c
  8041  0010'                    l4058:
  8042  0010' C000' FFD9         	movff	strlen@s,fsr2l
  8043  0014' C001' FFDA         	movff	strlen@s+1,fsr2h
  8044  0018' 50DF               	movf	indf2,w,c
  8045  001A' A4D8               	btfss	status,2,c
  8046  001C' EF00' F000'        	goto	u4071
  8047  0020' EF00' F000'        	goto	u4070
  8048  0024'                    u4071:
  8049  0024' EF00' F000'        	goto	l4056
  8050  0028'                    u4070:
  8051  0028' 5000'              	movf	strlen@a^0,w,c
  8052  002A' 5C00'              	subwf	strlen@s^0,w,c
  8053  002C' 6E00'              	movwf	?_strlen^0,c
  8054  002E' 5000'              	movf	(strlen@a+1)^0,w,c
  8055  0030' 5800'              	subwfb	(strlen@s+1)^0,w,c
  8056  0032' 6E00'              	movwf	(?_strlen+1)^0,c
  8057  0034' 0012               	return		;funcret
  8058  0036'                    __end_of_strlen:
  8059                           	callstack 0
  8060                           
  8061 ;; *************** function _fputs *****************
  8062 ;; Defined at:
  8063 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  s               2    9[COMRAM] PTR const unsigned char 
  8066 ;;		 -> dbuf(80), 
  8067 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  8068 ;;		 -> sprintf@f(6), 
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;  i               2   14[COMRAM] int 
  8071 ;;  c               1   13[COMRAM] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  2    9[COMRAM] int 
  8074 ;; Registers used:
  8075 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8081 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8082 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8084 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8085 ;;Total ram usage:        7 bytes
  8086 ;; Hardware stack levels used: 1
  8087 ;; Hardware stack levels required when called: 2
  8088 ;; This function calls:
  8089 ;;		_fputc
  8090 ;; This function is called by:
  8091 ;;		_pad
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text28
  8096  0000'                    __ptext28:
  8097                           	callstack 0
  8098  0000'                    _fputs:
  8099                           	callstack 22
  8100  0000' 0E00               	movlw	0
  8101  0002' 6E00'              	movwf	(fputs@i+1)^0,c
  8102  0004' 0E00               	movlw	0
  8103  0006' 6E00'              	movwf	fputs@i^0,c
  8104  0008' EF00' F000'        	goto	l4052
  8105  000C'                    l4048:
  8106  000C' C00D' F000'        	movff	fputs@c,fputc@c
  8107  0010' 6A00'              	clrf	(fputc@c+1)^0,c
  8108  0012' C00B' F002'        	movff	fputs@fp,fputc@fp
  8109  0016' C00C' F003'        	movff	fputs@fp+1,fputc@fp+1
  8110  001A' EC00' F000'        	call	_fputc	;wreg free
  8111  001E' 4A00'              	infsnz	fputs@i^0,f,c
  8112  0020' 2A00'              	incf	(fputs@i+1)^0,f,c
  8113  0022'                    l4052:
  8114  0022' 5000'              	movf	fputs@i^0,w,c
  8115  0024' 2400'              	addwf	fputs@s^0,w,c
  8116  0026' 6ED9               	movwf	fsr2l,c
  8117  0028' 5000'              	movf	(fputs@i+1)^0,w,c
  8118  002A' 2000'              	addwfc	(fputs@s+1)^0,w,c
  8119  002C' 6EDA               	movwf	fsr2h,c
  8120  002E' 50DF               	movf	indf2,w,c
  8121  0030' 6E00'              	movwf	fputs@c^0,c
  8122  0032' 5000'              	movf	fputs@c^0,w,c
  8123  0034' A4D8               	btfss	status,2,c
  8124  0036' EF00' F000'        	goto	u4061
  8125  003A' EF00' F000'        	goto	u4060
  8126  003E'                    u4061:
  8127  003E' EF00' F000'        	goto	l4048
  8128  0042'                    u4060:
  8129  0042' 0012               	return		;funcret
  8130  0044'                    __end_of_fputs:
  8131                           	callstack 0
  8132                           
  8133 ;; *************** function _fputc *****************
  8134 ;; Defined at:
  8135 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;  c               2    0[COMRAM] int 
  8138 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  8139 ;;		 -> sprintf@f(6), 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;		None
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  2    0[COMRAM] int 
  8144 ;; Registers used:
  8145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8153 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8154 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8155 ;;Total ram usage:        9 bytes
  8156 ;; Hardware stack levels used: 1
  8157 ;; Hardware stack levels required when called: 1
  8158 ;; This function calls:
  8159 ;;		_putch
  8160 ;; This function is called by:
  8161 ;;		_pad
  8162 ;;		_vfpfcnvrt
  8163 ;;		_fputs
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text29
  8168  0000'                    __ptext29:
  8169                           	callstack 0
  8170  0000'                    _fputc:
  8171                           	callstack 25
  8172  0000' 5000'              	movf	fputc@fp^0,w,c
  8173  0002' 1000'              	iorwf	(fputc@fp+1)^0,w,c
  8174  0004' B4D8               	btfsc	status,2,c
  8175  0006' EF00' F000'        	goto	u3631
  8176  000A' EF00' F000'        	goto	u3630
  8177  000E'                    u3631:
  8178  000E' EF00' F000'        	goto	l3834
  8179  0012'                    u3630:
  8180  0012' 5000'              	movf	fputc@fp^0,w,c
  8181  0014' 1000'              	iorwf	(fputc@fp+1)^0,w,c
  8182  0016' A4D8               	btfss	status,2,c
  8183  0018' EF00' F000'        	goto	u3641
  8184  001C' EF00' F000'        	goto	u3640
  8185  0020'                    u3641:
  8186  0020' EF00' F000'        	goto	l3836
  8187  0024'                    u3640:
  8188  0024'                    l3834:
  8189  0024' 5000'              	movf	fputc@c^0,w,c
  8190  0026' EC00' F000'        	call	_putch
  8191  002A' EF00' F000'        	goto	l1583
  8192  002E'                    l3836:
  8193  002E' EE20 F004          	lfsr	2,4
  8194  0032' 5000'              	movf	fputc@fp^0,w,c
  8195  0034' 26D9               	addwf	fsr2l,f,c
  8196  0036' 5000'              	movf	(fputc@fp+1)^0,w,c
  8197  0038' 22DA               	addwfc	fsr2h,f,c
  8198  003A' 50DE               	movf	postinc2,w,c
  8199  003C' 10DE               	iorwf	postinc2,w,c
  8200  003E' B4D8               	btfsc	status,2,c
  8201  0040' EF00' F000'        	goto	u3651
  8202  0044' EF00' F000'        	goto	u3650
  8203  0048'                    u3651:
  8204  0048' EF00' F000'        	goto	l3840
  8205  004C'                    u3650:
  8206  004C' EE20 F004          	lfsr	2,4
  8207  0050' 5000'              	movf	fputc@fp^0,w,c
  8208  0052' 26D9               	addwf	fsr2l,f,c
  8209  0054' 5000'              	movf	(fputc@fp+1)^0,w,c
  8210  0056' 22DA               	addwfc	fsr2h,f,c
  8211  0058' EE10 F002          	lfsr	1,2
  8212  005C' 5000'              	movf	fputc@fp^0,w,c
  8213  005E' 26E1               	addwf	fsr1l,f,c
  8214  0060' 5000'              	movf	(fputc@fp+1)^0,w,c
  8215  0062' 22E2               	addwfc	fsr1h,f,c
  8216  0064' 50DE               	movf	postinc2,w,c
  8217  0066' 5CE6               	subwf	postinc1,w,c
  8218  0068' 50E6               	movf	postinc1,w,c
  8219  006A' 0A80               	xorlw	128
  8220  006C' 6E00'              	movwf	(??_fputc+4)^0,c
  8221  006E' 50DE               	movf	postinc2,w,c
  8222  0070' 0A80               	xorlw	128
  8223  0072' 5800'              	subwfb	(??_fputc+4)^0,w,c
  8224  0074' B0D8               	btfsc	status,0,c
  8225  0076' EF00' F000'        	goto	u3661
  8226  007A' EF00' F000'        	goto	u3660
  8227  007E'                    u3661:
  8228  007E' EF00' F000'        	goto	l1583
  8229  0082'                    u3660:
  8230  0082'                    l3840:
  8231  0082' EE20 F002          	lfsr	2,2
  8232  0086' 5000'              	movf	fputc@fp^0,w,c
  8233  0088' 26D9               	addwf	fsr2l,f,c
  8234  008A' 5000'              	movf	(fputc@fp+1)^0,w,c
  8235  008C' 22DA               	addwfc	fsr2h,f,c
  8236  008E' CFDE F004'         	movff	postinc2,??_fputc
  8237  0092' CFDD F005'         	movff	postdec2,??_fputc+1
  8238  0096' C002' FFD9         	movff	fputc@fp,fsr2l
  8239  009A' C003' FFDA         	movff	fputc@fp+1,fsr2h
  8240  009E' CFDE F006'         	movff	postinc2,??_fputc+2
  8241  00A2' CFDD F007'         	movff	postdec2,??_fputc+3
  8242  00A6' 5000'              	movf	??_fputc^0,w,c
  8243  00A8' 2400'              	addwf	(??_fputc+2)^0,w,c
  8244  00AA' 6ED9               	movwf	fsr2l,c
  8245  00AC' 5000'              	movf	(??_fputc+1)^0,w,c
  8246  00AE' 2000'              	addwfc	(??_fputc+3)^0,w,c
  8247  00B0' 6EDA               	movwf	fsr2h,c
  8248  00B2' C000' FFDF         	movff	fputc@c,indf2
  8249  00B6' EE20 F002          	lfsr	2,2
  8250  00BA' 5000'              	movf	fputc@fp^0,w,c
  8251  00BC' 26D9               	addwf	fsr2l,f,c
  8252  00BE' 5000'              	movf	(fputc@fp+1)^0,w,c
  8253  00C0' 22DA               	addwfc	fsr2h,f,c
  8254  00C2' 2ADE               	incf	postinc2,f,c
  8255  00C4' 0E00               	movlw	0
  8256  00C6' 22DD               	addwfc	postdec2,f,c
  8257  00C8'                    l1583:
  8258  00C8' 0012               	return		;funcret
  8259  00CA'                    __end_of_fputc:
  8260                           	callstack 0
  8261                           
  8262 ;; *************** function _putch *****************
  8263 ;; Defined at:
  8264 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  c               1    wreg     unsigned char 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  c               1    0[COMRAM] unsigned char 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  1    wreg      void 
  8271 ;; Registers used:
  8272 ;;		wreg
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8282 ;;Total ram usage:        0 bytes
  8283 ;; Hardware stack levels used: 1
  8284 ;; This function calls:
  8285 ;;		Nothing
  8286 ;; This function is called by:
  8287 ;;		_fputc
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           	psect	text30
  8292  0000'                    __ptext30:
  8293                           	callstack 0
  8294  0000'                    _putch:
  8295                           	callstack 25
  8296  0000' 0012               	return		;funcret
  8297  0002'                    __end_of_putch:
  8298                           	callstack 0
  8299                           
  8300 ;; *************** function _abs *****************
  8301 ;; Defined at:
  8302 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;  a               2   18[COMRAM] int 
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;		None
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  2   18[COMRAM] int 
  8309 ;; Registers used:
  8310 ;;		wreg, status,2, status,0
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/0
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8319 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8320 ;;Total ram usage:        4 bytes
  8321 ;; Hardware stack levels used: 1
  8322 ;; This function calls:
  8323 ;;		Nothing
  8324 ;; This function is called by:
  8325 ;;		_dtoa
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           	psect	text31
  8330  0000'                    __ptext31:
  8331                           	callstack 0
  8332  0000'                    _abs:
  8333                           	callstack 25
  8334  0000' BE00'              	btfsc	(abs@a+1)^0,7,c
  8335  0002' EF00' F000'        	goto	u4970
  8336  0006' 5000'              	movf	(abs@a+1)^0,w,c
  8337  0008' E106               	bnz	u4971
  8338  000A' 0400'              	decf	abs@a^0,w,c
  8339  000C' B0D8               	btfsc	status,0,c
  8340  000E' EF00' F000'        	goto	u4971
  8341  0012' EF00' F000'        	goto	u4970
  8342  0016'                    u4971:
  8343  0016' EF00' F000'        	goto	l1504
  8344  001A'                    u4970:
  8345  001A' C012' F014'        	movff	abs@a,??_abs
  8346  001E' C013' F015'        	movff	abs@a+1,??_abs+1
  8347  0022' 1E00'              	comf	??_abs^0,f,c
  8348  0024' 1E00'              	comf	(??_abs+1)^0,f,c
  8349  0026' 4A00'              	infsnz	??_abs^0,f,c
  8350  0028' 2A00'              	incf	(??_abs+1)^0,f,c
  8351  002A' C014' F012'        	movff	??_abs,?_abs
  8352  002E' C015' F013'        	movff	??_abs+1,?_abs+1
  8353  0032' EF00' F000'        	goto	l1507
  8354  0036'                    l1504:
  8355  0036' C012' F012'        	movff	abs@a,?_abs
  8356  003A' C013' F013'        	movff	abs@a+1,?_abs+1
  8357  003E'                    l1507:
  8358  003E' 0012               	return		;funcret
  8359  0040'                    __end_of_abs:
  8360                           	callstack 0
  8361                           
  8362 ;; *************** function ___aomod *****************
  8363 ;; Defined at:
  8364 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  dividend        8    0[COMRAM] long long 
  8367 ;;  divisor         8    8[COMRAM] long long 
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;  sign            1   17[COMRAM] unsigned char 
  8370 ;;  counter         1   16[COMRAM] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  8    0[COMRAM] long long 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8380 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8383 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8384 ;;Total ram usage:       18 bytes
  8385 ;; Hardware stack levels used: 1
  8386 ;; This function calls:
  8387 ;;		Nothing
  8388 ;; This function is called by:
  8389 ;;		_dtoa
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           	psect	text32
  8394  0000'                    __ptext32:
  8395                           	callstack 0
  8396  0000'                    ___aomod:
  8397                           	callstack 25
  8398  0000' 0E00               	movlw	0
  8399  0002' 6E00'              	movwf	___aomod@sign^0,c
  8400  0004' BE00'              	btfsc	(___aomod@dividend+7)^0,7,c
  8401  0006' EF00' F000'        	goto	u4170
  8402  000A' EF00' F000'        	goto	u4171
  8403  000E'                    u4171:
  8404  000E' EF00' F000'        	goto	l4126
  8405  0012'                    u4170:
  8406  0012' 1E00'              	comf	(___aomod@dividend+7)^0,f,c
  8407  0014' 1E00'              	comf	(___aomod@dividend+6)^0,f,c
  8408  0016' 1E00'              	comf	(___aomod@dividend+5)^0,f,c
  8409  0018' 1E00'              	comf	(___aomod@dividend+4)^0,f,c
  8410  001A' 1E00'              	comf	(___aomod@dividend+3)^0,f,c
  8411  001C' 1E00'              	comf	(___aomod@dividend+2)^0,f,c
  8412  001E' 1E00'              	comf	(___aomod@dividend+1)^0,f,c
  8413  0020' 6C00'              	negf	___aomod@dividend^0,c
  8414  0022' 0E00               	movlw	0
  8415  0024' 2200'              	addwfc	(___aomod@dividend+1)^0,f,c
  8416  0026' 2200'              	addwfc	(___aomod@dividend+2)^0,f,c
  8417  0028' 2200'              	addwfc	(___aomod@dividend+3)^0,f,c
  8418  002A' 2200'              	addwfc	(___aomod@dividend+4)^0,f,c
  8419  002C' 2200'              	addwfc	(___aomod@dividend+5)^0,f,c
  8420  002E' 2200'              	addwfc	(___aomod@dividend+6)^0,f,c
  8421  0030' 2200'              	addwfc	(___aomod@dividend+7)^0,f,c
  8422  0032' 0E01               	movlw	1
  8423  0034' 6E00'              	movwf	___aomod@sign^0,c
  8424  0036'                    l4126:
  8425  0036' BE00'              	btfsc	(___aomod@divisor+7)^0,7,c
  8426  0038' EF00' F000'        	goto	u4180
  8427  003C' EF00' F000'        	goto	u4181
  8428  0040'                    u4181:
  8429  0040' EF00' F000'        	goto	l4130
  8430  0044'                    u4180:
  8431  0044' 1E00'              	comf	(___aomod@divisor+7)^0,f,c
  8432  0046' 1E00'              	comf	(___aomod@divisor+6)^0,f,c
  8433  0048' 1E00'              	comf	(___aomod@divisor+5)^0,f,c
  8434  004A' 1E00'              	comf	(___aomod@divisor+4)^0,f,c
  8435  004C' 1E00'              	comf	(___aomod@divisor+3)^0,f,c
  8436  004E' 1E00'              	comf	(___aomod@divisor+2)^0,f,c
  8437  0050' 1E00'              	comf	(___aomod@divisor+1)^0,f,c
  8438  0052' 6C00'              	negf	___aomod@divisor^0,c
  8439  0054' 0E00               	movlw	0
  8440  0056' 2200'              	addwfc	(___aomod@divisor+1)^0,f,c
  8441  0058' 2200'              	addwfc	(___aomod@divisor+2)^0,f,c
  8442  005A' 2200'              	addwfc	(___aomod@divisor+3)^0,f,c
  8443  005C' 2200'              	addwfc	(___aomod@divisor+4)^0,f,c
  8444  005E' 2200'              	addwfc	(___aomod@divisor+5)^0,f,c
  8445  0060' 2200'              	addwfc	(___aomod@divisor+6)^0,f,c
  8446  0062' 2200'              	addwfc	(___aomod@divisor+7)^0,f,c
  8447  0064'                    l4130:
  8448  0064' 5000'              	movf	___aomod@divisor^0,w,c
  8449  0066' 1000'              	iorwf	(___aomod@divisor+1)^0,w,c
  8450  0068' 1000'              	iorwf	(___aomod@divisor+2)^0,w,c
  8451  006A' 1000'              	iorwf	(___aomod@divisor+3)^0,w,c
  8452  006C' 1000'              	iorwf	(___aomod@divisor+4)^0,w,c
  8453  006E' 1000'              	iorwf	(___aomod@divisor+5)^0,w,c
  8454  0070' 1000'              	iorwf	(___aomod@divisor+6)^0,w,c
  8455  0072' 1000'              	iorwf	(___aomod@divisor+7)^0,w,c
  8456  0074' B4D8               	btfsc	status,2,c
  8457  0076' EF00' F000'        	goto	u4191
  8458  007A' EF00' F000'        	goto	u4190
  8459  007E'                    u4191:
  8460  007E' EF00' F000'        	goto	l4146
  8461  0082'                    u4190:
  8462  0082' 0E01               	movlw	1
  8463  0084' 6E00'              	movwf	___aomod@counter^0,c
  8464  0086' EF00' F000'        	goto	l4136
  8465  008A'                    l4134:
  8466  008A' 90D8               	bcf	status,0,c
  8467  008C' 3600'              	rlcf	___aomod@divisor^0,f,c
  8468  008E' 3600'              	rlcf	(___aomod@divisor+1)^0,f,c
  8469  0090' 3600'              	rlcf	(___aomod@divisor+2)^0,f,c
  8470  0092' 3600'              	rlcf	(___aomod@divisor+3)^0,f,c
  8471  0094' 3600'              	rlcf	(___aomod@divisor+4)^0,f,c
  8472  0096' 3600'              	rlcf	(___aomod@divisor+5)^0,f,c
  8473  0098' 3600'              	rlcf	(___aomod@divisor+6)^0,f,c
  8474  009A' 3600'              	rlcf	(___aomod@divisor+7)^0,f,c
  8475  009C' 2A00'              	incf	___aomod@counter^0,f,c
  8476  009E'                    l4136:
  8477  009E' AE00'              	btfss	(___aomod@divisor+7)^0,7,c
  8478  00A0' EF00' F000'        	goto	u4201
  8479  00A4' EF00' F000'        	goto	u4200
  8480  00A8'                    u4201:
  8481  00A8' EF00' F000'        	goto	l4134
  8482  00AC'                    u4200:
  8483  00AC'                    l4138:
  8484  00AC' 5000'              	movf	___aomod@divisor^0,w,c
  8485  00AE' 5C00'              	subwf	___aomod@dividend^0,w,c
  8486  00B0' 5000'              	movf	(___aomod@divisor+1)^0,w,c
  8487  00B2' 5800'              	subwfb	(___aomod@dividend+1)^0,w,c
  8488  00B4' 5000'              	movf	(___aomod@divisor+2)^0,w,c
  8489  00B6' 5800'              	subwfb	(___aomod@dividend+2)^0,w,c
  8490  00B8' 5000'              	movf	(___aomod@divisor+3)^0,w,c
  8491  00BA' 5800'              	subwfb	(___aomod@dividend+3)^0,w,c
  8492  00BC' 5000'              	movf	(___aomod@divisor+4)^0,w,c
  8493  00BE' 5800'              	subwfb	(___aomod@dividend+4)^0,w,c
  8494  00C0' 5000'              	movf	(___aomod@divisor+5)^0,w,c
  8495  00C2' 5800'              	subwfb	(___aomod@dividend+5)^0,w,c
  8496  00C4' 5000'              	movf	(___aomod@divisor+6)^0,w,c
  8497  00C6' 5800'              	subwfb	(___aomod@dividend+6)^0,w,c
  8498  00C8' 5000'              	movf	(___aomod@divisor+7)^0,w,c
  8499  00CA' 5800'              	subwfb	(___aomod@dividend+7)^0,w,c
  8500  00CC' A0D8               	btfss	status,0,c
  8501  00CE' EF00' F000'        	goto	u4211
  8502  00D2' EF00' F000'        	goto	u4210
  8503  00D6'                    u4211:
  8504  00D6' EF00' F000'        	goto	l4142
  8505  00DA'                    u4210:
  8506  00DA' 5000'              	movf	___aomod@divisor^0,w,c
  8507  00DC' 5E00'              	subwf	___aomod@dividend^0,f,c
  8508  00DE' 5000'              	movf	(___aomod@divisor+1)^0,w,c
  8509  00E0' 5A00'              	subwfb	(___aomod@dividend+1)^0,f,c
  8510  00E2' 5000'              	movf	(___aomod@divisor+2)^0,w,c
  8511  00E4' 5A00'              	subwfb	(___aomod@dividend+2)^0,f,c
  8512  00E6' 5000'              	movf	(___aomod@divisor+3)^0,w,c
  8513  00E8' 5A00'              	subwfb	(___aomod@dividend+3)^0,f,c
  8514  00EA' 5000'              	movf	(___aomod@divisor+4)^0,w,c
  8515  00EC' 5A00'              	subwfb	(___aomod@dividend+4)^0,f,c
  8516  00EE' 5000'              	movf	(___aomod@divisor+5)^0,w,c
  8517  00F0' 5A00'              	subwfb	(___aomod@dividend+5)^0,f,c
  8518  00F2' 5000'              	movf	(___aomod@divisor+6)^0,w,c
  8519  00F4' 5A00'              	subwfb	(___aomod@dividend+6)^0,f,c
  8520  00F6' 5000'              	movf	(___aomod@divisor+7)^0,w,c
  8521  00F8' 5A00'              	subwfb	(___aomod@dividend+7)^0,f,c
  8522  00FA'                    l4142:
  8523  00FA' 90D8               	bcf	status,0,c
  8524  00FC' 3200'              	rrcf	(___aomod@divisor+7)^0,f,c
  8525  00FE' 3200'              	rrcf	(___aomod@divisor+6)^0,f,c
  8526  0100' 3200'              	rrcf	(___aomod@divisor+5)^0,f,c
  8527  0102' 3200'              	rrcf	(___aomod@divisor+4)^0,f,c
  8528  0104' 3200'              	rrcf	(___aomod@divisor+3)^0,f,c
  8529  0106' 3200'              	rrcf	(___aomod@divisor+2)^0,f,c
  8530  0108' 3200'              	rrcf	(___aomod@divisor+1)^0,f,c
  8531  010A' 3200'              	rrcf	___aomod@divisor^0,f,c
  8532  010C' 2E00'              	decfsz	___aomod@counter^0,f,c
  8533  010E' EF00' F000'        	goto	l4138
  8534  0112'                    l4146:
  8535  0112' 5000'              	movf	___aomod@sign^0,w,c
  8536  0114' B4D8               	btfsc	status,2,c
  8537  0116' EF00' F000'        	goto	u4221
  8538  011A' EF00' F000'        	goto	u4220
  8539  011E'                    u4221:
  8540  011E' EF00' F000'        	goto	l4150
  8541  0122'                    u4220:
  8542  0122' 1E00'              	comf	(___aomod@dividend+7)^0,f,c
  8543  0124' 1E00'              	comf	(___aomod@dividend+6)^0,f,c
  8544  0126' 1E00'              	comf	(___aomod@dividend+5)^0,f,c
  8545  0128' 1E00'              	comf	(___aomod@dividend+4)^0,f,c
  8546  012A' 1E00'              	comf	(___aomod@dividend+3)^0,f,c
  8547  012C' 1E00'              	comf	(___aomod@dividend+2)^0,f,c
  8548  012E' 1E00'              	comf	(___aomod@dividend+1)^0,f,c
  8549  0130' 6C00'              	negf	___aomod@dividend^0,c
  8550  0132' 0E00               	movlw	0
  8551  0134' 2200'              	addwfc	(___aomod@dividend+1)^0,f,c
  8552  0136' 2200'              	addwfc	(___aomod@dividend+2)^0,f,c
  8553  0138' 2200'              	addwfc	(___aomod@dividend+3)^0,f,c
  8554  013A' 2200'              	addwfc	(___aomod@dividend+4)^0,f,c
  8555  013C' 2200'              	addwfc	(___aomod@dividend+5)^0,f,c
  8556  013E' 2200'              	addwfc	(___aomod@dividend+6)^0,f,c
  8557  0140' 2200'              	addwfc	(___aomod@dividend+7)^0,f,c
  8558  0142'                    l4150:
  8559  0142' C000' F000'        	movff	___aomod@dividend,?___aomod
  8560  0146' C001' F001'        	movff	___aomod@dividend+1,?___aomod+1
  8561  014A' C002' F002'        	movff	___aomod@dividend+2,?___aomod+2
  8562  014E' C003' F003'        	movff	___aomod@dividend+3,?___aomod+3
  8563  0152' C004' F004'        	movff	___aomod@dividend+4,?___aomod+4
  8564  0156' C005' F005'        	movff	___aomod@dividend+5,?___aomod+5
  8565  015A' C006' F006'        	movff	___aomod@dividend+6,?___aomod+6
  8566  015E' C007' F007'        	movff	___aomod@dividend+7,?___aomod+7
  8567  0162' 0012               	return		;funcret
  8568  0164'                    __end_of___aomod:
  8569                           	callstack 0
  8570                           
  8571 ;; *************** function ___aodiv *****************
  8572 ;; Defined at:
  8573 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;  dividend        8    0[COMRAM] long long 
  8576 ;;  divisor         8    8[COMRAM] long long 
  8577 ;; Auto vars:     Size  Location     Type
  8578 ;;  quotient        8   18[COMRAM] long long 
  8579 ;;  sign            1   17[COMRAM] unsigned char 
  8580 ;;  counter         1   16[COMRAM] unsigned char 
  8581 ;; Return value:  Size  Location     Type
  8582 ;;                  8    0[COMRAM] long long 
  8583 ;; Registers used:
  8584 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8585 ;; Tracked objects:
  8586 ;;		On entry : 0/0
  8587 ;;		On exit  : 0/0
  8588 ;;		Unchanged: 0/0
  8589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8590 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8591 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8593 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8594 ;;Total ram usage:       26 bytes
  8595 ;; Hardware stack levels used: 1
  8596 ;; This function calls:
  8597 ;;		Nothing
  8598 ;; This function is called by:
  8599 ;;		_dtoa
  8600 ;; This function uses a non-reentrant model
  8601 ;;
  8602                           
  8603                           	psect	text33
  8604  0000'                    __ptext33:
  8605                           	callstack 0
  8606  0000'                    ___aodiv:
  8607                           	callstack 25
  8608  0000' 0E00               	movlw	0
  8609  0002' 6E00'              	movwf	___aodiv@sign^0,c
  8610  0004' BE00'              	btfsc	(___aodiv@divisor+7)^0,7,c
  8611  0006' EF00' F000'        	goto	u4100
  8612  000A' EF00' F000'        	goto	u4101
  8613  000E'                    u4101:
  8614  000E' EF00' F000'        	goto	l4082
  8615  0012'                    u4100:
  8616  0012' 1E00'              	comf	(___aodiv@divisor+7)^0,f,c
  8617  0014' 1E00'              	comf	(___aodiv@divisor+6)^0,f,c
  8618  0016' 1E00'              	comf	(___aodiv@divisor+5)^0,f,c
  8619  0018' 1E00'              	comf	(___aodiv@divisor+4)^0,f,c
  8620  001A' 1E00'              	comf	(___aodiv@divisor+3)^0,f,c
  8621  001C' 1E00'              	comf	(___aodiv@divisor+2)^0,f,c
  8622  001E' 1E00'              	comf	(___aodiv@divisor+1)^0,f,c
  8623  0020' 6C00'              	negf	___aodiv@divisor^0,c
  8624  0022' 0E00               	movlw	0
  8625  0024' 2200'              	addwfc	(___aodiv@divisor+1)^0,f,c
  8626  0026' 2200'              	addwfc	(___aodiv@divisor+2)^0,f,c
  8627  0028' 2200'              	addwfc	(___aodiv@divisor+3)^0,f,c
  8628  002A' 2200'              	addwfc	(___aodiv@divisor+4)^0,f,c
  8629  002C' 2200'              	addwfc	(___aodiv@divisor+5)^0,f,c
  8630  002E' 2200'              	addwfc	(___aodiv@divisor+6)^0,f,c
  8631  0030' 2200'              	addwfc	(___aodiv@divisor+7)^0,f,c
  8632  0032' 0E01               	movlw	1
  8633  0034' 6E00'              	movwf	___aodiv@sign^0,c
  8634  0036'                    l4082:
  8635  0036' BE00'              	btfsc	(___aodiv@dividend+7)^0,7,c
  8636  0038' EF00' F000'        	goto	u4110
  8637  003C' EF00' F000'        	goto	u4111
  8638  0040'                    u4111:
  8639  0040' EF00' F000'        	goto	l4088
  8640  0044'                    u4110:
  8641  0044' 1E00'              	comf	(___aodiv@dividend+7)^0,f,c
  8642  0046' 1E00'              	comf	(___aodiv@dividend+6)^0,f,c
  8643  0048' 1E00'              	comf	(___aodiv@dividend+5)^0,f,c
  8644  004A' 1E00'              	comf	(___aodiv@dividend+4)^0,f,c
  8645  004C' 1E00'              	comf	(___aodiv@dividend+3)^0,f,c
  8646  004E' 1E00'              	comf	(___aodiv@dividend+2)^0,f,c
  8647  0050' 1E00'              	comf	(___aodiv@dividend+1)^0,f,c
  8648  0052' 6C00'              	negf	___aodiv@dividend^0,c
  8649  0054' 0E00               	movlw	0
  8650  0056' 2200'              	addwfc	(___aodiv@dividend+1)^0,f,c
  8651  0058' 2200'              	addwfc	(___aodiv@dividend+2)^0,f,c
  8652  005A' 2200'              	addwfc	(___aodiv@dividend+3)^0,f,c
  8653  005C' 2200'              	addwfc	(___aodiv@dividend+4)^0,f,c
  8654  005E' 2200'              	addwfc	(___aodiv@dividend+5)^0,f,c
  8655  0060' 2200'              	addwfc	(___aodiv@dividend+6)^0,f,c
  8656  0062' 2200'              	addwfc	(___aodiv@dividend+7)^0,f,c
  8657  0064' 0E01               	movlw	1
  8658  0066' 1A00'              	xorwf	___aodiv@sign^0,f,c
  8659  0068'                    l4088:
  8660  0068' EE20' F000'        	lfsr	2,___aodiv@quotient
  8661  006C' 0E07               	movlw	7
  8662  006E'                    u4121:
  8663  006E' 6ADE               	clrf	postinc2,c
  8664  0070' 06E8               	decf	wreg,f,c
  8665  0072' E2FD               	bc	u4121
  8666  0074' 5000'              	movf	___aodiv@divisor^0,w,c
  8667  0076' 1000'              	iorwf	(___aodiv@divisor+1)^0,w,c
  8668  0078' 1000'              	iorwf	(___aodiv@divisor+2)^0,w,c
  8669  007A' 1000'              	iorwf	(___aodiv@divisor+3)^0,w,c
  8670  007C' 1000'              	iorwf	(___aodiv@divisor+4)^0,w,c
  8671  007E' 1000'              	iorwf	(___aodiv@divisor+5)^0,w,c
  8672  0080' 1000'              	iorwf	(___aodiv@divisor+6)^0,w,c
  8673  0082' 1000'              	iorwf	(___aodiv@divisor+7)^0,w,c
  8674  0084' B4D8               	btfsc	status,2,c
  8675  0086' EF00' F000'        	goto	u4131
  8676  008A' EF00' F000'        	goto	u4130
  8677  008E'                    u4131:
  8678  008E' EF00' F000'        	goto	l4110
  8679  0092'                    u4130:
  8680  0092' 0E01               	movlw	1
  8681  0094' 6E00'              	movwf	___aodiv@counter^0,c
  8682  0096' EF00' F000'        	goto	l4096
  8683  009A'                    l4094:
  8684  009A' 90D8               	bcf	status,0,c
  8685  009C' 3600'              	rlcf	___aodiv@divisor^0,f,c
  8686  009E' 3600'              	rlcf	(___aodiv@divisor+1)^0,f,c
  8687  00A0' 3600'              	rlcf	(___aodiv@divisor+2)^0,f,c
  8688  00A2' 3600'              	rlcf	(___aodiv@divisor+3)^0,f,c
  8689  00A4' 3600'              	rlcf	(___aodiv@divisor+4)^0,f,c
  8690  00A6' 3600'              	rlcf	(___aodiv@divisor+5)^0,f,c
  8691  00A8' 3600'              	rlcf	(___aodiv@divisor+6)^0,f,c
  8692  00AA' 3600'              	rlcf	(___aodiv@divisor+7)^0,f,c
  8693  00AC' 2A00'              	incf	___aodiv@counter^0,f,c
  8694  00AE'                    l4096:
  8695  00AE' AE00'              	btfss	(___aodiv@divisor+7)^0,7,c
  8696  00B0' EF00' F000'        	goto	u4141
  8697  00B4' EF00' F000'        	goto	u4140
  8698  00B8'                    u4141:
  8699  00B8' EF00' F000'        	goto	l4094
  8700  00BC'                    u4140:
  8701  00BC'                    l4098:
  8702  00BC' 90D8               	bcf	status,0,c
  8703  00BE' 3600'              	rlcf	___aodiv@quotient^0,f,c
  8704  00C0' 3600'              	rlcf	(___aodiv@quotient+1)^0,f,c
  8705  00C2' 3600'              	rlcf	(___aodiv@quotient+2)^0,f,c
  8706  00C4' 3600'              	rlcf	(___aodiv@quotient+3)^0,f,c
  8707  00C6' 3600'              	rlcf	(___aodiv@quotient+4)^0,f,c
  8708  00C8' 3600'              	rlcf	(___aodiv@quotient+5)^0,f,c
  8709  00CA' 3600'              	rlcf	(___aodiv@quotient+6)^0,f,c
  8710  00CC' 3600'              	rlcf	(___aodiv@quotient+7)^0,f,c
  8711  00CE' 5000'              	movf	___aodiv@divisor^0,w,c
  8712  00D0' 5C00'              	subwf	___aodiv@dividend^0,w,c
  8713  00D2' 5000'              	movf	(___aodiv@divisor+1)^0,w,c
  8714  00D4' 5800'              	subwfb	(___aodiv@dividend+1)^0,w,c
  8715  00D6' 5000'              	movf	(___aodiv@divisor+2)^0,w,c
  8716  00D8' 5800'              	subwfb	(___aodiv@dividend+2)^0,w,c
  8717  00DA' 5000'              	movf	(___aodiv@divisor+3)^0,w,c
  8718  00DC' 5800'              	subwfb	(___aodiv@dividend+3)^0,w,c
  8719  00DE' 5000'              	movf	(___aodiv@divisor+4)^0,w,c
  8720  00E0' 5800'              	subwfb	(___aodiv@dividend+4)^0,w,c
  8721  00E2' 5000'              	movf	(___aodiv@divisor+5)^0,w,c
  8722  00E4' 5800'              	subwfb	(___aodiv@dividend+5)^0,w,c
  8723  00E6' 5000'              	movf	(___aodiv@divisor+6)^0,w,c
  8724  00E8' 5800'              	subwfb	(___aodiv@dividend+6)^0,w,c
  8725  00EA' 5000'              	movf	(___aodiv@divisor+7)^0,w,c
  8726  00EC' 5800'              	subwfb	(___aodiv@dividend+7)^0,w,c
  8727  00EE' A0D8               	btfss	status,0,c
  8728  00F0' EF00' F000'        	goto	u4151
  8729  00F4' EF00' F000'        	goto	u4150
  8730  00F8'                    u4151:
  8731  00F8' EF00' F000'        	goto	l4106
  8732  00FC'                    u4150:
  8733  00FC' 5000'              	movf	___aodiv@divisor^0,w,c
  8734  00FE' 5E00'              	subwf	___aodiv@dividend^0,f,c
  8735  0100' 5000'              	movf	(___aodiv@divisor+1)^0,w,c
  8736  0102' 5A00'              	subwfb	(___aodiv@dividend+1)^0,f,c
  8737  0104' 5000'              	movf	(___aodiv@divisor+2)^0,w,c
  8738  0106' 5A00'              	subwfb	(___aodiv@dividend+2)^0,f,c
  8739  0108' 5000'              	movf	(___aodiv@divisor+3)^0,w,c
  8740  010A' 5A00'              	subwfb	(___aodiv@dividend+3)^0,f,c
  8741  010C' 5000'              	movf	(___aodiv@divisor+4)^0,w,c
  8742  010E' 5A00'              	subwfb	(___aodiv@dividend+4)^0,f,c
  8743  0110' 5000'              	movf	(___aodiv@divisor+5)^0,w,c
  8744  0112' 5A00'              	subwfb	(___aodiv@dividend+5)^0,f,c
  8745  0114' 5000'              	movf	(___aodiv@divisor+6)^0,w,c
  8746  0116' 5A00'              	subwfb	(___aodiv@dividend+6)^0,f,c
  8747  0118' 5000'              	movf	(___aodiv@divisor+7)^0,w,c
  8748  011A' 5A00'              	subwfb	(___aodiv@dividend+7)^0,f,c
  8749  011C' 8000'              	bsf	___aodiv@quotient^0,0,c
  8750  011E'                    l4106:
  8751  011E' 90D8               	bcf	status,0,c
  8752  0120' 3200'              	rrcf	(___aodiv@divisor+7)^0,f,c
  8753  0122' 3200'              	rrcf	(___aodiv@divisor+6)^0,f,c
  8754  0124' 3200'              	rrcf	(___aodiv@divisor+5)^0,f,c
  8755  0126' 3200'              	rrcf	(___aodiv@divisor+4)^0,f,c
  8756  0128' 3200'              	rrcf	(___aodiv@divisor+3)^0,f,c
  8757  012A' 3200'              	rrcf	(___aodiv@divisor+2)^0,f,c
  8758  012C' 3200'              	rrcf	(___aodiv@divisor+1)^0,f,c
  8759  012E' 3200'              	rrcf	___aodiv@divisor^0,f,c
  8760  0130' 2E00'              	decfsz	___aodiv@counter^0,f,c
  8761  0132' EF00' F000'        	goto	l4098
  8762  0136'                    l4110:
  8763  0136' 5000'              	movf	___aodiv@sign^0,w,c
  8764  0138' B4D8               	btfsc	status,2,c
  8765  013A' EF00' F000'        	goto	u4161
  8766  013E' EF00' F000'        	goto	u4160
  8767  0142'                    u4161:
  8768  0142' EF00' F000'        	goto	l4114
  8769  0146'                    u4160:
  8770  0146' 1E00'              	comf	(___aodiv@quotient+7)^0,f,c
  8771  0148' 1E00'              	comf	(___aodiv@quotient+6)^0,f,c
  8772  014A' 1E00'              	comf	(___aodiv@quotient+5)^0,f,c
  8773  014C' 1E00'              	comf	(___aodiv@quotient+4)^0,f,c
  8774  014E' 1E00'              	comf	(___aodiv@quotient+3)^0,f,c
  8775  0150' 1E00'              	comf	(___aodiv@quotient+2)^0,f,c
  8776  0152' 1E00'              	comf	(___aodiv@quotient+1)^0,f,c
  8777  0154' 6C00'              	negf	___aodiv@quotient^0,c
  8778  0156' 0E00               	movlw	0
  8779  0158' 2200'              	addwfc	(___aodiv@quotient+1)^0,f,c
  8780  015A' 2200'              	addwfc	(___aodiv@quotient+2)^0,f,c
  8781  015C' 2200'              	addwfc	(___aodiv@quotient+3)^0,f,c
  8782  015E' 2200'              	addwfc	(___aodiv@quotient+4)^0,f,c
  8783  0160' 2200'              	addwfc	(___aodiv@quotient+5)^0,f,c
  8784  0162' 2200'              	addwfc	(___aodiv@quotient+6)^0,f,c
  8785  0164' 2200'              	addwfc	(___aodiv@quotient+7)^0,f,c
  8786  0166'                    l4114:
  8787  0166' C012' F000'        	movff	___aodiv@quotient,?___aodiv
  8788  016A' C013' F001'        	movff	___aodiv@quotient+1,?___aodiv+1
  8789  016E' C014' F002'        	movff	___aodiv@quotient+2,?___aodiv+2
  8790  0172' C015' F003'        	movff	___aodiv@quotient+3,?___aodiv+3
  8791  0176' C016' F004'        	movff	___aodiv@quotient+4,?___aodiv+4
  8792  017A' C017' F005'        	movff	___aodiv@quotient+5,?___aodiv+5
  8793  017E' C018' F006'        	movff	___aodiv@quotient+6,?___aodiv+6
  8794  0182' C019' F007'        	movff	___aodiv@quotient+7,?___aodiv+7
  8795  0186' 0012               	return		;funcret
  8796  0188'                    __end_of___aodiv:
  8797                           	callstack 0
  8798                           
  8799 ;; *************** function _atoi *****************
  8800 ;; Defined at:
  8801 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\atoi.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;  s               2    7[COMRAM] PTR const unsigned char 
  8804 ;;		 -> STR_1(54), 
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  n               2   20[COMRAM] int 
  8807 ;;  neg             2   13[COMRAM] int 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  2    7[COMRAM] int 
  8810 ;; Registers used:
  8811 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8817 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8818 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8819 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8820 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8821 ;;Total ram usage:       15 bytes
  8822 ;; Hardware stack levels used: 1
  8823 ;; Hardware stack levels required when called: 1
  8824 ;; This function calls:
  8825 ;;		___wmul
  8826 ;;		_isdigit
  8827 ;;		_isspace
  8828 ;; This function is called by:
  8829 ;;		_vfpfcnvrt
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text34
  8834  0000'                    __ptext34:
  8835                           	callstack 0
  8836  0000'                    _atoi:
  8837                           	callstack 25
  8838  0000' 0E00               	movlw	0
  8839  0002' 6E00'              	movwf	(atoi@n+1)^0,c
  8840  0004' 0E00               	movlw	0
  8841  0006' 6E00'              	movwf	atoi@n^0,c
  8842  0008' 0E00               	movlw	0
  8843  000A' 6E00'              	movwf	(atoi@neg+1)^0,c
  8844  000C' 0E00               	movlw	0
  8845  000E' 6E00'              	movwf	atoi@neg^0,c
  8846  0010' EF00' F000'        	goto	l5082
  8847  0014'                    l5080:
  8848  0014' 4A00'              	infsnz	atoi@s^0,f,c
  8849  0016' 2A00'              	incf	(atoi@s+1)^0,f,c
  8850  0018'                    l5082:
  8851  0018' 0E01               	movlw	1
  8852  001A' 6E00'              	movwf	_atoi$2809^0,c
  8853  001C' C007' FFF6         	movff	atoi@s,tblptrl
  8854  0020' C008' FFF7         	movff	atoi@s+1,tblptrh
  8855  0024'                    	if	0	;tblptru may be non-zero
  8856  0024'                    	endif
  8857  0024'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8858  0024' 0E00'              	movlw	low (__mediumconst shr (0+16))
  8859  0026' 6EF8               	movwf	tblptru,c
  8860  0028'                    	endif
  8861  0028' 0008               	tblrd		*
  8862  002A' 50F5               	movf	tablat,w,c
  8863  002C' 0A20               	xorlw	32
  8864  002E' B4D8               	btfsc	status,2,c
  8865  0030' EF00' F000'        	goto	u5951
  8866  0034' EF00' F000'        	goto	u5950
  8867  0038'                    u5951:
  8868  0038' EF00' F000'        	goto	l5090
  8869  003C'                    u5950:
  8870  003C' 0EF7               	movlw	247
  8871  003E' 6E00'              	movwf	??_atoi^0,c
  8872  0040' 0EFF               	movlw	255
  8873  0042' 6E00'              	movwf	(??_atoi+1)^0,c
  8874  0044' C007' FFF6         	movff	atoi@s,tblptrl
  8875  0048' C008' FFF7         	movff	atoi@s+1,tblptrh
  8876  004C'                    	if	0	;tblptru may be non-zero
  8877  004C'                    	endif
  8878  004C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8879  004C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  8880  004E' 6EF8               	movwf	tblptru,c
  8881  0050'                    	endif
  8882  0050' 0008               	tblrd		*
  8883  0052' 50F5               	movf	tablat,w,c
  8884  0054' 6E00'              	movwf	(??_atoi+2)^0,c
  8885  0056' 6A00'              	clrf	(??_atoi+3)^0,c
  8886  0058' 5000'              	movf	??_atoi^0,w,c
  8887  005A' 2600'              	addwf	(??_atoi+2)^0,f,c
  8888  005C' 5000'              	movf	(??_atoi+1)^0,w,c
  8889  005E' 2200'              	addwfc	(??_atoi+3)^0,f,c
  8890  0060' 5000'              	movf	(??_atoi+3)^0,w,c
  8891  0062' E109               	bnz	u5960
  8892  0064' 0E05               	movlw	5
  8893  0066' 5C00'              	subwf	(??_atoi+2)^0,w,c
  8894  0068' A0D8               	btfss	status,0,c
  8895  006A' EF00' F000'        	goto	u5961
  8896  006E' EF00' F000'        	goto	u5960
  8897  0072'                    u5961:
  8898  0072' EF00' F000'        	goto	l5090
  8899  0076'                    u5960:
  8900  0076' 0E00               	movlw	0
  8901  0078' 6E00'              	movwf	_atoi$2809^0,c
  8902  007A'                    l5090:
  8903  007A' C013' F00F'        	movff	_atoi$2809,_atoi$2808
  8904  007E' 6A00'              	clrf	(_atoi$2808+1)^0,c
  8905  0080' 5000'              	movf	_atoi$2808^0,w,c
  8906  0082' 1000'              	iorwf	(_atoi$2808+1)^0,w,c
  8907  0084' A4D8               	btfss	status,2,c
  8908  0086' EF00' F000'        	goto	u5971
  8909  008A' EF00' F000'        	goto	u5970
  8910  008E'                    u5971:
  8911  008E' EF00' F000'        	goto	l5080
  8912  0092'                    u5970:
  8913  0092' EF00' F000'        	goto	l5100
  8914  0096'                    l5096:
  8915  0096' 0E00               	movlw	0
  8916  0098' 6E00'              	movwf	(atoi@neg+1)^0,c
  8917  009A' 0E01               	movlw	1
  8918  009C' 6E00'              	movwf	atoi@neg^0,c
  8919  009E'                    l5098:
  8920  009E' 4A00'              	infsnz	atoi@s^0,f,c
  8921  00A0' 2A00'              	incf	(atoi@s+1)^0,f,c
  8922  00A2' EF00' F000'        	goto	l5106
  8923  00A6'                    l5100:
  8924  00A6' C007' FFF6         	movff	atoi@s,tblptrl
  8925  00AA' C008' FFF7         	movff	atoi@s+1,tblptrh
  8926  00AE'                    	if	0	;tblptru may be non-zero
  8927  00AE'                    	endif
  8928  00AE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8929  00AE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  8930  00B0' 6EF8               	movwf	tblptru,c
  8931  00B2'                    	endif
  8932  00B2' 0008               	tblrd		*
  8933  00B4' 50F5               	movf	tablat,w,c
  8934  00B6' 6E00'              	movwf	??_atoi^0,c
  8935  00B8' 6A00'              	clrf	(??_atoi+1)^0,c
  8936                           
  8937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8938                           ; Switch size 1, requested type "simple"
  8939                           ; Number of cases is 1, Range of values is 0 to 0
  8940                           ; switch strategies available:
  8941                           ; Name         Instructions Cycles
  8942                           ; simple_byte            4     3 (average)
  8943                           ;	Chosen strategy is simple_byte
  8944  00BA' 5000'              	movf	(??_atoi+1)^0,w,c
  8945  00BC' 0A00               	xorlw	0	; case 0
  8946  00BE' B4D8               	btfsc	status,2,c
  8947  00C0' EF00' F000'        	goto	l6000
  8948  00C4' EF00' F000'        	goto	l5106
  8949  00C8'                    l6000:
  8950                           
  8951                           ; Switch size 1, requested type "simple"
  8952                           ; Number of cases is 2, Range of values is 43 to 45
  8953                           ; switch strategies available:
  8954                           ; Name         Instructions Cycles
  8955                           ; simple_byte            7     4 (average)
  8956                           ;	Chosen strategy is simple_byte
  8957  00C8' 5000'              	movf	??_atoi^0,w,c
  8958  00CA' 0A2B               	xorlw	43	; case 43
  8959  00CC' B4D8               	btfsc	status,2,c
  8960  00CE' EF00' F000'        	goto	l5098
  8961  00D2' 0A06               	xorlw	6	; case 45
  8962  00D4' B4D8               	btfsc	status,2,c
  8963  00D6' EF00' F000'        	goto	l5096
  8964  00DA' EF00' F000'        	goto	l5106
  8965  00DE'                    l5102:
  8966  00DE' C014' F000'        	movff	atoi@n,___wmul@multiplier
  8967  00E2' C015' F001'        	movff	atoi@n+1,___wmul@multiplier+1
  8968  00E6' 0E00               	movlw	0
  8969  00E8' 6E00'              	movwf	(___wmul@multiplicand+1)^0,c
  8970  00EA' 0E0A               	movlw	10
  8971  00EC' 6E00'              	movwf	___wmul@multiplicand^0,c
  8972  00EE' EC00' F000'        	call	___wmul	;wreg free
  8973  00F2' C007' FFF6         	movff	atoi@s,tblptrl
  8974  00F6' C008' FFF7         	movff	atoi@s+1,tblptrh
  8975  00FA'                    	if	0	;tblptru may be non-zero
  8976  00FA'                    	endif
  8977  00FA'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8978  00FA' 0E00'              	movlw	low (__mediumconst shr (0+16))
  8979  00FC' 6EF8               	movwf	tblptru,c
  8980  00FE'                    	endif
  8981  00FE' 0008               	tblrd		*
  8982  0100' 50F5               	movf	tablat,w,c
  8983  0102' 5E00'              	subwf	?___wmul^0,f,c
  8984  0104' 0E00               	movlw	0
  8985  0106' 5A00'              	subwfb	(?___wmul+1)^0,f,c
  8986  0108' 0E30               	movlw	48
  8987  010A' 2400'              	addwf	?___wmul^0,w,c
  8988  010C' 6E00'              	movwf	atoi@n^0,c
  8989  010E' 0E00               	movlw	0
  8990  0110' 2000'              	addwfc	(?___wmul+1)^0,w,c
  8991  0112' 6E00'              	movwf	(atoi@n+1)^0,c
  8992  0114' EF00' F000'        	goto	l5098
  8993  0118'                    l5106:
  8994  0118' 0ED0               	movlw	208
  8995  011A' 6E00'              	movwf	??_atoi^0,c
  8996  011C' 0EFF               	movlw	255
  8997  011E' 6E00'              	movwf	(??_atoi+1)^0,c
  8998  0120' C007' FFF6         	movff	atoi@s,tblptrl
  8999  0124' C008' FFF7         	movff	atoi@s+1,tblptrh
  9000  0128'                    	if	0	;tblptru may be non-zero
  9001  0128'                    	endif
  9002  0128'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9003  0128' 0E00'              	movlw	low (__mediumconst shr (0+16))
  9004  012A' 6EF8               	movwf	tblptru,c
  9005  012C'                    	endif
  9006  012C' 0008               	tblrd		*
  9007  012E' 50F5               	movf	tablat,w,c
  9008  0130' 6E00'              	movwf	(??_atoi+2)^0,c
  9009  0132' 6A00'              	clrf	(??_atoi+3)^0,c
  9010  0134' 5000'              	movf	??_atoi^0,w,c
  9011  0136' 2600'              	addwf	(??_atoi+2)^0,f,c
  9012  0138' 5000'              	movf	(??_atoi+1)^0,w,c
  9013  013A' 2200'              	addwfc	(??_atoi+3)^0,f,c
  9014  013C' 5000'              	movf	(??_atoi+3)^0,w,c
  9015  013E' E10A               	bnz	u5980
  9016  0140' 0E0A               	movlw	10
  9017  0142' 5C00'              	subwf	(??_atoi+2)^0,w,c
  9018  0144' A0D8               	btfss	status,0,c
  9019  0146' EF00' F000'        	goto	u5981
  9020  014A' EF00' F000'        	goto	u5980
  9021  014E'                    u5981:
  9022  014E' 0E01               	movlw	1
  9023  0150' EF00' F000'        	goto	u5990
  9024  0154'                    u5980:
  9025  0154' 0E00               	movlw	0
  9026  0156'                    u5990:
  9027  0156' 6E00'              	movwf	_atoi$2810^0,c
  9028  0158' 6A00'              	clrf	(_atoi$2810+1)^0,c
  9029  015A' 5000'              	movf	_atoi$2810^0,w,c
  9030  015C' 1000'              	iorwf	(_atoi$2810+1)^0,w,c
  9031  015E' A4D8               	btfss	status,2,c
  9032  0160' EF00' F000'        	goto	u6001
  9033  0164' EF00' F000'        	goto	u6000
  9034  0168'                    u6001:
  9035  0168' EF00' F000'        	goto	l5102
  9036  016C'                    u6000:
  9037  016C' 5000'              	movf	atoi@neg^0,w,c
  9038  016E' 1000'              	iorwf	(atoi@neg+1)^0,w,c
  9039  0170' A4D8               	btfss	status,2,c
  9040  0172' EF00' F000'        	goto	u6011
  9041  0176' EF00' F000'        	goto	u6010
  9042  017A'                    u6011:
  9043  017A' EF00' F000'        	goto	l1535
  9044  017E'                    u6010:
  9045  017E' C014' F009'        	movff	atoi@n,??_atoi
  9046  0182' C015' F00A'        	movff	atoi@n+1,??_atoi+1
  9047  0186' 1E00'              	comf	??_atoi^0,f,c
  9048  0188' 1E00'              	comf	(??_atoi+1)^0,f,c
  9049  018A' 4A00'              	infsnz	??_atoi^0,f,c
  9050  018C' 2A00'              	incf	(??_atoi+1)^0,f,c
  9051  018E' C009' F007'        	movff	??_atoi,?_atoi
  9052  0192' C00A' F008'        	movff	??_atoi+1,?_atoi+1
  9053  0196' EF00' F000'        	goto	l1538
  9054  019A'                    l1535:
  9055  019A' C014' F007'        	movff	atoi@n,?_atoi
  9056  019E' C015' F008'        	movff	atoi@n+1,?_atoi+1
  9057  01A2'                    l1538:
  9058  01A2' 0012               	return		;funcret
  9059  01A4'                    __end_of_atoi:
  9060                           	callstack 0
  9061                           
  9062 ;; *************** function _isspace *****************
  9063 ;; Defined at:
  9064 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isspace.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;  c               2    0[COMRAM] int 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;		None
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  2    0[COMRAM] int 
  9071 ;; Registers used:
  9072 ;;		wreg, status,2, status,0
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9078 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9080 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9081 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9082 ;;Total ram usage:        7 bytes
  9083 ;; Hardware stack levels used: 1
  9084 ;; This function calls:
  9085 ;;		Nothing
  9086 ;; This function is called by:
  9087 ;;		_atoi
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           	psect	text35
  9092  0000'                    __ptext35:
  9093                           	callstack 0
  9094  0000'                    _isspace:
  9095                           	callstack 25
  9096  0000' 0E01               	movlw	1
  9097  0002' 6E00'              	movwf	_isspace$2839^0,c
  9098  0004' 0E20               	movlw	32
  9099  0006' 1800'              	xorwf	isspace@c^0,w,c
  9100  0008' 1000'              	iorwf	(isspace@c+1)^0,w,c
  9101  000A' B4D8               	btfsc	status,2,c
  9102  000C' EF00' F000'        	goto	u5221
  9103  0010' EF00' F000'        	goto	u5220
  9104  0014'                    u5221:
  9105  0014' EF00' F000'        	goto	l4700
  9106  0018'                    u5220:
  9107  0018' 0EF7               	movlw	247
  9108  001A' 6E00'              	movwf	??_isspace^0,c
  9109  001C' 0EFF               	movlw	255
  9110  001E' 6E00'              	movwf	(??_isspace+1)^0,c
  9111  0020' C000' F004'        	movff	isspace@c,??_isspace+2
  9112  0024' C001' F005'        	movff	isspace@c+1,??_isspace+3
  9113  0028' 5000'              	movf	??_isspace^0,w,c
  9114  002A' 2600'              	addwf	(??_isspace+2)^0,f,c
  9115  002C' 5000'              	movf	(??_isspace+1)^0,w,c
  9116  002E' 2200'              	addwfc	(??_isspace+3)^0,f,c
  9117  0030' 5000'              	movf	(??_isspace+3)^0,w,c
  9118  0032' E109               	bnz	u5230
  9119  0034' 0E05               	movlw	5
  9120  0036' 5C00'              	subwf	(??_isspace+2)^0,w,c
  9121  0038' A0D8               	btfss	status,0,c
  9122  003A' EF00' F000'        	goto	u5231
  9123  003E' EF00' F000'        	goto	u5230
  9124  0042'                    u5231:
  9125  0042' EF00' F000'        	goto	l4700
  9126  0046'                    u5230:
  9127  0046' 0E00               	movlw	0
  9128  0048' 6E00'              	movwf	_isspace$2839^0,c
  9129  004A'                    l4700:
  9130  004A' C006' F000'        	movff	_isspace$2839,?_isspace
  9131  004E' 6A00'              	clrf	(?_isspace+1)^0,c
  9132  0050' 0012               	return		;funcret
  9133  0052'                    __end_of_isspace:
  9134                           	callstack 0
  9135                           
  9136 ;; *************** function _isdigit *****************
  9137 ;; Defined at:
  9138 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isdigit.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;  c               2    0[COMRAM] int 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  2    0[COMRAM] int 
  9145 ;; Registers used:
  9146 ;;		wreg, status,2, status,0
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9154 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9155 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9156 ;;Total ram usage:        6 bytes
  9157 ;; Hardware stack levels used: 1
  9158 ;; This function calls:
  9159 ;;		Nothing
  9160 ;; This function is called by:
  9161 ;;		_vfpfcnvrt
  9162 ;;		_atoi
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           	psect	text36
  9167  0000'                    __ptext36:
  9168                           	callstack 0
  9169  0000'                    _isdigit:
  9170                           	callstack 26
  9171  0000' 0ED0               	movlw	208
  9172  0002' 6E00'              	movwf	??_isdigit^0,c
  9173  0004' 0EFF               	movlw	255
  9174  0006' 6E00'              	movwf	(??_isdigit+1)^0,c
  9175  0008' C000' F004'        	movff	isdigit@c,??_isdigit+2
  9176  000C' C001' F005'        	movff	isdigit@c+1,??_isdigit+3
  9177  0010' 5000'              	movf	??_isdigit^0,w,c
  9178  0012' 2600'              	addwf	(??_isdigit+2)^0,f,c
  9179  0014' 5000'              	movf	(??_isdigit+1)^0,w,c
  9180  0016' 2200'              	addwfc	(??_isdigit+3)^0,f,c
  9181  0018' 5000'              	movf	(??_isdigit+3)^0,w,c
  9182  001A' E10A               	bnz	u5200
  9183  001C' 0E0A               	movlw	10
  9184  001E' 5C00'              	subwf	(??_isdigit+2)^0,w,c
  9185  0020' A0D8               	btfss	status,0,c
  9186  0022' EF00' F000'        	goto	u5201
  9187  0026' EF00' F000'        	goto	u5200
  9188  002A'                    u5201:
  9189  002A' 0E01               	movlw	1
  9190  002C' EF00' F000'        	goto	u5210
  9191  0030'                    u5200:
  9192  0030' 0E00               	movlw	0
  9193  0032'                    u5210:
  9194  0032' 6E00'              	movwf	?_isdigit^0,c
  9195  0034' 6A00'              	clrf	(?_isdigit+1)^0,c
  9196  0036' 0012               	return		;funcret
  9197  0038'                    __end_of_isdigit:
  9198                           	callstack 0
  9199                           
  9200 ;; *************** function _sendStringSerial4 *****************
  9201 ;; Defined at:
  9202 ;;		line 46 in file "serial_comm.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;  string          2    1[COMRAM] PTR unsigned char 
  9205 ;;		 -> colourcards_testing@buf(100), 
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;		None
  9208 ;; Return value:  Size  Location     Type
  9209 ;;                  1    wreg      void 
  9210 ;; Registers used:
  9211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9220 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9221 ;;Total ram usage:        2 bytes
  9222 ;; Hardware stack levels used: 1
  9223 ;; Hardware stack levels required when called: 1
  9224 ;; This function calls:
  9225 ;;		_sendCharSerial4
  9226 ;; This function is called by:
  9227 ;;		_colourcards_testing
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           	psect	text37
  9232  0000'                    __ptext37:
  9233                           	callstack 0
  9234  0000'                    _sendStringSerial4:
  9235                           	callstack 28
  9236  0000'                    
  9237                           ;serial_comm.c: 48:     while (*string != 0) {
  9238  0000' EF00' F000'        	goto	l5432
  9239  0004'                    l5428:
  9240                           
  9241                           ;serial_comm.c: 49:         sendCharSerial4(*string++);
  9242  0004' C001' FFD9         	movff	sendStringSerial4@string,fsr2l
  9243  0008' C002' FFDA         	movff	sendStringSerial4@string+1,fsr2h
  9244  000C' 50DF               	movf	indf2,w,c
  9245  000E' EC00' F000'        	call	_sendCharSerial4
  9246  0012' 4A00'              	infsnz	sendStringSerial4@string^0,f,c
  9247  0014' 2A00'              	incf	(sendStringSerial4@string+1)^0,f,c
  9248  0016'                    l5432:
  9249                           
  9250                           ;serial_comm.c: 48:     while (*string != 0) {
  9251  0016' C001' FFD9         	movff	sendStringSerial4@string,fsr2l
  9252  001A' C002' FFDA         	movff	sendStringSerial4@string+1,fsr2h
  9253  001E' 50DF               	movf	indf2,w,c
  9254  0020' A4D8               	btfss	status,2,c
  9255  0022' EF00' F000'        	goto	u6541
  9256  0026' EF00' F000'        	goto	u6540
  9257  002A'                    u6541:
  9258  002A' EF00' F000'        	goto	l5428
  9259  002E'                    u6540:
  9260  002E' 0012               	return		;funcret
  9261  0030'                    __end_of_sendStringSerial4:
  9262                           	callstack 0
  9263                           
  9264 ;; *************** function _sendCharSerial4 *****************
  9265 ;; Defined at:
  9266 ;;		line 37 in file "serial_comm.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  charToSend      1    wreg     unsigned char 
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  charToSend      1    0[COMRAM] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  1    wreg      void 
  9273 ;; Registers used:
  9274 ;;		wreg
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9284 ;;Total ram usage:        1 bytes
  9285 ;; Hardware stack levels used: 1
  9286 ;; This function calls:
  9287 ;;		Nothing
  9288 ;; This function is called by:
  9289 ;;		_sendStringSerial4
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text38
  9294  0000'                    __ptext38:
  9295                           	callstack 0
  9296  0000'                    _sendCharSerial4:
  9297                           	callstack 28
  9298                           
  9299                           ;incstack = 0
  9300                           ;sendCharSerial4@charToSend stored from wreg
  9301  0000' 6E00'              	movwf	sendCharSerial4@charToSend^0,c
  9302  0002'                    l410:
  9303  0002' 010E               	movlb	14	; () banked
  9304  0004' A537               	btfss	55,2,b	;volatile
  9305  0006' EF00' F000'        	goto	u6321
  9306  000A' EF00' F000'        	goto	u6320
  9307  000E'                    u6321:
  9308  000E' EF00' F000'        	goto	l410
  9309  0012'                    u6320:
  9310  0012'                    
  9311                           ; BSR set to: 14
  9312                           ;serial_comm.c: 39:     TX4REG = charToSend;
  9313  0012' C000' FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  9314  0016'                    
  9315                           ; BSR set to: 14
  9316  0016' 0012               	return		;funcret
  9317  0018'                    __end_of_sendCharSerial4:
  9318                           	callstack 0
  9319                           
  9320 ;; *************** function _colourcards_readRGBC *****************
  9321 ;; Defined at:
  9322 ;;		line 11 in file "colour_cards.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;  tmpval          2   39[COMRAM] PTR struct .
  9325 ;;		 -> main@current(8), 
  9326 ;;  mL              2   41[COMRAM] PTR struct .
  9327 ;;		 -> main@motorL(9), 
  9328 ;;  mR              2   43[COMRAM] PTR struct .
  9329 ;;		 -> main@motorR(9), 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  B_rel           4   57[COMRAM] float 
  9332 ;;  G_rel           4   53[COMRAM] float 
  9333 ;;  R_rel           4   49[COMRAM] float 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9343 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9344 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9345 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9346 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9347 ;;Total ram usage:       22 bytes
  9348 ;; Hardware stack levels used: 1
  9349 ;; Hardware stack levels required when called: 4
  9350 ;; This function calls:
  9351 ;;		___fldiv
  9352 ;;		___flge
  9353 ;;		___xxtofl
  9354 ;;		_colourclick_readRGBC
  9355 ;;		_forward
  9356 ;;		_reverse
  9357 ;;		_stop
  9358 ;;		_turnleft
  9359 ;;		_turnright
  9360 ;; This function is called by:
  9361 ;;		_main
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           	psect	text39
  9366  0000'                    __ptext39:
  9367                           	callstack 0
  9368  0000'                    _colourcards_readRGBC:
  9369                           	callstack 26
  9370  0000'                    
  9371                           ;colour_cards.c: 11: void colourcards_readRGBC(RGBC_val *tmpval, DC_motor *mL, DC_motor 
      +                          *mR);colour_cards.c: 12: {;colour_cards.c: 14:     PIE0bits.INT1IE = 0;
  9372  0000' 010E               	movlb	14	; () banked
  9373  0002' 9329               	bcf	41,1,b	;volatile
  9374  0004'                    
  9375                           ; BSR set to: 14
  9376                           ;colour_cards.c: 17:     float R_rel = (float)tmpval->R / (float)tmpval->C;
  9377  0004' C027' FFD9         	movff	colourcards_readRGBC@tmpval,fsr2l
  9378  0008' C028' FFDA         	movff	colourcards_readRGBC@tmpval+1,fsr2h
  9379  000C' CFDE F02D'         	movff	postinc2,??_colourcards_readRGBC
  9380  0010' CFDD F02E'         	movff	postdec2,??_colourcards_readRGBC+1
  9381  0014' C02D' F000'        	movff	??_colourcards_readRGBC,___xxtofl@val
  9382  0018' C02E' F001'        	movff	??_colourcards_readRGBC+1,___xxtofl@val+1
  9383  001C' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  9384  001E' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  9385  0020' 0E00               	movlw	0
  9386  0022' EC00' F000'        	call	___xxtofl
  9387  0026' C000' F00E'        	movff	?___xxtofl,___fldiv@b
  9388  002A' C001' F00F'        	movff	?___xxtofl+1,___fldiv@b+1
  9389  002E' C002' F010'        	movff	?___xxtofl+2,___fldiv@b+2
  9390  0032' C003' F011'        	movff	?___xxtofl+3,___fldiv@b+3
  9391  0036' EE20 F006          	lfsr	2,6
  9392  003A' 5000'              	movf	colourcards_readRGBC@tmpval^0,w,c
  9393  003C' 26D9               	addwf	fsr2l,f,c
  9394  003E' 5000'              	movf	(colourcards_readRGBC@tmpval+1)^0,w,c
  9395  0040' 22DA               	addwfc	fsr2h,f,c
  9396  0042' CFDE F02F'         	movff	postinc2,??_colourcards_readRGBC+2
  9397  0046' CFDD F030'         	movff	postdec2,??_colourcards_readRGBC+3
  9398  004A' C02F' F000'        	movff	??_colourcards_readRGBC+2,___xxtofl@val
  9399  004E' C030' F001'        	movff	??_colourcards_readRGBC+3,___xxtofl@val+1
  9400  0052' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  9401  0054' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  9402  0056' 0E00               	movlw	0
  9403  0058' EC00' F000'        	call	___xxtofl
  9404  005C' C000' F012'        	movff	?___xxtofl,___fldiv@a
  9405  0060' C001' F013'        	movff	?___xxtofl+1,___fldiv@a+1
  9406  0064' C002' F014'        	movff	?___xxtofl+2,___fldiv@a+2
  9407  0068' C003' F015'        	movff	?___xxtofl+3,___fldiv@a+3
  9408  006C' EC00' F000'        	call	___fldiv	;wreg free
  9409  0070' C00E' F031'        	movff	?___fldiv,colourcards_readRGBC@R_rel
  9410  0074' C00F' F032'        	movff	?___fldiv+1,colourcards_readRGBC@R_rel+1
  9411  0078' C010' F033'        	movff	?___fldiv+2,colourcards_readRGBC@R_rel+2
  9412  007C' C011' F034'        	movff	?___fldiv+3,colourcards_readRGBC@R_rel+3
  9413                           
  9414                           ;colour_cards.c: 18:     float G_rel = (float)tmpval->G / (float)tmpval->C;
  9415  0080' EE20 F002          	lfsr	2,2
  9416  0084' 5000'              	movf	colourcards_readRGBC@tmpval^0,w,c
  9417  0086' 26D9               	addwf	fsr2l,f,c
  9418  0088' 5000'              	movf	(colourcards_readRGBC@tmpval+1)^0,w,c
  9419  008A' 22DA               	addwfc	fsr2h,f,c
  9420  008C' CFDE F02D'         	movff	postinc2,??_colourcards_readRGBC
  9421  0090' CFDD F02E'         	movff	postdec2,??_colourcards_readRGBC+1
  9422  0094' C02D' F000'        	movff	??_colourcards_readRGBC,___xxtofl@val
  9423  0098' C02E' F001'        	movff	??_colourcards_readRGBC+1,___xxtofl@val+1
  9424  009C' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  9425  009E' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  9426  00A0' 0E00               	movlw	0
  9427  00A2' EC00' F000'        	call	___xxtofl
  9428  00A6' C000' F00E'        	movff	?___xxtofl,___fldiv@b
  9429  00AA' C001' F00F'        	movff	?___xxtofl+1,___fldiv@b+1
  9430  00AE' C002' F010'        	movff	?___xxtofl+2,___fldiv@b+2
  9431  00B2' C003' F011'        	movff	?___xxtofl+3,___fldiv@b+3
  9432  00B6' EE20 F006          	lfsr	2,6
  9433  00BA' 5000'              	movf	colourcards_readRGBC@tmpval^0,w,c
  9434  00BC' 26D9               	addwf	fsr2l,f,c
  9435  00BE' 5000'              	movf	(colourcards_readRGBC@tmpval+1)^0,w,c
  9436  00C0' 22DA               	addwfc	fsr2h,f,c
  9437  00C2' CFDE F02F'         	movff	postinc2,??_colourcards_readRGBC+2
  9438  00C6' CFDD F030'         	movff	postdec2,??_colourcards_readRGBC+3
  9439  00CA' C02F' F000'        	movff	??_colourcards_readRGBC+2,___xxtofl@val
  9440  00CE' C030' F001'        	movff	??_colourcards_readRGBC+3,___xxtofl@val+1
  9441  00D2' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  9442  00D4' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  9443  00D6' 0E00               	movlw	0
  9444  00D8' EC00' F000'        	call	___xxtofl
  9445  00DC' C000' F012'        	movff	?___xxtofl,___fldiv@a
  9446  00E0' C001' F013'        	movff	?___xxtofl+1,___fldiv@a+1
  9447  00E4' C002' F014'        	movff	?___xxtofl+2,___fldiv@a+2
  9448  00E8' C003' F015'        	movff	?___xxtofl+3,___fldiv@a+3
  9449  00EC' EC00' F000'        	call	___fldiv	;wreg free
  9450  00F0' C00E' F035'        	movff	?___fldiv,colourcards_readRGBC@G_rel
  9451  00F4' C00F' F036'        	movff	?___fldiv+1,colourcards_readRGBC@G_rel+1
  9452  00F8' C010' F037'        	movff	?___fldiv+2,colourcards_readRGBC@G_rel+2
  9453  00FC' C011' F038'        	movff	?___fldiv+3,colourcards_readRGBC@G_rel+3
  9454                           
  9455                           ;colour_cards.c: 19:     float B_rel = (float)tmpval->B / (float)tmpval->C;
  9456  0100' EE20 F004          	lfsr	2,4
  9457  0104' 5000'              	movf	colourcards_readRGBC@tmpval^0,w,c
  9458  0106' 26D9               	addwf	fsr2l,f,c
  9459  0108' 5000'              	movf	(colourcards_readRGBC@tmpval+1)^0,w,c
  9460  010A' 22DA               	addwfc	fsr2h,f,c
  9461  010C' CFDE F02D'         	movff	postinc2,??_colourcards_readRGBC
  9462  0110' CFDD F02E'         	movff	postdec2,??_colourcards_readRGBC+1
  9463  0114' C02D' F000'        	movff	??_colourcards_readRGBC,___xxtofl@val
  9464  0118' C02E' F001'        	movff	??_colourcards_readRGBC+1,___xxtofl@val+1
  9465  011C' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  9466  011E' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  9467  0120' 0E00               	movlw	0
  9468  0122' EC00' F000'        	call	___xxtofl
  9469  0126' C000' F00E'        	movff	?___xxtofl,___fldiv@b
  9470  012A' C001' F00F'        	movff	?___xxtofl+1,___fldiv@b+1
  9471  012E' C002' F010'        	movff	?___xxtofl+2,___fldiv@b+2
  9472  0132' C003' F011'        	movff	?___xxtofl+3,___fldiv@b+3
  9473  0136' EE20 F006          	lfsr	2,6
  9474  013A' 5000'              	movf	colourcards_readRGBC@tmpval^0,w,c
  9475  013C' 26D9               	addwf	fsr2l,f,c
  9476  013E' 5000'              	movf	(colourcards_readRGBC@tmpval+1)^0,w,c
  9477  0140' 22DA               	addwfc	fsr2h,f,c
  9478  0142' CFDE F02F'         	movff	postinc2,??_colourcards_readRGBC+2
  9479  0146' CFDD F030'         	movff	postdec2,??_colourcards_readRGBC+3
  9480  014A' C02F' F000'        	movff	??_colourcards_readRGBC+2,___xxtofl@val
  9481  014E' C030' F001'        	movff	??_colourcards_readRGBC+3,___xxtofl@val+1
  9482  0152' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  9483  0154' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  9484  0156' 0E00               	movlw	0
  9485  0158' EC00' F000'        	call	___xxtofl
  9486  015C' C000' F012'        	movff	?___xxtofl,___fldiv@a
  9487  0160' C001' F013'        	movff	?___xxtofl+1,___fldiv@a+1
  9488  0164' C002' F014'        	movff	?___xxtofl+2,___fldiv@a+2
  9489  0168' C003' F015'        	movff	?___xxtofl+3,___fldiv@a+3
  9490  016C' EC00' F000'        	call	___fldiv	;wreg free
  9491  0170' C00E' F039'        	movff	?___fldiv,colourcards_readRGBC@B_rel
  9492  0174' C00F' F03A'        	movff	?___fldiv+1,colourcards_readRGBC@B_rel+1
  9493  0178' C010' F03B'        	movff	?___fldiv+2,colourcards_readRGBC@B_rel+2
  9494  017C' C011' F03C'        	movff	?___fldiv+3,colourcards_readRGBC@B_rel+3
  9495  0180'                    
  9496                           ;colour_cards.c: 22:     if ((R_rel>0.54) && (G_rel<0.245) && (B_rel<0.18)) {
  9497  0180' 0E71               	movlw	113
  9498  0182' 6E00'              	movwf	___flge@ff1^0,c
  9499  0184' 0E3D               	movlw	61
  9500  0186' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9501  0188' 0E0A               	movlw	10
  9502  018A' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9503  018C' 0E3F               	movlw	63
  9504  018E' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9505  0190' C031' F01D'        	movff	colourcards_readRGBC@R_rel,___flge@ff2
  9506  0194' C032' F01E'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff2+1
  9507  0198' C033' F01F'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff2+2
  9508  019C' C034' F020'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff2+3
  9509  01A0' EC00' F000'        	call	___flge	;wreg free
  9510  01A4' B0D8               	btfsc	status,0,c
  9511  01A6' EF00' F000'        	goto	u6851
  9512  01AA' EF00' F000'        	goto	u6850
  9513  01AE'                    u6851:
  9514  01AE' EF00' F000'        	goto	l5746
  9515  01B2'                    u6850:
  9516  01B2' C035' F019'        	movff	colourcards_readRGBC@G_rel,___flge@ff1
  9517  01B6' C036' F01A'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff1+1
  9518  01BA' C037' F01B'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff1+2
  9519  01BE' C038' F01C'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff1+3
  9520  01C2' 0E48               	movlw	72
  9521  01C4' 6E00'              	movwf	___flge@ff2^0,c
  9522  01C6' 0EE1               	movlw	225
  9523  01C8' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9524  01CA' 0E7A               	movlw	122
  9525  01CC' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9526  01CE' 0E3E               	movlw	62
  9527  01D0' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9528  01D2' EC00' F000'        	call	___flge	;wreg free
  9529  01D6' B0D8               	btfsc	status,0,c
  9530  01D8' EF00' F000'        	goto	u6861
  9531  01DC' EF00' F000'        	goto	u6860
  9532  01E0'                    u6861:
  9533  01E0' EF00' F000'        	goto	l5746
  9534  01E4'                    u6860:
  9535  01E4' C039' F019'        	movff	colourcards_readRGBC@B_rel,___flge@ff1
  9536  01E8' C03A' F01A'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff1+1
  9537  01EC' C03B' F01B'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff1+2
  9538  01F0' C03C' F01C'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff1+3
  9539  01F4' 0EEC               	movlw	236
  9540  01F6' 6E00'              	movwf	___flge@ff2^0,c
  9541  01F8' 0E51               	movlw	81
  9542  01FA' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9543  01FC' 0E38               	movlw	56
  9544  01FE' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9545  0200' 0E3E               	movlw	62
  9546  0202' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9547  0204' EC00' F000'        	call	___flge	;wreg free
  9548  0208' B0D8               	btfsc	status,0,c
  9549  020A' EF00' F000'        	goto	u6871
  9550  020E' EF00' F000'        	goto	u6870
  9551  0212'                    u6871:
  9552  0212' EF00' F000'        	goto	l5746
  9553  0216'                    u6870:
  9554  0216'                    
  9555                           ;colour_cards.c: 24:         turnright(mL, mR, 90);
  9556  0216' C029' F021'        	movff	colourcards_readRGBC@mL,turnright@mL
  9557  021A' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnright@mL+1
  9558  021E' C02B' F023'        	movff	colourcards_readRGBC@mR,turnright@mR
  9559  0222' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnright@mR+1
  9560  0226' 0E00               	movlw	0
  9561  0228' 6E00'              	movwf	(turnright@deg+1)^0,c
  9562  022A' 0E5A               	movlw	90
  9563  022C' 6E00'              	movwf	turnright@deg^0,c
  9564  022E' EC00' F000'        	call	_turnright	;wreg free
  9565  0232'                    l5744:
  9566                           
  9567                           ;colour_cards.c: 25:         unknowncard_flag = 0;
  9568  0232' 0E00               	movlw	0
  9569  0234' 0100               	movlb	0	; () banked
  9570  0236' 6F00'              	movwf	_unknowncard_flag& (0+255),b	;volatile
  9571                           
  9572                           ;colour_cards.c: 27:     } else if ((R_rel<0.435) && (G_rel>0.31) && (B_rel>0.195)) {
  9573  0238' EF00' F000'        	goto	l5842
  9574  023C'                    l5746:
  9575  023C' C031' F019'        	movff	colourcards_readRGBC@R_rel,___flge@ff1
  9576  0240' C032' F01A'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff1+1
  9577  0244' C033' F01B'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff1+2
  9578  0248' C034' F01C'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff1+3
  9579  024C' 0E52               	movlw	82
  9580  024E' 6E00'              	movwf	___flge@ff2^0,c
  9581  0250' 0EB8               	movlw	184
  9582  0252' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9583  0254' 0EDE               	movlw	222
  9584  0256' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9585  0258' 0E3E               	movlw	62
  9586  025A' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9587  025C' EC00' F000'        	call	___flge	;wreg free
  9588  0260' B0D8               	btfsc	status,0,c
  9589  0262' EF00' F000'        	goto	u6881
  9590  0266' EF00' F000'        	goto	u6880
  9591  026A'                    u6881:
  9592  026A' EF00' F000'        	goto	l5756
  9593  026E'                    u6880:
  9594  026E' 0E52               	movlw	82
  9595  0270' 6E00'              	movwf	___flge@ff1^0,c
  9596  0272' 0EB8               	movlw	184
  9597  0274' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9598  0276' 0E9E               	movlw	158
  9599  0278' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9600  027A' 0E3E               	movlw	62
  9601  027C' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9602  027E' C035' F01D'        	movff	colourcards_readRGBC@G_rel,___flge@ff2
  9603  0282' C036' F01E'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff2+1
  9604  0286' C037' F01F'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff2+2
  9605  028A' C038' F020'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff2+3
  9606  028E' EC00' F000'        	call	___flge	;wreg free
  9607  0292' B0D8               	btfsc	status,0,c
  9608  0294' EF00' F000'        	goto	u6891
  9609  0298' EF00' F000'        	goto	u6890
  9610  029C'                    u6891:
  9611  029C' EF00' F000'        	goto	l5756
  9612  02A0'                    u6890:
  9613  02A0' 0E14               	movlw	20
  9614  02A2' 6E00'              	movwf	___flge@ff1^0,c
  9615  02A4' 0EAE               	movlw	174
  9616  02A6' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9617  02A8' 0E47               	movlw	71
  9618  02AA' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9619  02AC' 0E3E               	movlw	62
  9620  02AE' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9621  02B0' C039' F01D'        	movff	colourcards_readRGBC@B_rel,___flge@ff2
  9622  02B4' C03A' F01E'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff2+1
  9623  02B8' C03B' F01F'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff2+2
  9624  02BC' C03C' F020'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff2+3
  9625  02C0' EC00' F000'        	call	___flge	;wreg free
  9626  02C4' B0D8               	btfsc	status,0,c
  9627  02C6' EF00' F000'        	goto	u6901
  9628  02CA' EF00' F000'        	goto	u6900
  9629  02CE'                    u6901:
  9630  02CE' EF00' F000'        	goto	l5756
  9631  02D2'                    u6900:
  9632  02D2'                    
  9633                           ;colour_cards.c: 29:         turnleft(mL, mR, 90);
  9634  02D2' C029' F021'        	movff	colourcards_readRGBC@mL,turnleft@mL
  9635  02D6' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnleft@mL+1
  9636  02DA' C02B' F023'        	movff	colourcards_readRGBC@mR,turnleft@mR
  9637  02DE' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnleft@mR+1
  9638  02E2' 0E00               	movlw	0
  9639  02E4' 6E00'              	movwf	(turnleft@deg+1)^0,c
  9640  02E6' 0E5A               	movlw	90
  9641  02E8' 6E00'              	movwf	turnleft@deg^0,c
  9642  02EA' EC00' F000'        	call	_turnleft	;wreg free
  9643  02EE' EF00' F000'        	goto	l5744
  9644  02F2'                    l5756:
  9645  02F2' C031' F019'        	movff	colourcards_readRGBC@R_rel,___flge@ff1
  9646  02F6' C032' F01A'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff1+1
  9647  02FA' C033' F01B'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff1+2
  9648  02FE' C034' F01C'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff1+3
  9649  0302' 0EF6               	movlw	246
  9650  0304' 6E00'              	movwf	___flge@ff2^0,c
  9651  0306' 0E28               	movlw	40
  9652  0308' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9653  030A' 0EDC               	movlw	220
  9654  030C' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9655  030E' 0E3E               	movlw	62
  9656  0310' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9657  0312' EC00' F000'        	call	___flge	;wreg free
  9658  0316' B0D8               	btfsc	status,0,c
  9659  0318' EF00' F000'        	goto	u6911
  9660  031C' EF00' F000'        	goto	u6910
  9661  0320'                    u6911:
  9662  0320' EF00' F000'        	goto	l5766
  9663  0324'                    u6910:
  9664  0324' 0E9A               	movlw	154
  9665  0326' 6E00'              	movwf	___flge@ff1^0,c
  9666  0328' 0E99               	movlw	153
  9667  032A' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9668  032C' 0E99               	movlw	153
  9669  032E' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9670  0330' 0E3E               	movlw	62
  9671  0332' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9672  0334' C035' F01D'        	movff	colourcards_readRGBC@G_rel,___flge@ff2
  9673  0338' C036' F01E'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff2+1
  9674  033C' C037' F01F'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff2+2
  9675  0340' C038' F020'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff2+3
  9676  0344' EC00' F000'        	call	___flge	;wreg free
  9677  0348' B0D8               	btfsc	status,0,c
  9678  034A' EF00' F000'        	goto	u6921
  9679  034E' EF00' F000'        	goto	u6920
  9680  0352'                    u6921:
  9681  0352' EF00' F000'        	goto	l5766
  9682  0356'                    u6920:
  9683  0356' 0E3D               	movlw	61
  9684  0358' 6E00'              	movwf	___flge@ff1^0,c
  9685  035A' 0E0A               	movlw	10
  9686  035C' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9687  035E' 0E57               	movlw	87
  9688  0360' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9689  0362' 0E3E               	movlw	62
  9690  0364' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9691  0366' C039' F01D'        	movff	colourcards_readRGBC@B_rel,___flge@ff2
  9692  036A' C03A' F01E'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff2+1
  9693  036E' C03B' F01F'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff2+2
  9694  0372' C03C' F020'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff2+3
  9695  0376' EC00' F000'        	call	___flge	;wreg free
  9696  037A' B0D8               	btfsc	status,0,c
  9697  037C' EF00' F000'        	goto	u6931
  9698  0380' EF00' F000'        	goto	u6930
  9699  0384'                    u6931:
  9700  0384' EF00' F000'        	goto	l5766
  9701  0388'                    u6930:
  9702  0388'                    
  9703                           ;colour_cards.c: 34:         turnright(mL, mR, 180);
  9704  0388' C029' F021'        	movff	colourcards_readRGBC@mL,turnright@mL
  9705  038C' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnright@mL+1
  9706  0390' C02B' F023'        	movff	colourcards_readRGBC@mR,turnright@mR
  9707  0394' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnright@mR+1
  9708  0398' 0E00               	movlw	0
  9709  039A' 6E00'              	movwf	(turnright@deg+1)^0,c
  9710  039C' 0EB4               	movlw	180
  9711  039E' 6E00'              	movwf	turnright@deg^0,c
  9712  03A0' EC00' F000'        	call	_turnright	;wreg free
  9713  03A4' EF00' F000'        	goto	l5744
  9714  03A8'                    l5766:
  9715  03A8' 0E48               	movlw	72
  9716  03AA' 6E00'              	movwf	___flge@ff1^0,c
  9717  03AC' 0EE1               	movlw	225
  9718  03AE' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9719  03B0' 0EFA               	movlw	250
  9720  03B2' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9721  03B4' 0E3E               	movlw	62
  9722  03B6' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9723  03B8' C031' F01D'        	movff	colourcards_readRGBC@R_rel,___flge@ff2
  9724  03BC' C032' F01E'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff2+1
  9725  03C0' C033' F01F'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff2+2
  9726  03C4' C034' F020'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff2+3
  9727  03C8' EC00' F000'        	call	___flge	;wreg free
  9728  03CC' B0D8               	btfsc	status,0,c
  9729  03CE' EF00' F000'        	goto	u6941
  9730  03D2' EF00' F000'        	goto	u6940
  9731  03D6'                    u6941:
  9732  03D6' EF00' F000'        	goto	l5776
  9733  03DA'                    u6940:
  9734  03DA' 0E85               	movlw	133
  9735  03DC' 6E00'              	movwf	___flge@ff1^0,c
  9736  03DE' 0EEB               	movlw	235
  9737  03E0' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9738  03E2' 0E91               	movlw	145
  9739  03E4' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9740  03E6' 0E3E               	movlw	62
  9741  03E8' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9742  03EA' C035' F01D'        	movff	colourcards_readRGBC@G_rel,___flge@ff2
  9743  03EE' C036' F01E'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff2+1
  9744  03F2' C037' F01F'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff2+2
  9745  03F6' C038' F020'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff2+3
  9746  03FA' EC00' F000'        	call	___flge	;wreg free
  9747  03FE' B0D8               	btfsc	status,0,c
  9748  0400' EF00' F000'        	goto	u6951
  9749  0404' EF00' F000'        	goto	u6950
  9750  0408'                    u6951:
  9751  0408' EF00' F000'        	goto	l5776
  9752  040C'                    u6950:
  9753  040C' 0EEC               	movlw	236
  9754  040E' 6E00'              	movwf	___flge@ff1^0,c
  9755  0410' 0E51               	movlw	81
  9756  0412' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9757  0414' 0E38               	movlw	56
  9758  0416' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9759  0418' 0E3E               	movlw	62
  9760  041A' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9761  041C' C039' F01D'        	movff	colourcards_readRGBC@B_rel,___flge@ff2
  9762  0420' C03A' F01E'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff2+1
  9763  0424' C03B' F01F'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff2+2
  9764  0428' C03C' F020'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff2+3
  9765  042C' EC00' F000'        	call	___flge	;wreg free
  9766  0430' B0D8               	btfsc	status,0,c
  9767  0432' EF00' F000'        	goto	u6961
  9768  0436' EF00' F000'        	goto	u6960
  9769  043A'                    u6961:
  9770  043A' EF00' F000'        	goto	l5776
  9771  043E'                    u6960:
  9772  043E'                    
  9773                           ;colour_cards.c: 39:         reverse(mL, mR);
  9774  043E' C029' F019'        	movff	colourcards_readRGBC@mL,reverse@mL
  9775  0442' C02A' F01A'        	movff	colourcards_readRGBC@mL+1,reverse@mL+1
  9776  0446' C02B' F01B'        	movff	colourcards_readRGBC@mR,reverse@mR
  9777  044A' C02C' F01C'        	movff	colourcards_readRGBC@mR+1,reverse@mR+1
  9778  044E' EC00' F000'        	call	_reverse	;wreg free
  9779                           
  9780                           ;colour_cards.c: 40:         stop(mL, mR);
  9781  0452' C029' F019'        	movff	colourcards_readRGBC@mL,stop@mL
  9782  0456' C02A' F01A'        	movff	colourcards_readRGBC@mL+1,stop@mL+1
  9783  045A' C02B' F01B'        	movff	colourcards_readRGBC@mR,stop@mR
  9784  045E' C02C' F01C'        	movff	colourcards_readRGBC@mR+1,stop@mR+1
  9785  0462' EC00' F000'        	call	_stop	;wreg free
  9786                           
  9787                           ;colour_cards.c: 41:         turnright(mL, mR, 90);
  9788  0466' C029' F021'        	movff	colourcards_readRGBC@mL,turnright@mL
  9789  046A' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnright@mL+1
  9790  046E' C02B' F023'        	movff	colourcards_readRGBC@mR,turnright@mR
  9791  0472' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnright@mR+1
  9792  0476' 0E00               	movlw	0
  9793  0478' 6E00'              	movwf	(turnright@deg+1)^0,c
  9794  047A' 0E5A               	movlw	90
  9795  047C' 6E00'              	movwf	turnright@deg^0,c
  9796  047E' EC00' F000'        	call	_turnright	;wreg free
  9797  0482' EF00' F000'        	goto	l5744
  9798  0486'                    l5776:
  9799  0486' 0E48               	movlw	72
  9800  0488' 6E00'              	movwf	___flge@ff1^0,c
  9801  048A' 0EE1               	movlw	225
  9802  048C' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9803  048E' 0EFA               	movlw	250
  9804  0490' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9805  0492' 0E3E               	movlw	62
  9806  0494' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9807  0496' C031' F01D'        	movff	colourcards_readRGBC@R_rel,___flge@ff2
  9808  049A' C032' F01E'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff2+1
  9809  049E' C033' F01F'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff2+2
  9810  04A2' C034' F020'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff2+3
  9811  04A6' EC00' F000'        	call	___flge	;wreg free
  9812  04AA' B0D8               	btfsc	status,0,c
  9813  04AC' EF00' F000'        	goto	u6971
  9814  04B0' EF00' F000'        	goto	u6970
  9815  04B4'                    u6971:
  9816  04B4' EF00' F000'        	goto	l5786
  9817  04B8'                    u6970:
  9818  04B8' C035' F019'        	movff	colourcards_readRGBC@G_rel,___flge@ff1
  9819  04BC' C036' F01A'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff1+1
  9820  04C0' C037' F01B'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff1+2
  9821  04C4' C038' F01C'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff1+3
  9822  04C8' 0ECD               	movlw	205
  9823  04CA' 6E00'              	movwf	___flge@ff2^0,c
  9824  04CC' 0ECC               	movlw	204
  9825  04CE' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9826  04D0' 0E8C               	movlw	140
  9827  04D2' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9828  04D4' 0E3E               	movlw	62
  9829  04D6' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9830  04D8' EC00' F000'        	call	___flge	;wreg free
  9831  04DC' B0D8               	btfsc	status,0,c
  9832  04DE' EF00' F000'        	goto	u6981
  9833  04E2' EF00' F000'        	goto	u6980
  9834  04E6'                    u6981:
  9835  04E6' EF00' F000'        	goto	l5786
  9836  04EA'                    u6980:
  9837  04EA' 0E14               	movlw	20
  9838  04EC' 6E00'              	movwf	___flge@ff1^0,c
  9839  04EE' 0EAE               	movlw	174
  9840  04F0' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9841  04F2' 0E47               	movlw	71
  9842  04F4' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9843  04F6' 0E3E               	movlw	62
  9844  04F8' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9845  04FA' C039' F01D'        	movff	colourcards_readRGBC@B_rel,___flge@ff2
  9846  04FE' C03A' F01E'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff2+1
  9847  0502' C03B' F01F'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff2+2
  9848  0506' C03C' F020'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff2+3
  9849  050A' EC00' F000'        	call	___flge	;wreg free
  9850  050E' B0D8               	btfsc	status,0,c
  9851  0510' EF00' F000'        	goto	u6991
  9852  0514' EF00' F000'        	goto	u6990
  9853  0518'                    u6991:
  9854  0518' EF00' F000'        	goto	l5786
  9855  051C'                    u6990:
  9856  051C'                    
  9857                           ;colour_cards.c: 46:         reverse(mL, mR);
  9858  051C' C029' F019'        	movff	colourcards_readRGBC@mL,reverse@mL
  9859  0520' C02A' F01A'        	movff	colourcards_readRGBC@mL+1,reverse@mL+1
  9860  0524' C02B' F01B'        	movff	colourcards_readRGBC@mR,reverse@mR
  9861  0528' C02C' F01C'        	movff	colourcards_readRGBC@mR+1,reverse@mR+1
  9862  052C' EC00' F000'        	call	_reverse	;wreg free
  9863                           
  9864                           ;colour_cards.c: 47:         stop(mL, mR);
  9865  0530' C029' F019'        	movff	colourcards_readRGBC@mL,stop@mL
  9866  0534' C02A' F01A'        	movff	colourcards_readRGBC@mL+1,stop@mL+1
  9867  0538' C02B' F01B'        	movff	colourcards_readRGBC@mR,stop@mR
  9868  053C' C02C' F01C'        	movff	colourcards_readRGBC@mR+1,stop@mR+1
  9869  0540' EC00' F000'        	call	_stop	;wreg free
  9870                           
  9871                           ;colour_cards.c: 48:         turnleft(mL, mR, 90);
  9872  0544' C029' F021'        	movff	colourcards_readRGBC@mL,turnleft@mL
  9873  0548' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnleft@mL+1
  9874  054C' C02B' F023'        	movff	colourcards_readRGBC@mR,turnleft@mR
  9875  0550' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnleft@mR+1
  9876  0554' 0E00               	movlw	0
  9877  0556' 6E00'              	movwf	(turnleft@deg+1)^0,c
  9878  0558' 0E5A               	movlw	90
  9879  055A' 6E00'              	movwf	turnleft@deg^0,c
  9880  055C' EC00' F000'        	call	_turnleft	;wreg free
  9881  0560' EF00' F000'        	goto	l5744
  9882  0564'                    l5786:
  9883  0564' 0E71               	movlw	113
  9884  0566' 6E00'              	movwf	___flge@ff1^0,c
  9885  0568' 0E3D               	movlw	61
  9886  056A' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9887  056C' 0E0A               	movlw	10
  9888  056E' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9889  0570' 0E3F               	movlw	63
  9890  0572' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9891  0574' C031' F01D'        	movff	colourcards_readRGBC@R_rel,___flge@ff2
  9892  0578' C032' F01E'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff2+1
  9893  057C' C033' F01F'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff2+2
  9894  0580' C034' F020'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff2+3
  9895  0584' EC00' F000'        	call	___flge	;wreg free
  9896  0588' B0D8               	btfsc	status,0,c
  9897  058A' EF00' F000'        	goto	u7001
  9898  058E' EF00' F000'        	goto	u7000
  9899  0592'                    u7001:
  9900  0592' EF00' F000'        	goto	l5796
  9901  0596'                    u7000:
  9902  0596' C035' F019'        	movff	colourcards_readRGBC@G_rel,___flge@ff1
  9903  059A' C036' F01A'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff1+1
  9904  059E' C037' F01B'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff1+2
  9905  05A2' C038' F01C'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff1+3
  9906  05A6' 0E8F               	movlw	143
  9907  05A8' 6E00'              	movwf	___flge@ff2^0,c
  9908  05AA' 0EC2               	movlw	194
  9909  05AC' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9910  05AE' 0E75               	movlw	117
  9911  05B0' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9912  05B2' 0E3E               	movlw	62
  9913  05B4' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9914  05B6' EC00' F000'        	call	___flge	;wreg free
  9915  05BA' B0D8               	btfsc	status,0,c
  9916  05BC' EF00' F000'        	goto	u7011
  9917  05C0' EF00' F000'        	goto	u7010
  9918  05C4'                    u7011:
  9919  05C4' EF00' F000'        	goto	l5796
  9920  05C8'                    u7010:
  9921  05C8' C039' F019'        	movff	colourcards_readRGBC@B_rel,___flge@ff1
  9922  05CC' C03A' F01A'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff1+1
  9923  05D0' C03B' F01B'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff1+2
  9924  05D4' C03C' F01C'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff1+3
  9925  05D8' 0EEC               	movlw	236
  9926  05DA' 6E00'              	movwf	___flge@ff2^0,c
  9927  05DC' 0E51               	movlw	81
  9928  05DE' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9929  05E0' 0E38               	movlw	56
  9930  05E2' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9931  05E4' 0E3E               	movlw	62
  9932  05E6' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9933  05E8' EC00' F000'        	call	___flge	;wreg free
  9934  05EC' B0D8               	btfsc	status,0,c
  9935  05EE' EF00' F000'        	goto	u7021
  9936  05F2' EF00' F000'        	goto	u7020
  9937  05F6'                    u7021:
  9938  05F6' EF00' F000'        	goto	l5796
  9939  05FA'                    u7020:
  9940  05FA'                    
  9941                           ;colour_cards.c: 53:         turnright(mL, mR, 135);
  9942  05FA' C029' F021'        	movff	colourcards_readRGBC@mL,turnright@mL
  9943  05FE' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnright@mL+1
  9944  0602' C02B' F023'        	movff	colourcards_readRGBC@mR,turnright@mR
  9945  0606' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnright@mR+1
  9946  060A' 0E00               	movlw	0
  9947  060C' 6E00'              	movwf	(turnright@deg+1)^0,c
  9948  060E' 0E87               	movlw	135
  9949  0610' 6E00'              	movwf	turnright@deg^0,c
  9950  0612' EC00' F000'        	call	_turnright	;wreg free
  9951  0616' EF00' F000'        	goto	l5744
  9952  061A'                    l5796:
  9953  061A' C031' F019'        	movff	colourcards_readRGBC@R_rel,___flge@ff1
  9954  061E' C032' F01A'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff1+1
  9955  0622' C033' F01B'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff1+2
  9956  0626' C034' F01C'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff1+3
  9957  062A' 0EAE               	movlw	174
  9958  062C' 6E00'              	movwf	___flge@ff2^0,c
  9959  062E' 0E47               	movlw	71
  9960  0630' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9961  0632' 0EE1               	movlw	225
  9962  0634' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9963  0636' 0E3E               	movlw	62
  9964  0638' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9965  063A' EC00' F000'        	call	___flge	;wreg free
  9966  063E' B0D8               	btfsc	status,0,c
  9967  0640' EF00' F000'        	goto	u7031
  9968  0644' EF00' F000'        	goto	u7030
  9969  0648'                    u7031:
  9970  0648' EF00' F000'        	goto	l5806
  9971  064C'                    u7030:
  9972  064C' 0EF6               	movlw	246
  9973  064E' 6E00'              	movwf	___flge@ff1^0,c
  9974  0650' 0E28               	movlw	40
  9975  0652' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9976  0654' 0E9C               	movlw	156
  9977  0656' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9978  0658' 0E3E               	movlw	62
  9979  065A' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9980  065C' C035' F01D'        	movff	colourcards_readRGBC@G_rel,___flge@ff2
  9981  0660' C036' F01E'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff2+1
  9982  0664' C037' F01F'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff2+2
  9983  0668' C038' F020'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff2+3
  9984  066C' EC00' F000'        	call	___flge	;wreg free
  9985  0670' B0D8               	btfsc	status,0,c
  9986  0672' EF00' F000'        	goto	u7041
  9987  0676' EF00' F000'        	goto	u7040
  9988  067A'                    u7041:
  9989  067A' EF00' F000'        	goto	l5806
  9990  067E'                    u7040:
  9991  067E' 0E3D               	movlw	61
  9992  0680' 6E00'              	movwf	___flge@ff1^0,c
  9993  0682' 0E0A               	movlw	10
  9994  0684' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9995  0686' 0E57               	movlw	87
  9996  0688' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9997  068A' 0E3E               	movlw	62
  9998  068C' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9999  068E' C039' F01D'        	movff	colourcards_readRGBC@B_rel,___flge@ff2
 10000  0692' C03A' F01E'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff2+1
 10001  0696' C03B' F01F'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff2+2
 10002  069A' C03C' F020'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff2+3
 10003  069E' EC00' F000'        	call	___flge	;wreg free
 10004  06A2' B0D8               	btfsc	status,0,c
 10005  06A4' EF00' F000'        	goto	u7051
 10006  06A8' EF00' F000'        	goto	u7050
 10007  06AC'                    u7051:
 10008  06AC' EF00' F000'        	goto	l5806
 10009  06B0'                    u7050:
 10010  06B0'                    
 10011                           ;colour_cards.c: 58:         turnleft(mL, mR, 135);
 10012  06B0' C029' F021'        	movff	colourcards_readRGBC@mL,turnleft@mL
 10013  06B4' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnleft@mL+1
 10014  06B8' C02B' F023'        	movff	colourcards_readRGBC@mR,turnleft@mR
 10015  06BC' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnleft@mR+1
 10016  06C0' 0E00               	movlw	0
 10017  06C2' 6E00'              	movwf	(turnleft@deg+1)^0,c
 10018  06C4' 0E87               	movlw	135
 10019  06C6' 6E00'              	movwf	turnleft@deg^0,c
 10020  06C8' EC00' F000'        	call	_turnleft	;wreg free
 10021  06CC' EF00' F000'        	goto	l5744
 10022  06D0'                    l5806:
 10023  06D0' C031' F019'        	movff	colourcards_readRGBC@R_rel,___flge@ff1
 10024  06D4' C032' F01A'        	movff	colourcards_readRGBC@R_rel+1,___flge@ff1+1
 10025  06D8' C033' F01B'        	movff	colourcards_readRGBC@R_rel+2,___flge@ff1+2
 10026  06DC' C034' F01C'        	movff	colourcards_readRGBC@R_rel+3,___flge@ff1+3
 10027  06E0' 0E1F               	movlw	31
 10028  06E2' 6E00'              	movwf	___flge@ff2^0,c
 10029  06E4' 0E85               	movlw	133
 10030  06E6' 6E00'              	movwf	(___flge@ff2+1)^0,c
 10031  06E8' 0EEB               	movlw	235
 10032  06EA' 6E00'              	movwf	(___flge@ff2+2)^0,c
 10033  06EC' 0E3E               	movlw	62
 10034  06EE' 6E00'              	movwf	(___flge@ff2+3)^0,c
 10035  06F0' EC00' F000'        	call	___flge	;wreg free
 10036  06F4' B0D8               	btfsc	status,0,c
 10037  06F6' EF00' F000'        	goto	u7061
 10038  06FA' EF00' F000'        	goto	u7060
 10039  06FE'                    u7061:
 10040  06FE' EF00' F000'        	goto	l5818
 10041  0702'                    u7060:
 10042  0702' 0E3D               	movlw	61
 10043  0704' 6E00'              	movwf	___flge@ff1^0,c
 10044  0706' 0E0A               	movlw	10
 10045  0708' 6E00'              	movwf	(___flge@ff1+1)^0,c
 10046  070A' 0E97               	movlw	151
 10047  070C' 6E00'              	movwf	(___flge@ff1+2)^0,c
 10048  070E' 0E3E               	movlw	62
 10049  0710' 6E00'              	movwf	(___flge@ff1+3)^0,c
 10050  0712' C035' F01D'        	movff	colourcards_readRGBC@G_rel,___flge@ff2
 10051  0716' C036' F01E'        	movff	colourcards_readRGBC@G_rel+1,___flge@ff2+1
 10052  071A' C037' F01F'        	movff	colourcards_readRGBC@G_rel+2,___flge@ff2+2
 10053  071E' C038' F020'        	movff	colourcards_readRGBC@G_rel+3,___flge@ff2+3
 10054  0722' EC00' F000'        	call	___flge	;wreg free
 10055  0726' B0D8               	btfsc	status,0,c
 10056  0728' EF00' F000'        	goto	u7071
 10057  072C' EF00' F000'        	goto	u7070
 10058  0730'                    u7071:
 10059  0730' EF00' F000'        	goto	l5818
 10060  0734'                    u7070:
 10061  0734' 0E3D               	movlw	61
 10062  0736' 6E00'              	movwf	___flge@ff1^0,c
 10063  0738' 0E0A               	movlw	10
 10064  073A' 6E00'              	movwf	(___flge@ff1+1)^0,c
 10065  073C' 0E57               	movlw	87
 10066  073E' 6E00'              	movwf	(___flge@ff1+2)^0,c
 10067  0740' 0E3E               	movlw	62
 10068  0742' 6E00'              	movwf	(___flge@ff1+3)^0,c
 10069  0744' C039' F01D'        	movff	colourcards_readRGBC@B_rel,___flge@ff2
 10070  0748' C03A' F01E'        	movff	colourcards_readRGBC@B_rel+1,___flge@ff2+1
 10071  074C' C03B' F01F'        	movff	colourcards_readRGBC@B_rel+2,___flge@ff2+2
 10072  0750' C03C' F020'        	movff	colourcards_readRGBC@B_rel+3,___flge@ff2+3
 10073  0754' EC00' F000'        	call	___flge	;wreg free
 10074  0758' B0D8               	btfsc	status,0,c
 10075  075A' EF00' F000'        	goto	u7081
 10076  075E' EF00' F000'        	goto	u7080
 10077  0762'                    u7081:
 10078  0762' EF00' F000'        	goto	l5818
 10079  0766'                    u7080:
 10080  0766'                    
 10081                           ;colour_cards.c: 63:         turnright(mL, mR, 180);
 10082  0766' C029' F021'        	movff	colourcards_readRGBC@mL,turnright@mL
 10083  076A' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnright@mL+1
 10084  076E' C02B' F023'        	movff	colourcards_readRGBC@mR,turnright@mR
 10085  0772' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnright@mR+1
 10086  0776' 0E00               	movlw	0
 10087  0778' 6E00'              	movwf	(turnright@deg+1)^0,c
 10088  077A' 0EB4               	movlw	180
 10089  077C' 6E00'              	movwf	turnright@deg^0,c
 10090  077E' EC00' F000'        	call	_turnright	;wreg free
 10091  0782'                    
 10092                           ;colour_cards.c: 64:         unknowncard_flag = 0;
 10093  0782' 0E00               	movlw	0
 10094  0784' 0100               	movlb	0	; () banked
 10095  0786' 6F00'              	movwf	_unknowncard_flag& (0+255),b	;volatile
 10096  0788'                    
 10097                           ; BSR set to: 0
 10098                           ;colour_cards.c: 65:         returnhome_flag = 1;
 10099  0788' 0E01               	movlw	1
 10100  078A' 6F00'              	movwf	_returnhome_flag& (0+255),b	;volatile
 10101                           
 10102                           ;colour_cards.c: 67:     } else {
 10103  078C' EF00' F000'        	goto	l5842
 10104  0790'                    l5818:
 10105                           
 10106                           ;colour_cards.c: 69:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10107  0790' 0E52               	movlw	82
 10108  0792' 6E00'              	movwf	(??_colourcards_readRGBC+1)^0,c
 10109  0794' 0E2B               	movlw	43
 10110  0796' 6E00'              	movwf	??_colourcards_readRGBC^0,c
 10111  0798' 0E00               	movlw	0
 10112  079A'                    u7267:
 10113  079A' 2EE8               	decfsz	wreg,f,c
 10114  079C' D7FE               	bra	u7267
 10115  079E' 2E00'              	decfsz	??_colourcards_readRGBC^0,f,c
 10116  07A0' D7FC               	bra	u7267
 10117  07A2' 2E00'              	decfsz	(??_colourcards_readRGBC+1)^0,f,c
 10118  07A4' D7FA               	bra	u7267
 10119  07A6' D000               	nop2	
 10120  07A8'                    
 10121                           ;colour_cards.c: 70:         colourclick_readRGBC(tmpval);
 10122  07A8' C027' F00B'        	movff	colourcards_readRGBC@tmpval,colourclick_readRGBC@tmpval
 10123  07AC' C028' F00C'        	movff	colourcards_readRGBC@tmpval+1,colourclick_readRGBC@tmpval+1
 10124  07B0' EC00' F000'        	call	_colourclick_readRGBC	;wreg free
 10125  07B4'                    
 10126                           ;colour_cards.c: 71:         if ((tmpval->C < interrupts_lower) || (tmpval->C > interrup
      +                          ts_upper)) {
 10127  07B4' EE20 F006          	lfsr	2,6
 10128  07B8' 5000'              	movf	colourcards_readRGBC@tmpval^0,w,c
 10129  07BA' 26D9               	addwf	fsr2l,f,c
 10130  07BC' 5000'              	movf	(colourcards_readRGBC@tmpval+1)^0,w,c
 10131  07BE' 22DA               	addwfc	fsr2h,f,c
 10132  07C0' 0100               	movlb	0	; () banked
 10133  07C2' 5100'              	movf	_interrupts_lower& (0+255),w,b	;volatile
 10134  07C4' 5CDE               	subwf	postinc2,w,c
 10135  07C6' 5100'              	movf	(_interrupts_lower+1)& (0+255),w,b	;volatile
 10136  07C8' 58DE               	subwfb	postinc2,w,c
 10137  07CA' A0D8               	btfss	status,0,c
 10138  07CC' EF00' F000'        	goto	u7091
 10139  07D0' EF00' F000'        	goto	u7090
 10140  07D4'                    u7091:
 10141  07D4' EF00' F000'        	goto	l5826
 10142  07D8'                    u7090:
 10143  07D8'                    
 10144                           ; BSR set to: 0
 10145  07D8' EE20 F006          	lfsr	2,6
 10146  07DC' 5000'              	movf	colourcards_readRGBC@tmpval^0,w,c
 10147  07DE' 26D9               	addwf	fsr2l,f,c
 10148  07E0' 5000'              	movf	(colourcards_readRGBC@tmpval+1)^0,w,c
 10149  07E2' 22DA               	addwfc	fsr2h,f,c
 10150  07E4' 50DE               	movf	postinc2,w,c
 10151  07E6' 5D00'              	subwf	_interrupts_upper& (0+255),w,b	;volatile
 10152  07E8' 50DE               	movf	postinc2,w,c
 10153  07EA' 5900'              	subwfb	(_interrupts_upper+1)& (0+255),w,b	;volatile
 10154  07EC' B0D8               	btfsc	status,0,c
 10155  07EE' EF00' F000'        	goto	u7101
 10156  07F2' EF00' F000'        	goto	u7100
 10157  07F6'                    u7101:
 10158  07F6' EF00' F000'        	goto	l5838
 10159  07FA'                    u7100:
 10160  07FA'                    l5826:
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;colour_cards.c: 72:             if (unknowncard_flag<3) {
 10164  07FA' 0E03               	movlw	3
 10165  07FC' 6100'              	cpfslt	_unknowncard_flag& (0+255),b	;volatile
 10166  07FE' EF00' F000'        	goto	u7111
 10167  0802' EF00' F000'        	goto	u7110
 10168  0806'                    u7111:
 10169  0806' EF00' F000'        	goto	l164
 10170  080A'                    u7110:
 10171  080A'                    
 10172                           ; BSR set to: 0
 10173                           ;colour_cards.c: 73:                 PIR0bits.INT1IF = 1;
 10174  080A' 010E               	movlb	14	; () banked
 10175  080C' 8333               	bsf	51,1,b	;volatile
 10176  080E'                    
 10177                           ; BSR set to: 14
 10178                           ;colour_cards.c: 74:                 unknowncard_flag++;
 10179  080E' 0100               	movlb	0	; () banked
 10180  0810' 2B00'              	incf	_unknowncard_flag& (0+255),f,b	;volatile
 10181                           
 10182                           ;colour_cards.c: 75:             } else {
 10183  0812' EF00' F000'        	goto	l5842
 10184  0816'                    l164:
 10185                           
 10186                           ; BSR set to: 0
 10187                           ;colour_cards.c: 76:                 LATHbits.LATH3 = 1;
 10188  0816' 8680               	bsf	128,3,c	;volatile
 10189  0818'                    
 10190                           ; BSR set to: 0
 10191                           ;colour_cards.c: 77:                 turnright(mL, mR, 180);
 10192  0818' C029' F021'        	movff	colourcards_readRGBC@mL,turnright@mL
 10193  081C' C02A' F022'        	movff	colourcards_readRGBC@mL+1,turnright@mL+1
 10194  0820' C02B' F023'        	movff	colourcards_readRGBC@mR,turnright@mR
 10195  0824' C02C' F024'        	movff	colourcards_readRGBC@mR+1,turnright@mR+1
 10196  0828' 0E00               	movlw	0
 10197  082A' 6E00'              	movwf	(turnright@deg+1)^0,c
 10198  082C' 0EB4               	movlw	180
 10199  082E' 6E00'              	movwf	turnright@deg^0,c
 10200  0830' EC00' F000'        	call	_turnright	;wreg free
 10201  0834'                    
 10202                           ;colour_cards.c: 78:                 returnhome_flag = !returnhome_flag;
 10203  0834' 0100               	movlb	0	; () banked
 10204  0836' 5100'              	movf	_returnhome_flag& (0+255),w,b	;volatile
 10205  0838' B4D8               	btfsc	status,2,c
 10206  083A' EF00' F000'        	goto	u7121
 10207  083E' EF00' F000'        	goto	u7120
 10208  0842'                    u7121:
 10209  0842' 0E01               	movlw	1
 10210  0844' EF00' F000'        	goto	u7130
 10211  0848'                    u7120:
 10212  0848' 0E00               	movlw	0
 10213  084A'                    u7130:
 10214  084A' 6F00'              	movwf	_returnhome_flag& (0+255),b	;volatile
 10215  084C' EF00' F000'        	goto	l5744
 10216  0850'                    l5838:
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;colour_cards.c: 82:             forward(mL, mR);
 10220  0850' C029' F019'        	movff	colourcards_readRGBC@mL,forward@mL
 10221  0854' C02A' F01A'        	movff	colourcards_readRGBC@mL+1,forward@mL+1
 10222  0858' C02B' F01B'        	movff	colourcards_readRGBC@mR,forward@mR
 10223  085C' C02C' F01C'        	movff	colourcards_readRGBC@mR+1,forward@mR+1
 10224  0860' EC00' F000'        	call	_forward	;wreg free
 10225  0864' EF00' F000'        	goto	l5744
 10226  0868'                    l5842:
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;colour_cards.c: 88:     colourcard_flag = 0;
 10230  0868' 0E00               	movlw	0
 10231  086A' 6F00'              	movwf	_colourcard_flag& (0+255),b	;volatile
 10232  086C'                    
 10233                           ; BSR set to: 0
 10234                           ;colour_cards.c: 89:     PIE0bits.INT1IE = 1;
 10235  086C' 010E               	movlb	14	; () banked
 10236  086E' 8329               	bsf	41,1,b	;volatile
 10237  0870'                    
 10238                           ; BSR set to: 14
 10239  0870' 0012               	return		;funcret
 10240  0872'                    __end_of_colourcards_readRGBC:
 10241                           	callstack 0
 10242                           
 10243 ;; *************** function _colourclick_readRGBC *****************
 10244 ;; Defined at:
 10245 ;;		line 131 in file "colour_click.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;  tmpval          2   11[COMRAM] PTR struct .
 10248 ;;		 -> colourclick_calibration@current(8), colourclick_calibration@initial(8), colourcards_testing@current(8), main@cur
      +rent(8), 
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;		None
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1    wreg      void 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10264 ;;Total ram usage:        2 bytes
 10265 ;; Hardware stack levels used: 1
 10266 ;; Hardware stack levels required when called: 3
 10267 ;; This function calls:
 10268 ;;		_colourclick_readB
 10269 ;;		_colourclick_readC
 10270 ;;		_colourclick_readG
 10271 ;;		_colourclick_readR
 10272 ;; This function is called by:
 10273 ;;		_main
 10274 ;;		_colourcards_readRGBC
 10275 ;;		_colourcards_testing
 10276 ;;		_colourclick_calibration
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text40
 10281  0000'                    __ptext40:
 10282                           	callstack 0
 10283  0000'                    _colourclick_readRGBC:
 10284                           	callstack 27
 10285  0000'                    
 10286                           ;colour_click.c: 131: void colourclick_readRGBC(RGBC_val *tmpval);colour_click.c: 132: {
      +                          ;colour_click.c: 133:     tmpval->R = colourclick_readR();
 10287  0000' EC00' F000'        	call	_colourclick_readR	;wreg free
 10288  0004' C00B' FFD9         	movff	colourclick_readRGBC@tmpval,fsr2l
 10289  0008' C00C' FFDA         	movff	colourclick_readRGBC@tmpval+1,fsr2h
 10290  000C' C004' FFDE         	movff	?_colourclick_readR,postinc2
 10291  0010' C005' FFDD         	movff	?_colourclick_readR+1,postdec2
 10292                           
 10293                           ;colour_click.c: 134:     tmpval->G = colourclick_readG();
 10294  0014' EC00' F000'        	call	_colourclick_readG	;wreg free
 10295  0018' EE20 F002          	lfsr	2,2
 10296  001C' 5000'              	movf	colourclick_readRGBC@tmpval^0,w,c
 10297  001E' 26D9               	addwf	fsr2l,f,c
 10298  0020' 5000'              	movf	(colourclick_readRGBC@tmpval+1)^0,w,c
 10299  0022' 22DA               	addwfc	fsr2h,f,c
 10300  0024' C004' FFDE         	movff	?_colourclick_readG,postinc2
 10301  0028' C005' FFDD         	movff	?_colourclick_readG+1,postdec2
 10302                           
 10303                           ;colour_click.c: 135:     tmpval->B = colourclick_readB();
 10304  002C' EC00' F000'        	call	_colourclick_readB	;wreg free
 10305  0030' EE20 F004          	lfsr	2,4
 10306  0034' 5000'              	movf	colourclick_readRGBC@tmpval^0,w,c
 10307  0036' 26D9               	addwf	fsr2l,f,c
 10308  0038' 5000'              	movf	(colourclick_readRGBC@tmpval+1)^0,w,c
 10309  003A' 22DA               	addwfc	fsr2h,f,c
 10310  003C' C004' FFDE         	movff	?_colourclick_readB,postinc2
 10311  0040' C005' FFDD         	movff	?_colourclick_readB+1,postdec2
 10312                           
 10313                           ;colour_click.c: 136:     tmpval->C = colourclick_readC();
 10314  0044' EC00' F000'        	call	_colourclick_readC	;wreg free
 10315  0048' EE20 F006          	lfsr	2,6
 10316  004C' 5000'              	movf	colourclick_readRGBC@tmpval^0,w,c
 10317  004E' 26D9               	addwf	fsr2l,f,c
 10318  0050' 5000'              	movf	(colourclick_readRGBC@tmpval+1)^0,w,c
 10319  0052' 22DA               	addwfc	fsr2h,f,c
 10320  0054' C004' FFDE         	movff	?_colourclick_readC,postinc2
 10321  0058' C005' FFDD         	movff	?_colourclick_readC+1,postdec2
 10322  005C' 0012               	return		;funcret
 10323  005E'                    __end_of_colourclick_readRGBC:
 10324                           	callstack 0
 10325                           
 10326 ;; *************** function _colourclick_readR *****************
 10327 ;; Defined at:
 10328 ;;		line 56 in file "colour_click.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;  tmp             2    9[COMRAM] unsigned int 
 10333 ;; Return value:  Size  Location     Type
 10334 ;;                  2    4[COMRAM] unsigned int 
 10335 ;; Registers used:
 10336 ;;		wreg, status,2, status,0, cstack
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10344 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10345 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10346 ;;Total ram usage:        7 bytes
 10347 ;; Hardware stack levels used: 1
 10348 ;; Hardware stack levels required when called: 2
 10349 ;; This function calls:
 10350 ;;		_I2C_2_Master_Read
 10351 ;;		_I2C_2_Master_RepStart
 10352 ;;		_I2C_2_Master_Start
 10353 ;;		_I2C_2_Master_Stop
 10354 ;;		_I2C_2_Master_Write
 10355 ;; This function is called by:
 10356 ;;		_colourclick_readRGBC
 10357 ;;		_colourclick_readRGBC2
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361                           	psect	text41
 10362  0000'                    __ptext41:
 10363                           	callstack 0
 10364  0000'                    _colourclick_readR:
 10365                           	callstack 27
 10366  0000'                    
 10367                           ;colour_click.c: 58:  unsigned int tmp;;colour_click.c: 59:  I2C_2_Master_Start();
 10368  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10369                           
 10370                           ;colour_click.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
 10371  0004' 0E52               	movlw	82
 10372  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10373                           
 10374                           ;colour_click.c: 61:  I2C_2_Master_Write(0xA0 | 0x16);
 10375  000A' 0EB6               	movlw	182
 10376  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10377                           
 10378                           ;colour_click.c: 62:  I2C_2_Master_RepStart();
 10379  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10380                           
 10381                           ;colour_click.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
 10382  0014' 0E53               	movlw	83
 10383  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10384                           
 10385                           ;colour_click.c: 64:  tmp=I2C_2_Master_Read(1);
 10386  001A' 0E01               	movlw	1
 10387  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10388  0020' 6E00'              	movwf	??_colourclick_readR^0,c
 10389  0022' 5000'              	movf	??_colourclick_readR^0,w,c
 10390  0024' 6E00'              	movwf	colourclick_readR@tmp^0,c
 10391  0026' 6A00'              	clrf	(colourclick_readR@tmp+1)^0,c
 10392                           
 10393                           ;colour_click.c: 65:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10394  0028' 0E00               	movlw	0
 10395  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10396  002E' 6E00'              	movwf	??_colourclick_readR^0,c
 10397  0030' 5000'              	movf	??_colourclick_readR^0,w,c
 10398  0032' 6E00'              	movwf	(??_colourclick_readR+2)^0,c
 10399  0034' 6A00'              	clrf	(??_colourclick_readR+1)^0,c
 10400  0036' 5000'              	movf	colourclick_readR@tmp^0,w,c
 10401  0038' 1000'              	iorwf	(??_colourclick_readR+1)^0,w,c
 10402  003A' 6E00'              	movwf	colourclick_readR@tmp^0,c
 10403  003C' 5000'              	movf	(colourclick_readR@tmp+1)^0,w,c
 10404  003E' 1000'              	iorwf	(??_colourclick_readR+2)^0,w,c
 10405  0040' 6E00'              	movwf	(colourclick_readR@tmp+1)^0,c
 10406                           
 10407                           ;colour_click.c: 66:  I2C_2_Master_Stop();
 10408  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10409  0046'                    
 10410                           ;colour_click.c: 67:  return tmp;
 10411  0046' C009' F004'        	movff	colourclick_readR@tmp,?_colourclick_readR
 10412  004A' C00A' F005'        	movff	colourclick_readR@tmp+1,?_colourclick_readR+1
 10413  004E' 0012               	return		;funcret
 10414  0050'                    __end_of_colourclick_readR:
 10415                           	callstack 0
 10416                           
 10417 ;; *************** function _colourclick_readG *****************
 10418 ;; Defined at:
 10419 ;;		line 75 in file "colour_click.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;  tmp             2    9[COMRAM] unsigned int 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  2    4[COMRAM] unsigned int 
 10426 ;; Registers used:
 10427 ;;		wreg, status,2, status,0, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10435 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10436 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10437 ;;Total ram usage:        7 bytes
 10438 ;; Hardware stack levels used: 1
 10439 ;; Hardware stack levels required when called: 2
 10440 ;; This function calls:
 10441 ;;		_I2C_2_Master_Read
 10442 ;;		_I2C_2_Master_RepStart
 10443 ;;		_I2C_2_Master_Start
 10444 ;;		_I2C_2_Master_Stop
 10445 ;;		_I2C_2_Master_Write
 10446 ;; This function is called by:
 10447 ;;		_colourclick_readRGBC
 10448 ;;		_colourclick_readRGBC2
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           	psect	text42
 10453  0000'                    __ptext42:
 10454                           	callstack 0
 10455  0000'                    _colourclick_readG:
 10456                           	callstack 27
 10457  0000'                    
 10458                           ;colour_click.c: 77:  unsigned int tmp;;colour_click.c: 78:  I2C_2_Master_Start();
 10459  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10460                           
 10461                           ;colour_click.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10462  0004' 0E52               	movlw	82
 10463  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10464                           
 10465                           ;colour_click.c: 80:  I2C_2_Master_Write(0xA0 | 0x18);
 10466  000A' 0EB8               	movlw	184
 10467  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10468                           
 10469                           ;colour_click.c: 81:  I2C_2_Master_RepStart();
 10470  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10471                           
 10472                           ;colour_click.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10473  0014' 0E53               	movlw	83
 10474  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10475                           
 10476                           ;colour_click.c: 83:  tmp=I2C_2_Master_Read(1);
 10477  001A' 0E01               	movlw	1
 10478  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10479  0020' 6E00'              	movwf	??_colourclick_readG^0,c
 10480  0022' 5000'              	movf	??_colourclick_readG^0,w,c
 10481  0024' 6E00'              	movwf	colourclick_readG@tmp^0,c
 10482  0026' 6A00'              	clrf	(colourclick_readG@tmp+1)^0,c
 10483                           
 10484                           ;colour_click.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10485  0028' 0E00               	movlw	0
 10486  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10487  002E' 6E00'              	movwf	??_colourclick_readG^0,c
 10488  0030' 5000'              	movf	??_colourclick_readG^0,w,c
 10489  0032' 6E00'              	movwf	(??_colourclick_readG+2)^0,c
 10490  0034' 6A00'              	clrf	(??_colourclick_readG+1)^0,c
 10491  0036' 5000'              	movf	colourclick_readG@tmp^0,w,c
 10492  0038' 1000'              	iorwf	(??_colourclick_readG+1)^0,w,c
 10493  003A' 6E00'              	movwf	colourclick_readG@tmp^0,c
 10494  003C' 5000'              	movf	(colourclick_readG@tmp+1)^0,w,c
 10495  003E' 1000'              	iorwf	(??_colourclick_readG+2)^0,w,c
 10496  0040' 6E00'              	movwf	(colourclick_readG@tmp+1)^0,c
 10497                           
 10498                           ;colour_click.c: 85:  I2C_2_Master_Stop();
 10499  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10500  0046'                    
 10501                           ;colour_click.c: 86:  return tmp;
 10502  0046' C009' F004'        	movff	colourclick_readG@tmp,?_colourclick_readG
 10503  004A' C00A' F005'        	movff	colourclick_readG@tmp+1,?_colourclick_readG+1
 10504  004E' 0012               	return		;funcret
 10505  0050'                    __end_of_colourclick_readG:
 10506                           	callstack 0
 10507                           
 10508 ;; *************** function _colourclick_readC *****************
 10509 ;; Defined at:
 10510 ;;		line 113 in file "colour_click.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;		None
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;  tmp             2    9[COMRAM] unsigned int 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  2    4[COMRAM] unsigned int 
 10517 ;; Registers used:
 10518 ;;		wreg, status,2, status,0, cstack
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10524 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10526 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10527 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10528 ;;Total ram usage:        7 bytes
 10529 ;; Hardware stack levels used: 1
 10530 ;; Hardware stack levels required when called: 2
 10531 ;; This function calls:
 10532 ;;		_I2C_2_Master_Read
 10533 ;;		_I2C_2_Master_RepStart
 10534 ;;		_I2C_2_Master_Start
 10535 ;;		_I2C_2_Master_Stop
 10536 ;;		_I2C_2_Master_Write
 10537 ;; This function is called by:
 10538 ;;		_colourclick_readRGBC
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           	psect	text43
 10543  0000'                    __ptext43:
 10544                           	callstack 0
 10545  0000'                    _colourclick_readC:
 10546                           	callstack 27
 10547  0000'                    
 10548                           ;colour_click.c: 115:  unsigned int tmp;;colour_click.c: 116:  I2C_2_Master_Start();
 10549  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10550                           
 10551                           ;colour_click.c: 117:  I2C_2_Master_Write(0x52 | 0x00);
 10552  0004' 0E52               	movlw	82
 10553  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10554                           
 10555                           ;colour_click.c: 118:  I2C_2_Master_Write(0xA0 | 0x14);
 10556  000A' 0EB4               	movlw	180
 10557  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10558                           
 10559                           ;colour_click.c: 119:  I2C_2_Master_RepStart();
 10560  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10561                           
 10562                           ;colour_click.c: 120:  I2C_2_Master_Write(0x52 | 0x01);
 10563  0014' 0E53               	movlw	83
 10564  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10565                           
 10566                           ;colour_click.c: 121:  tmp=I2C_2_Master_Read(1);
 10567  001A' 0E01               	movlw	1
 10568  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10569  0020' 6E00'              	movwf	??_colourclick_readC^0,c
 10570  0022' 5000'              	movf	??_colourclick_readC^0,w,c
 10571  0024' 6E00'              	movwf	colourclick_readC@tmp^0,c
 10572  0026' 6A00'              	clrf	(colourclick_readC@tmp+1)^0,c
 10573                           
 10574                           ;colour_click.c: 122:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10575  0028' 0E00               	movlw	0
 10576  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10577  002E' 6E00'              	movwf	??_colourclick_readC^0,c
 10578  0030' 5000'              	movf	??_colourclick_readC^0,w,c
 10579  0032' 6E00'              	movwf	(??_colourclick_readC+2)^0,c
 10580  0034' 6A00'              	clrf	(??_colourclick_readC+1)^0,c
 10581  0036' 5000'              	movf	colourclick_readC@tmp^0,w,c
 10582  0038' 1000'              	iorwf	(??_colourclick_readC+1)^0,w,c
 10583  003A' 6E00'              	movwf	colourclick_readC@tmp^0,c
 10584  003C' 5000'              	movf	(colourclick_readC@tmp+1)^0,w,c
 10585  003E' 1000'              	iorwf	(??_colourclick_readC+2)^0,w,c
 10586  0040' 6E00'              	movwf	(colourclick_readC@tmp+1)^0,c
 10587                           
 10588                           ;colour_click.c: 123:  I2C_2_Master_Stop();
 10589  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10590  0046'                    
 10591                           ;colour_click.c: 124:  return tmp;
 10592  0046' C009' F004'        	movff	colourclick_readC@tmp,?_colourclick_readC
 10593  004A' C00A' F005'        	movff	colourclick_readC@tmp+1,?_colourclick_readC+1
 10594  004E' 0012               	return		;funcret
 10595  0050'                    __end_of_colourclick_readC:
 10596                           	callstack 0
 10597                           
 10598 ;; *************** function _colourclick_readB *****************
 10599 ;; Defined at:
 10600 ;;		line 94 in file "colour_click.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;		None
 10603 ;; Auto vars:     Size  Location     Type
 10604 ;;  tmp             2    9[COMRAM] unsigned int 
 10605 ;; Return value:  Size  Location     Type
 10606 ;;                  2    4[COMRAM] unsigned int 
 10607 ;; Registers used:
 10608 ;;		wreg, status,2, status,0, cstack
 10609 ;; Tracked objects:
 10610 ;;		On entry : 0/0
 10611 ;;		On exit  : 0/0
 10612 ;;		Unchanged: 0/0
 10613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10615 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10616 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10617 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10618 ;;Total ram usage:        7 bytes
 10619 ;; Hardware stack levels used: 1
 10620 ;; Hardware stack levels required when called: 2
 10621 ;; This function calls:
 10622 ;;		_I2C_2_Master_Read
 10623 ;;		_I2C_2_Master_RepStart
 10624 ;;		_I2C_2_Master_Start
 10625 ;;		_I2C_2_Master_Stop
 10626 ;;		_I2C_2_Master_Write
 10627 ;; This function is called by:
 10628 ;;		_colourclick_readRGBC
 10629 ;;		_colourclick_readRGBC2
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           	psect	text44
 10634  0000'                    __ptext44:
 10635                           	callstack 0
 10636  0000'                    _colourclick_readB:
 10637                           	callstack 27
 10638  0000'                    
 10639                           ;colour_click.c: 96:  unsigned int tmp;;colour_click.c: 97:  I2C_2_Master_Start();
 10640  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10641                           
 10642                           ;colour_click.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
 10643  0004' 0E52               	movlw	82
 10644  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10645                           
 10646                           ;colour_click.c: 99:  I2C_2_Master_Write(0xA0 | 0x1A);
 10647  000A' 0EBA               	movlw	186
 10648  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10649                           
 10650                           ;colour_click.c: 100:  I2C_2_Master_RepStart();
 10651  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10652                           
 10653                           ;colour_click.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
 10654  0014' 0E53               	movlw	83
 10655  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10656                           
 10657                           ;colour_click.c: 102:  tmp=I2C_2_Master_Read(1);
 10658  001A' 0E01               	movlw	1
 10659  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10660  0020' 6E00'              	movwf	??_colourclick_readB^0,c
 10661  0022' 5000'              	movf	??_colourclick_readB^0,w,c
 10662  0024' 6E00'              	movwf	colourclick_readB@tmp^0,c
 10663  0026' 6A00'              	clrf	(colourclick_readB@tmp+1)^0,c
 10664                           
 10665                           ;colour_click.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10666  0028' 0E00               	movlw	0
 10667  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10668  002E' 6E00'              	movwf	??_colourclick_readB^0,c
 10669  0030' 5000'              	movf	??_colourclick_readB^0,w,c
 10670  0032' 6E00'              	movwf	(??_colourclick_readB+2)^0,c
 10671  0034' 6A00'              	clrf	(??_colourclick_readB+1)^0,c
 10672  0036' 5000'              	movf	colourclick_readB@tmp^0,w,c
 10673  0038' 1000'              	iorwf	(??_colourclick_readB+1)^0,w,c
 10674  003A' 6E00'              	movwf	colourclick_readB@tmp^0,c
 10675  003C' 5000'              	movf	(colourclick_readB@tmp+1)^0,w,c
 10676  003E' 1000'              	iorwf	(??_colourclick_readB+2)^0,w,c
 10677  0040' 6E00'              	movwf	(colourclick_readB@tmp+1)^0,c
 10678                           
 10679                           ;colour_click.c: 104:  I2C_2_Master_Stop();
 10680  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10681  0046'                    
 10682                           ;colour_click.c: 105:  return tmp;
 10683  0046' C009' F004'        	movff	colourclick_readB@tmp,?_colourclick_readB
 10684  004A' C00A' F005'        	movff	colourclick_readB@tmp+1,?_colourclick_readB+1
 10685  004E' 0012               	return		;funcret
 10686  0050'                    __end_of_colourclick_readB:
 10687                           	callstack 0
 10688                           
 10689 ;; *************** function _I2C_2_Master_Write *****************
 10690 ;; Defined at:
 10691 ;;		line 69 in file "I2C.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  data_byte       1    wreg     unsigned char 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  data_byte       1    1[COMRAM] unsigned char 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      void 
 10698 ;; Registers used:
 10699 ;;		wreg, status,2, status,0, cstack
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10709 ;;Total ram usage:        1 bytes
 10710 ;; Hardware stack levels used: 1
 10711 ;; Hardware stack levels required when called: 1
 10712 ;; This function calls:
 10713 ;;		_I2C_2_Master_Idle
 10714 ;; This function is called by:
 10715 ;;		_colourclick_writetoaddr
 10716 ;;		_colourclick_readR
 10717 ;;		_colourclick_readG
 10718 ;;		_colourclick_readB
 10719 ;;		_colourclick_readC
 10720 ;; This function uses a non-reentrant model
 10721 ;;
 10722                           
 10723                           	psect	text45
 10724  0000'                    __ptext45:
 10725                           	callstack 0
 10726  0000'                    _I2C_2_Master_Write:
 10727                           	callstack 27
 10728                           
 10729                           ;incstack = 0
 10730                           ;I2C_2_Master_Write@data_byte stored from wreg
 10731  0000' 6E00'              	movwf	I2C_2_Master_Write@data_byte^0,c
 10732  0002'                    
 10733                           ;I2C.c: 69: void I2C_2_Master_Write(unsigned char data_byte);I2C.c: 70: {;I2C.c: 71:   I
      +                          2C_2_Master_Idle();
 10734  0002' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10735  0006'                    
 10736                           ;I2C.c: 72:   SSP2BUF = data_byte;
 10737  0006' C001' FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10738  000A' 0012               	return		;funcret
 10739  000C'                    __end_of_I2C_2_Master_Write:
 10740                           	callstack 0
 10741                           
 10742 ;; *************** function _I2C_2_Master_Stop *****************
 10743 ;; Defined at:
 10744 ;;		line 59 in file "I2C.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;		None
 10747 ;; Auto vars:     Size  Location     Type
 10748 ;;		None
 10749 ;; Return value:  Size  Location     Type
 10750 ;;                  1    wreg      void 
 10751 ;; Registers used:
 10752 ;;		wreg, status,2, status,0, cstack
 10753 ;; Tracked objects:
 10754 ;;		On entry : 0/0
 10755 ;;		On exit  : 0/0
 10756 ;;		Unchanged: 0/0
 10757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10762 ;;Total ram usage:        0 bytes
 10763 ;; Hardware stack levels used: 1
 10764 ;; Hardware stack levels required when called: 1
 10765 ;; This function calls:
 10766 ;;		_I2C_2_Master_Idle
 10767 ;; This function is called by:
 10768 ;;		_colourclick_writetoaddr
 10769 ;;		_colourclick_readR
 10770 ;;		_colourclick_readG
 10771 ;;		_colourclick_readB
 10772 ;;		_colourclick_readC
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text46
 10777  0000'                    __ptext46:
 10778                           	callstack 0
 10779  0000'                    _I2C_2_Master_Stop:
 10780                           	callstack 27
 10781  0000'                    
 10782                           ;I2C.c: 61:   I2C_2_Master_Idle();
 10783  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10784  0004'                    
 10785                           ;I2C.c: 62:   SSP2CON2bits.PEN = 1;
 10786  0004' 010E               	movlb	14	; () banked
 10787  0006' 85DA               	bsf	218,2,b	;volatile
 10788  0008'                    
 10789                           ; BSR set to: 14
 10790  0008' 0012               	return		;funcret
 10791  000A'                    __end_of_I2C_2_Master_Stop:
 10792                           	callstack 0
 10793                           
 10794 ;; *************** function _I2C_2_Master_Start *****************
 10795 ;; Defined at:
 10796 ;;		line 39 in file "I2C.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;		None
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;		None
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  1    wreg      void 
 10803 ;; Registers used:
 10804 ;;		wreg, status,2, status,0, cstack
 10805 ;; Tracked objects:
 10806 ;;		On entry : 0/0
 10807 ;;		On exit  : 0/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10814 ;;Total ram usage:        0 bytes
 10815 ;; Hardware stack levels used: 1
 10816 ;; Hardware stack levels required when called: 1
 10817 ;; This function calls:
 10818 ;;		_I2C_2_Master_Idle
 10819 ;; This function is called by:
 10820 ;;		_colourclick_writetoaddr
 10821 ;;		_colourclick_readR
 10822 ;;		_colourclick_readG
 10823 ;;		_colourclick_readB
 10824 ;;		_colourclick_readC
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           	psect	text47
 10829  0000'                    __ptext47:
 10830                           	callstack 0
 10831  0000'                    _I2C_2_Master_Start:
 10832                           	callstack 27
 10833  0000'                    
 10834                           ;I2C.c: 41:   I2C_2_Master_Idle();
 10835  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10836  0004'                    
 10837                           ;I2C.c: 42:   SSP2CON2bits.SEN = 1;
 10838  0004' 010E               	movlb	14	; () banked
 10839  0006' 81DA               	bsf	218,0,b	;volatile
 10840  0008'                    
 10841                           ; BSR set to: 14
 10842  0008' 0012               	return		;funcret
 10843  000A'                    __end_of_I2C_2_Master_Start:
 10844                           	callstack 0
 10845                           
 10846 ;; *************** function _I2C_2_Master_RepStart *****************
 10847 ;; Defined at:
 10848 ;;		line 49 in file "I2C.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;		None
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;		None
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  1    wreg      void 
 10855 ;; Registers used:
 10856 ;;		wreg, status,2, status,0, cstack
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10866 ;;Total ram usage:        0 bytes
 10867 ;; Hardware stack levels used: 1
 10868 ;; Hardware stack levels required when called: 1
 10869 ;; This function calls:
 10870 ;;		_I2C_2_Master_Idle
 10871 ;; This function is called by:
 10872 ;;		_colourclick_readR
 10873 ;;		_colourclick_readG
 10874 ;;		_colourclick_readB
 10875 ;;		_colourclick_readC
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           	psect	text48
 10880  0000'                    __ptext48:
 10881                           	callstack 0
 10882  0000'                    _I2C_2_Master_RepStart:
 10883                           	callstack 27
 10884  0000'                    
 10885                           ;I2C.c: 51:   I2C_2_Master_Idle();
 10886  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10887  0004'                    
 10888                           ;I2C.c: 52:   SSP2CON2bits.RSEN = 1;
 10889  0004' 010E               	movlb	14	; () banked
 10890  0006' 83DA               	bsf	218,1,b	;volatile
 10891  0008'                    
 10892                           ; BSR set to: 14
 10893  0008' 0012               	return		;funcret
 10894  000A'                    __end_of_I2C_2_Master_RepStart:
 10895                           	callstack 0
 10896                           
 10897 ;; *************** function _I2C_2_Master_Read *****************
 10898 ;; Defined at:
 10899 ;;		line 79 in file "I2C.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;  ack             1    wreg     unsigned char 
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;  ack             1    2[COMRAM] unsigned char 
 10904 ;;  tmp             1    3[COMRAM] unsigned char 
 10905 ;; Return value:  Size  Location     Type
 10906 ;;                  1    wreg      unsigned char 
 10907 ;; Registers used:
 10908 ;;		wreg, status,2, status,0, cstack
 10909 ;; Tracked objects:
 10910 ;;		On entry : 0/0
 10911 ;;		On exit  : 0/0
 10912 ;;		Unchanged: 0/0
 10913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10917 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10918 ;;Total ram usage:        3 bytes
 10919 ;; Hardware stack levels used: 1
 10920 ;; Hardware stack levels required when called: 1
 10921 ;; This function calls:
 10922 ;;		_I2C_2_Master_Idle
 10923 ;; This function is called by:
 10924 ;;		_colourclick_readR
 10925 ;;		_colourclick_readG
 10926 ;;		_colourclick_readB
 10927 ;;		_colourclick_readC
 10928 ;; This function uses a non-reentrant model
 10929 ;;
 10930                           
 10931                           	psect	text49
 10932  0000'                    __ptext49:
 10933                           	callstack 0
 10934  0000'                    _I2C_2_Master_Read:
 10935                           	callstack 27
 10936                           
 10937                           ; BSR set to: 14
 10938                           ;incstack = 0
 10939                           ;I2C_2_Master_Read@ack stored from wreg
 10940  0000' 6E00'              	movwf	I2C_2_Master_Read@ack^0,c
 10941  0002'                    
 10942                           ;I2C.c: 79: unsigned char I2C_2_Master_Read(unsigned char ack);I2C.c: 80: {;I2C.c: 81:  
      +                           unsigned char tmp;;I2C.c: 82:   I2C_2_Master_Idle();
 10943  0002' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10944  0006'                    
 10945                           ;I2C.c: 83:   SSP2CON2bits.RCEN = 1;
 10946  0006' 010E               	movlb	14	; () banked
 10947  0008' 87DA               	bsf	218,3,b	;volatile
 10948                           
 10949                           ;I2C.c: 84:   I2C_2_Master_Idle();
 10950  000A' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10951  000E'                    
 10952                           ;I2C.c: 85:   tmp = SSP2BUF;
 10953  000E' CED5 F003'         	movff	3797,I2C_2_Master_Read@tmp	;volatile
 10954                           
 10955                           ;I2C.c: 86:   I2C_2_Master_Idle();
 10956  0012' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10957  0016'                    
 10958                           ;I2C.c: 87:   SSP2CON2bits.ACKDT = !ack;
 10959  0016' 5000'              	movf	I2C_2_Master_Read@ack^0,w,c
 10960  0018' B4D8               	btfsc	status,2,c
 10961  001A' EF00' F000'        	goto	u6071
 10962  001E' EF00' F000'        	goto	u6070
 10963  0022'                    u6071:
 10964  0022' 6A00'              	clrf	??_I2C_2_Master_Read^0,c
 10965  0024' 2A00'              	incf	??_I2C_2_Master_Read^0,f,c
 10966  0026' EF00' F000'        	goto	u6088
 10967  002A'                    u6070:
 10968  002A' 6A00'              	clrf	??_I2C_2_Master_Read^0,c
 10969  002C'                    u6088:
 10970  002C' 3A00'              	swapf	??_I2C_2_Master_Read^0,f,c
 10971  002E' 4600'              	rlncf	??_I2C_2_Master_Read^0,f,c
 10972  0030' 010E               	movlb	14	; () banked
 10973  0032' 51DA               	movf	218,w,b	;volatile
 10974  0034' 1800'              	xorwf	??_I2C_2_Master_Read^0,w,c
 10975  0036' 0BDF               	andlw	-33
 10976  0038' 1800'              	xorwf	??_I2C_2_Master_Read^0,w,c
 10977  003A' 6FDA               	movwf	218,b	;volatile
 10978  003C'                    
 10979                           ; BSR set to: 14
 10980                           ;I2C.c: 88:   SSP2CON2bits.ACKEN = 1;
 10981  003C' 89DA               	bsf	218,4,b	;volatile
 10982  003E'                    
 10983                           ; BSR set to: 14
 10984                           ;I2C.c: 89:   return tmp;
 10985  003E' 5000'              	movf	I2C_2_Master_Read@tmp^0,w,c
 10986  0040'                    
 10987                           ; BSR set to: 14
 10988  0040' 0012               	return		;funcret
 10989  0042'                    __end_of_I2C_2_Master_Read:
 10990                           	callstack 0
 10991                           
 10992 ;; *************** function _I2C_2_Master_Idle *****************
 10993 ;; Defined at:
 10994 ;;		line 30 in file "I2C.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;		None
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;		None
 10999 ;; Return value:  Size  Location     Type
 11000 ;;                  1    wreg      void 
 11001 ;; Registers used:
 11002 ;;		wreg, status,2, status,0
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11012 ;;Total ram usage:        1 bytes
 11013 ;; Hardware stack levels used: 1
 11014 ;; This function calls:
 11015 ;;		Nothing
 11016 ;; This function is called by:
 11017 ;;		_I2C_2_Master_Start
 11018 ;;		_I2C_2_Master_RepStart
 11019 ;;		_I2C_2_Master_Stop
 11020 ;;		_I2C_2_Master_Write
 11021 ;;		_I2C_2_Master_Read
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           	psect	text50
 11026  0000'                    __ptext50:
 11027                           	callstack 0
 11028  0000'                    _I2C_2_Master_Idle:
 11029                           	callstack 27
 11030  0000'                    l344:
 11031  0000' 010E               	movlb	14	; () banked
 11032  0002' B5D8               	btfsc	216,2,b	;volatile
 11033  0004' EF00' F000'        	goto	u5241
 11034  0008' EF00' F000'        	goto	u5240
 11035  000C'                    u5241:
 11036  000C' EF00' F000'        	goto	l344
 11037  0010'                    u5240:
 11038  0010'                    
 11039                           ; BSR set to: 14
 11040  0010' CEDA F000'         	movff	3802,??_I2C_2_Master_Idle	;volatile
 11041  0014' 0E1F               	movlw	31
 11042  0016' 1600'              	andwf	??_I2C_2_Master_Idle^0,f,c
 11043  0018' A4D8               	btfss	status,2,c
 11044  001A' EF00' F000'        	goto	u5251
 11045  001E' EF00' F000'        	goto	u5250
 11046  0022'                    u5251:
 11047  0022' EF00' F000'        	goto	l344
 11048  0026'                    u5250:
 11049  0026'                    
 11050                           ; BSR set to: 14
 11051  0026' 0012               	return		;funcret
 11052  0028'                    __end_of_I2C_2_Master_Idle:
 11053                           	callstack 0
 11054                           
 11055 ;; *************** function ___xxtofl *****************
 11056 ;; Defined at:
 11057 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
 11058 ;; Parameters:    Size  Location     Type
 11059 ;;  sign            1    wreg     unsigned char 
 11060 ;;  val             4    0[COMRAM] long 
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;  sign            1    8[COMRAM] unsigned char 
 11063 ;;  arg             4   10[COMRAM] unsigned long 
 11064 ;;  exp             1    9[COMRAM] unsigned char 
 11065 ;; Return value:  Size  Location     Type
 11066 ;;                  4    0[COMRAM] unsigned char 
 11067 ;; Registers used:
 11068 ;;		wreg, status,2, status,0
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11074 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11075 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11076 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11077 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11078 ;;Total ram usage:       14 bytes
 11079 ;; Hardware stack levels used: 1
 11080 ;; This function calls:
 11081 ;;		Nothing
 11082 ;; This function is called by:
 11083 ;;		_colourcards_readRGBC
 11084 ;;		_colourcards_testing
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text51
 11089  0000'                    __ptext51:
 11090                           	callstack 0
 11091  0000'                    ___xxtofl:
 11092                           	callstack 29
 11093                           
 11094                           ; BSR set to: 14
 11095                           ;incstack = 0
 11096                           ;___xxtofl@sign stored from wreg
 11097  0000' 6E00'              	movwf	___xxtofl@sign^0,c
 11098  0002' 5000'              	movf	___xxtofl@sign^0,w,c
 11099  0004' B4D8               	btfsc	status,2,c
 11100  0006' EF00' F000'        	goto	u6591
 11101  000A' EF00' F000'        	goto	u6590
 11102  000E'                    u6591:
 11103  000E' EF00' F000'        	goto	l1265
 11104  0012'                    u6590:
 11105  0012' BE00'              	btfsc	(___xxtofl@val+3)^0,7,c
 11106  0014' EF00' F000'        	goto	u6600
 11107  0018' EF00' F000'        	goto	u6601
 11108  001C'                    u6601:
 11109  001C' EF00' F000'        	goto	l1265
 11110  0020'                    u6600:
 11111  0020' C000' F004'        	movff	___xxtofl@val,??___xxtofl
 11112  0024' C001' F005'        	movff	___xxtofl@val+1,??___xxtofl+1
 11113  0028' C002' F006'        	movff	___xxtofl@val+2,??___xxtofl+2
 11114  002C' C003' F007'        	movff	___xxtofl@val+3,??___xxtofl+3
 11115  0030' 1E00'              	comf	??___xxtofl^0,f,c
 11116  0032' 1E00'              	comf	(??___xxtofl+1)^0,f,c
 11117  0034' 1E00'              	comf	(??___xxtofl+2)^0,f,c
 11118  0036' 1E00'              	comf	(??___xxtofl+3)^0,f,c
 11119  0038' 2A00'              	incf	??___xxtofl^0,f,c
 11120  003A' 0E00               	movlw	0
 11121  003C' 2200'              	addwfc	(??___xxtofl+1)^0,f,c
 11122  003E' 2200'              	addwfc	(??___xxtofl+2)^0,f,c
 11123  0040' 2200'              	addwfc	(??___xxtofl+3)^0,f,c
 11124  0042' C004' F00A'        	movff	??___xxtofl,___xxtofl@arg
 11125  0046' C005' F00B'        	movff	??___xxtofl+1,___xxtofl@arg+1
 11126  004A' C006' F00C'        	movff	??___xxtofl+2,___xxtofl@arg+2
 11127  004E' C007' F00D'        	movff	??___xxtofl+3,___xxtofl@arg+3
 11128  0052' EF00' F000'        	goto	l5500
 11129  0056'                    l1265:
 11130  0056' C000' F00A'        	movff	___xxtofl@val,___xxtofl@arg
 11131  005A' C001' F00B'        	movff	___xxtofl@val+1,___xxtofl@arg+1
 11132  005E' C002' F00C'        	movff	___xxtofl@val+2,___xxtofl@arg+2
 11133  0062' C003' F00D'        	movff	___xxtofl@val+3,___xxtofl@arg+3
 11134  0066'                    l5500:
 11135  0066' 5000'              	movf	___xxtofl@val^0,w,c
 11136  0068' 1000'              	iorwf	(___xxtofl@val+1)^0,w,c
 11137  006A' 1000'              	iorwf	(___xxtofl@val+2)^0,w,c
 11138  006C' 1000'              	iorwf	(___xxtofl@val+3)^0,w,c
 11139  006E' A4D8               	btfss	status,2,c
 11140  0070' EF00' F000'        	goto	u6611
 11141  0074' EF00' F000'        	goto	u6610
 11142  0078'                    u6611:
 11143  0078' EF00' F000'        	goto	l5506
 11144  007C'                    u6610:
 11145  007C' 0E00               	movlw	0
 11146  007E' 6E00'              	movwf	?___xxtofl^0,c
 11147  0080' 0E00               	movlw	0
 11148  0082' 6E00'              	movwf	(?___xxtofl+1)^0,c
 11149  0084' 0E00               	movlw	0
 11150  0086' 6E00'              	movwf	(?___xxtofl+2)^0,c
 11151  0088' 0E00               	movlw	0
 11152  008A' 6E00'              	movwf	(?___xxtofl+3)^0,c
 11153  008C' EF00' F000'        	goto	l1268
 11154  0090'                    l5506:
 11155  0090' 0E96               	movlw	150
 11156  0092' 6E00'              	movwf	___xxtofl@exp^0,c
 11157  0094' EF00' F000'        	goto	l5510
 11158  0098'                    l5508:
 11159  0098' 2A00'              	incf	___xxtofl@exp^0,f,c
 11160  009A' 90D8               	bcf	status,0,c
 11161  009C' 3200'              	rrcf	(___xxtofl@arg+3)^0,f,c
 11162  009E' 3200'              	rrcf	(___xxtofl@arg+2)^0,f,c
 11163  00A0' 3200'              	rrcf	(___xxtofl@arg+1)^0,f,c
 11164  00A2' 3200'              	rrcf	___xxtofl@arg^0,f,c
 11165  00A4'                    l5510:
 11166  00A4' 0E00               	movlw	0
 11167  00A6' 1400'              	andwf	___xxtofl@arg^0,w,c
 11168  00A8' 6E00'              	movwf	??___xxtofl^0,c
 11169  00AA' 0E00               	movlw	0
 11170  00AC' 1400'              	andwf	(___xxtofl@arg+1)^0,w,c
 11171  00AE' 6E00'              	movwf	(??___xxtofl+1)^0,c
 11172  00B0' 0E00               	movlw	0
 11173  00B2' 1400'              	andwf	(___xxtofl@arg+2)^0,w,c
 11174  00B4' 6E00'              	movwf	(??___xxtofl+2)^0,c
 11175  00B6' 0EFE               	movlw	254
 11176  00B8' 1400'              	andwf	(___xxtofl@arg+3)^0,w,c
 11177  00BA' 6E00'              	movwf	(??___xxtofl+3)^0,c
 11178  00BC' 5000'              	movf	??___xxtofl^0,w,c
 11179  00BE' 1000'              	iorwf	(??___xxtofl+1)^0,w,c
 11180  00C0' 1000'              	iorwf	(??___xxtofl+2)^0,w,c
 11181  00C2' 1000'              	iorwf	(??___xxtofl+3)^0,w,c
 11182  00C4' A4D8               	btfss	status,2,c
 11183  00C6' EF00' F000'        	goto	u6621
 11184  00CA' EF00' F000'        	goto	u6620
 11185  00CE'                    u6621:
 11186  00CE' EF00' F000'        	goto	l5508
 11187  00D2'                    u6620:
 11188  00D2' EF00' F000'        	goto	l1272
 11189  00D6'                    l5512:
 11190  00D6' 2A00'              	incf	___xxtofl@exp^0,f,c
 11191  00D8' 0E01               	movlw	1
 11192  00DA' 2600'              	addwf	___xxtofl@arg^0,f,c
 11193  00DC' 0E00               	movlw	0
 11194  00DE' 2200'              	addwfc	(___xxtofl@arg+1)^0,f,c
 11195  00E0' 2200'              	addwfc	(___xxtofl@arg+2)^0,f,c
 11196  00E2' 2200'              	addwfc	(___xxtofl@arg+3)^0,f,c
 11197  00E4' 90D8               	bcf	status,0,c
 11198  00E6' 3200'              	rrcf	(___xxtofl@arg+3)^0,f,c
 11199  00E8' 3200'              	rrcf	(___xxtofl@arg+2)^0,f,c
 11200  00EA' 3200'              	rrcf	(___xxtofl@arg+1)^0,f,c
 11201  00EC' 3200'              	rrcf	___xxtofl@arg^0,f,c
 11202  00EE'                    l1272:
 11203  00EE' 0E00               	movlw	0
 11204  00F0' 1400'              	andwf	___xxtofl@arg^0,w,c
 11205  00F2' 6E00'              	movwf	??___xxtofl^0,c
 11206  00F4' 0E00               	movlw	0
 11207  00F6' 1400'              	andwf	(___xxtofl@arg+1)^0,w,c
 11208  00F8' 6E00'              	movwf	(??___xxtofl+1)^0,c
 11209  00FA' 0E00               	movlw	0
 11210  00FC' 1400'              	andwf	(___xxtofl@arg+2)^0,w,c
 11211  00FE' 6E00'              	movwf	(??___xxtofl+2)^0,c
 11212  0100' 0EFF               	movlw	255
 11213  0102' 1400'              	andwf	(___xxtofl@arg+3)^0,w,c
 11214  0104' 6E00'              	movwf	(??___xxtofl+3)^0,c
 11215  0106' 5000'              	movf	??___xxtofl^0,w,c
 11216  0108' 1000'              	iorwf	(??___xxtofl+1)^0,w,c
 11217  010A' 1000'              	iorwf	(??___xxtofl+2)^0,w,c
 11218  010C' 1000'              	iorwf	(??___xxtofl+3)^0,w,c
 11219  010E' A4D8               	btfss	status,2,c
 11220  0110' EF00' F000'        	goto	u6631
 11221  0114' EF00' F000'        	goto	u6630
 11222  0118'                    u6631:
 11223  0118' EF00' F000'        	goto	l5512
 11224  011C'                    u6630:
 11225  011C' EF00' F000'        	goto	l5520
 11226  0120'                    l5518:
 11227  0120' 0600'              	decf	___xxtofl@exp^0,f,c
 11228  0122' 90D8               	bcf	status,0,c
 11229  0124' 3600'              	rlcf	___xxtofl@arg^0,f,c
 11230  0126' 3600'              	rlcf	(___xxtofl@arg+1)^0,f,c
 11231  0128' 3600'              	rlcf	(___xxtofl@arg+2)^0,f,c
 11232  012A' 3600'              	rlcf	(___xxtofl@arg+3)^0,f,c
 11233  012C'                    l5520:
 11234  012C' BE00'              	btfsc	(___xxtofl@arg+2)^0,7,c
 11235  012E' EF00' F000'        	goto	u6641
 11236  0132' EF00' F000'        	goto	u6640
 11237  0136'                    u6641:
 11238  0136' EF00' F000'        	goto	l1279
 11239  013A'                    u6640:
 11240  013A' 0E02               	movlw	2
 11241  013C' 6000'              	cpfslt	___xxtofl@exp^0,c
 11242  013E' EF00' F000'        	goto	u6651
 11243  0142' EF00' F000'        	goto	u6650
 11244  0146'                    u6651:
 11245  0146' EF00' F000'        	goto	l5518
 11246  014A'                    u6650:
 11247  014A'                    l1279:
 11248  014A' B000'              	btfsc	___xxtofl@exp^0,0,c
 11249  014C' EF00' F000'        	goto	u6661
 11250  0150' EF00' F000'        	goto	u6660
 11251  0154'                    u6661:
 11252  0154' EF00' F000'        	goto	l5526
 11253  0158'                    u6660:
 11254  0158' 9E00'              	bcf	(___xxtofl@arg+2)^0,7,c
 11255  015A'                    l5526:
 11256  015A' 90D8               	bcf	status,0,c
 11257  015C' 3200'              	rrcf	___xxtofl@exp^0,f,c
 11258  015E' C009' F004'        	movff	___xxtofl@exp,??___xxtofl
 11259  0162' 6A00'              	clrf	(??___xxtofl+1)^0,c
 11260  0164' 6A00'              	clrf	(??___xxtofl+2)^0,c
 11261  0166' 6A00'              	clrf	(??___xxtofl+3)^0,c
 11262  0168' C004' F007'        	movff	??___xxtofl,??___xxtofl+3
 11263  016C' 6A00'              	clrf	(??___xxtofl+2)^0,c
 11264  016E' 6A00'              	clrf	(??___xxtofl+1)^0,c
 11265  0170' 6A00'              	clrf	??___xxtofl^0,c
 11266  0172' 5000'              	movf	??___xxtofl^0,w,c
 11267  0174' 1200'              	iorwf	___xxtofl@arg^0,f,c
 11268  0176' 5000'              	movf	(??___xxtofl+1)^0,w,c
 11269  0178' 1200'              	iorwf	(___xxtofl@arg+1)^0,f,c
 11270  017A' 5000'              	movf	(??___xxtofl+2)^0,w,c
 11271  017C' 1200'              	iorwf	(___xxtofl@arg+2)^0,f,c
 11272  017E' 5000'              	movf	(??___xxtofl+3)^0,w,c
 11273  0180' 1200'              	iorwf	(___xxtofl@arg+3)^0,f,c
 11274  0182' 5000'              	movf	___xxtofl@sign^0,w,c
 11275  0184' B4D8               	btfsc	status,2,c
 11276  0186' EF00' F000'        	goto	u6671
 11277  018A' EF00' F000'        	goto	u6670
 11278  018E'                    u6671:
 11279  018E' EF00' F000'        	goto	l5536
 11280  0192'                    u6670:
 11281  0192' BE00'              	btfsc	(___xxtofl@val+3)^0,7,c
 11282  0194' EF00' F000'        	goto	u6680
 11283  0198' EF00' F000'        	goto	u6681
 11284  019C'                    u6681:
 11285  019C' EF00' F000'        	goto	l5536
 11286  01A0'                    u6680:
 11287  01A0' 8E00'              	bsf	(___xxtofl@arg+3)^0,7,c
 11288  01A2'                    l5536:
 11289  01A2' C00A' F000'        	movff	___xxtofl@arg,?___xxtofl
 11290  01A6' C00B' F001'        	movff	___xxtofl@arg+1,?___xxtofl+1
 11291  01AA' C00C' F002'        	movff	___xxtofl@arg+2,?___xxtofl+2
 11292  01AE' C00D' F003'        	movff	___xxtofl@arg+3,?___xxtofl+3
 11293  01B2'                    l1268:
 11294  01B2' 0012               	return		;funcret
 11295  01B4'                    __end_of___xxtofl:
 11296                           	callstack 0
 11297                           
 11298 ;; *************** function ___flge *****************
 11299 ;; Defined at:
 11300 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\flge.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;  ff1             4   25[COMRAM] unsigned char 
 11303 ;;  ff2             4   29[COMRAM] unsigned char 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;		None
 11306 ;; Return value:  Size  Location     Type
 11307 ;;		None               void
 11308 ;; Registers used:
 11309 ;;		wreg, status,2, status,0
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11315 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11317 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11318 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11319 ;;Total ram usage:       12 bytes
 11320 ;; Hardware stack levels used: 1
 11321 ;; This function calls:
 11322 ;;		Nothing
 11323 ;; This function is called by:
 11324 ;;		_colourcards_readRGBC
 11325 ;;		_efgtoa
 11326 ;; This function uses a non-reentrant model
 11327 ;;
 11328                           
 11329                           	psect	text52
 11330  0000'                    __ptext52:
 11331                           	callstack 0
 11332  0000'                    ___flge:
 11333                           	callstack 25
 11334  0000' 0E00               	movlw	0
 11335  0002' 1400'              	andwf	___flge@ff1^0,w,c
 11336  0004' 6E00'              	movwf	??___flge^0,c
 11337  0006' 0E00               	movlw	0
 11338  0008' 1400'              	andwf	(___flge@ff1+1)^0,w,c
 11339  000A' 6E00'              	movwf	(??___flge+1)^0,c
 11340  000C' 0E80               	movlw	128
 11341  000E' 1400'              	andwf	(___flge@ff1+2)^0,w,c
 11342  0010' 6E00'              	movwf	(??___flge+2)^0,c
 11343  0012' 0E7F               	movlw	127
 11344  0014' 1400'              	andwf	(___flge@ff1+3)^0,w,c
 11345  0016' 6E00'              	movwf	(??___flge+3)^0,c
 11346  0018' 5000'              	movf	??___flge^0,w,c
 11347  001A' 1000'              	iorwf	(??___flge+1)^0,w,c
 11348  001C' 1000'              	iorwf	(??___flge+2)^0,w,c
 11349  001E' 1000'              	iorwf	(??___flge+3)^0,w,c
 11350  0020' A4D8               	btfss	status,2,c
 11351  0022' EF00' F000'        	goto	u4801
 11352  0026' EF00' F000'        	goto	u4800
 11353  002A'                    u4801:
 11354  002A' EF00' F000'        	goto	l4528
 11355  002E'                    u4800:
 11356  002E' 0E00               	movlw	0
 11357  0030' 6E00'              	movwf	___flge@ff1^0,c
 11358  0032' 0E00               	movlw	0
 11359  0034' 6E00'              	movwf	(___flge@ff1+1)^0,c
 11360  0036' 0E00               	movlw	0
 11361  0038' 6E00'              	movwf	(___flge@ff1+2)^0,c
 11362  003A' 0E00               	movlw	0
 11363  003C' 6E00'              	movwf	(___flge@ff1+3)^0,c
 11364  003E'                    l4528:
 11365  003E' 0E00               	movlw	0
 11366  0040' 1400'              	andwf	___flge@ff2^0,w,c
 11367  0042' 6E00'              	movwf	??___flge^0,c
 11368  0044' 0E00               	movlw	0
 11369  0046' 1400'              	andwf	(___flge@ff2+1)^0,w,c
 11370  0048' 6E00'              	movwf	(??___flge+1)^0,c
 11371  004A' 0E80               	movlw	128
 11372  004C' 1400'              	andwf	(___flge@ff2+2)^0,w,c
 11373  004E' 6E00'              	movwf	(??___flge+2)^0,c
 11374  0050' 0E7F               	movlw	127
 11375  0052' 1400'              	andwf	(___flge@ff2+3)^0,w,c
 11376  0054' 6E00'              	movwf	(??___flge+3)^0,c
 11377  0056' 5000'              	movf	??___flge^0,w,c
 11378  0058' 1000'              	iorwf	(??___flge+1)^0,w,c
 11379  005A' 1000'              	iorwf	(??___flge+2)^0,w,c
 11380  005C' 1000'              	iorwf	(??___flge+3)^0,w,c
 11381  005E' A4D8               	btfss	status,2,c
 11382  0060' EF00' F000'        	goto	u4811
 11383  0064' EF00' F000'        	goto	u4810
 11384  0068'                    u4811:
 11385  0068' EF00' F000'        	goto	l4532
 11386  006C'                    u4810:
 11387  006C' 0E00               	movlw	0
 11388  006E' 6E00'              	movwf	___flge@ff2^0,c
 11389  0070' 0E00               	movlw	0
 11390  0072' 6E00'              	movwf	(___flge@ff2+1)^0,c
 11391  0074' 0E00               	movlw	0
 11392  0076' 6E00'              	movwf	(___flge@ff2+2)^0,c
 11393  0078' 0E00               	movlw	0
 11394  007A' 6E00'              	movwf	(___flge@ff2+3)^0,c
 11395  007C'                    l4532:
 11396  007C' AE00'              	btfss	(___flge@ff1+3)^0,7,c
 11397  007E' EF00' F000'        	goto	u4821
 11398  0082' EF00' F000'        	goto	u4820
 11399  0086'                    u4821:
 11400  0086' EF00' F000'        	goto	l4536
 11401  008A'                    u4820:
 11402  008A' 6C00'              	negf	___flge@ff1^0,c
 11403  008C' 1E00'              	comf	(___flge@ff1+1)^0,f,c
 11404  008E' B0D8               	btfsc	status,0,c
 11405  0090' 2A00'              	incf	(___flge@ff1+1)^0,f,c
 11406  0092' 1E00'              	comf	(___flge@ff1+2)^0,f,c
 11407  0094' B0D8               	btfsc	status,0,c
 11408  0096' 2A00'              	incf	(___flge@ff1+2)^0,f,c
 11409  0098' 0E80               	movlw	128
 11410  009A' 5600'              	subfwb	(___flge@ff1+3)^0,f,c
 11411  009C'                    l4536:
 11412  009C' AE00'              	btfss	(___flge@ff2+3)^0,7,c
 11413  009E' EF00' F000'        	goto	u4831
 11414  00A2' EF00' F000'        	goto	u4830
 11415  00A6'                    u4831:
 11416  00A6' EF00' F000'        	goto	l875
 11417  00AA'                    u4830:
 11418  00AA' 6C00'              	negf	___flge@ff2^0,c
 11419  00AC' 1E00'              	comf	(___flge@ff2+1)^0,f,c
 11420  00AE' B0D8               	btfsc	status,0,c
 11421  00B0' 2A00'              	incf	(___flge@ff2+1)^0,f,c
 11422  00B2' 1E00'              	comf	(___flge@ff2+2)^0,f,c
 11423  00B4' B0D8               	btfsc	status,0,c
 11424  00B6' 2A00'              	incf	(___flge@ff2+2)^0,f,c
 11425  00B8' 0E80               	movlw	128
 11426  00BA' 5600'              	subfwb	(___flge@ff2+3)^0,f,c
 11427  00BC'                    l875:
 11428  00BC' 0E00               	movlw	0
 11429  00BE' 1A00'              	xorwf	___flge@ff1^0,f,c
 11430  00C0' 0E00               	movlw	0
 11431  00C2' 1A00'              	xorwf	(___flge@ff1+1)^0,f,c
 11432  00C4' 0E00               	movlw	0
 11433  00C6' 1A00'              	xorwf	(___flge@ff1+2)^0,f,c
 11434  00C8' 0E80               	movlw	128
 11435  00CA' 1A00'              	xorwf	(___flge@ff1+3)^0,f,c
 11436  00CC' 0E00               	movlw	0
 11437  00CE' 1A00'              	xorwf	___flge@ff2^0,f,c
 11438  00D0' 0E00               	movlw	0
 11439  00D2' 1A00'              	xorwf	(___flge@ff2+1)^0,f,c
 11440  00D4' 0E00               	movlw	0
 11441  00D6' 1A00'              	xorwf	(___flge@ff2+2)^0,f,c
 11442  00D8' 0E80               	movlw	128
 11443  00DA' 1A00'              	xorwf	(___flge@ff2+3)^0,f,c
 11444  00DC' 5000'              	movf	___flge@ff2^0,w,c
 11445  00DE' 5C00'              	subwf	___flge@ff1^0,w,c
 11446  00E0' 5000'              	movf	(___flge@ff2+1)^0,w,c
 11447  00E2' 5800'              	subwfb	(___flge@ff1+1)^0,w,c
 11448  00E4' 5000'              	movf	(___flge@ff2+2)^0,w,c
 11449  00E6' 5800'              	subwfb	(___flge@ff1+2)^0,w,c
 11450  00E8' 5000'              	movf	(___flge@ff2+3)^0,w,c
 11451  00EA' 5800'              	subwfb	(___flge@ff1+3)^0,w,c
 11452  00EC' B0D8               	btfsc	status,0,c
 11453  00EE' EF00' F000'        	goto	u4841
 11454  00F2' EF00' F000'        	goto	u4840
 11455  00F6'                    u4841:
 11456  00F6' EF00' F000'        	goto	l4542
 11457  00FA'                    u4840:
 11458  00FA' 90D8               	bcf	status,0,c
 11459  00FC' EF00' F000'        	goto	l880
 11460  0100'                    l4542:
 11461  0100' 80D8               	bsf	status,0,c
 11462  0102'                    l880:
 11463  0102' 0012               	return		;funcret
 11464  0104'                    __end_of___flge:
 11465                           	callstack 0
 11466                           
 11467 ;; *************** function ___fldiv *****************
 11468 ;; Defined at:
 11469 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcdiv.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  b               4   14[COMRAM] unsigned char 
 11472 ;;  a               4   18[COMRAM] unsigned char 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;  grs             4   33[COMRAM] unsigned long 
 11475 ;;  rem             4   26[COMRAM] unsigned long 
 11476 ;;  new_exp         2   31[COMRAM] short 
 11477 ;;  aexp            1   38[COMRAM] unsigned char 
 11478 ;;  bexp            1   37[COMRAM] unsigned char 
 11479 ;;  sign            1   30[COMRAM] unsigned char 
 11480 ;; Return value:  Size  Location     Type
 11481 ;;                  4   14[COMRAM] unsigned char 
 11482 ;; Registers used:
 11483 ;;		wreg, status,2, status,0
 11484 ;; Tracked objects:
 11485 ;;		On entry : 0/0
 11486 ;;		On exit  : 0/0
 11487 ;;		Unchanged: 0/0
 11488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11489 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11490 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11491 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11492 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11493 ;;Total ram usage:       25 bytes
 11494 ;; Hardware stack levels used: 1
 11495 ;; This function calls:
 11496 ;;		Nothing
 11497 ;; This function is called by:
 11498 ;;		_colourcards_readRGBC
 11499 ;;		_colourcards_testing
 11500 ;;		_efgtoa
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text53
 11505  0000'                    __ptext53:
 11506                           	callstack 0
 11507  0000'                    ___fldiv:
 11508                           	callstack 25
 11509  0000' 5000'              	movf	(___fldiv@b+3)^0,w,c
 11510  0002' 0B80               	andlw	128
 11511  0004' 6E00'              	movwf	___fldiv@sign^0,c
 11512  0006' 5000'              	movf	(___fldiv@b+3)^0,w,c
 11513  0008' 2400'              	addwf	(___fldiv@b+3)^0,w,c
 11514  000A' 6E00'              	movwf	___fldiv@bexp^0,c
 11515  000C' AE00'              	btfss	(___fldiv@b+2)^0,7,c
 11516  000E' EF00' F000'        	goto	u4231
 11517  0012' EF00' F000'        	goto	u4230
 11518  0016'                    u4231:
 11519  0016' EF00' F000'        	goto	l4160
 11520  001A'                    u4230:
 11521  001A' 8000'              	bsf	___fldiv@bexp^0,0,c
 11522  001C'                    l4160:
 11523  001C' 5000'              	movf	___fldiv@bexp^0,w,c
 11524  001E' B4D8               	btfsc	status,2,c
 11525  0020' EF00' F000'        	goto	u4241
 11526  0024' EF00' F000'        	goto	u4240
 11527  0028'                    u4241:
 11528  0028' EF00' F000'        	goto	l4170
 11529  002C'                    u4240:
 11530  002C' 2800'              	incf	___fldiv@bexp^0,w,c
 11531  002E' A4D8               	btfss	status,2,c
 11532  0030' EF00' F000'        	goto	u4251
 11533  0034' EF00' F000'        	goto	u4250
 11534  0038'                    u4251:
 11535  0038' EF00' F000'        	goto	l4166
 11536  003C'                    u4250:
 11537  003C' 0E00               	movlw	0
 11538  003E' 6E00'              	movwf	___fldiv@b^0,c
 11539  0040' 0E00               	movlw	0
 11540  0042' 6E00'              	movwf	(___fldiv@b+1)^0,c
 11541  0044' 0E00               	movlw	0
 11542  0046' 6E00'              	movwf	(___fldiv@b+2)^0,c
 11543  0048' 0E00               	movlw	0
 11544  004A' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11545  004C'                    l4166:
 11546  004C' 8E00'              	bsf	(___fldiv@b+2)^0,7,c
 11547  004E' 0E00               	movlw	0
 11548  0050' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11549  0052' EF00' F000'        	goto	l4172
 11550  0056'                    l4170:
 11551  0056' 0E00               	movlw	0
 11552  0058' 6E00'              	movwf	___fldiv@b^0,c
 11553  005A' 0E00               	movlw	0
 11554  005C' 6E00'              	movwf	(___fldiv@b+1)^0,c
 11555  005E' 0E00               	movlw	0
 11556  0060' 6E00'              	movwf	(___fldiv@b+2)^0,c
 11557  0062' 0E00               	movlw	0
 11558  0064' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11559  0066'                    l4172:
 11560  0066' 5000'              	movf	(___fldiv@a+3)^0,w,c
 11561  0068' 0B80               	andlw	128
 11562  006A' 1A00'              	xorwf	___fldiv@sign^0,f,c
 11563  006C' 5000'              	movf	(___fldiv@a+3)^0,w,c
 11564  006E' 2400'              	addwf	(___fldiv@a+3)^0,w,c
 11565  0070' 6E00'              	movwf	___fldiv@aexp^0,c
 11566  0072' AE00'              	btfss	(___fldiv@a+2)^0,7,c
 11567  0074' EF00' F000'        	goto	u4261
 11568  0078' EF00' F000'        	goto	u4260
 11569  007C'                    u4261:
 11570  007C' EF00' F000'        	goto	l4180
 11571  0080'                    u4260:
 11572  0080' 8000'              	bsf	___fldiv@aexp^0,0,c
 11573  0082'                    l4180:
 11574  0082' 5000'              	movf	___fldiv@aexp^0,w,c
 11575  0084' B4D8               	btfsc	status,2,c
 11576  0086' EF00' F000'        	goto	u4271
 11577  008A' EF00' F000'        	goto	u4270
 11578  008E'                    u4271:
 11579  008E' EF00' F000'        	goto	l4190
 11580  0092'                    u4270:
 11581  0092' 2800'              	incf	___fldiv@aexp^0,w,c
 11582  0094' A4D8               	btfss	status,2,c
 11583  0096' EF00' F000'        	goto	u4281
 11584  009A' EF00' F000'        	goto	u4280
 11585  009E'                    u4281:
 11586  009E' EF00' F000'        	goto	l4186
 11587  00A2'                    u4280:
 11588  00A2' 0E00               	movlw	0
 11589  00A4' 6E00'              	movwf	___fldiv@a^0,c
 11590  00A6' 0E00               	movlw	0
 11591  00A8' 6E00'              	movwf	(___fldiv@a+1)^0,c
 11592  00AA' 0E00               	movlw	0
 11593  00AC' 6E00'              	movwf	(___fldiv@a+2)^0,c
 11594  00AE' 0E00               	movlw	0
 11595  00B0' 6E00'              	movwf	(___fldiv@a+3)^0,c
 11596  00B2'                    l4186:
 11597  00B2' 8E00'              	bsf	(___fldiv@a+2)^0,7,c
 11598  00B4' 0E00               	movlw	0
 11599  00B6' 6E00'              	movwf	(___fldiv@a+3)^0,c
 11600  00B8' EF00' F000'        	goto	l4192
 11601  00BC'                    l4190:
 11602  00BC' 0E00               	movlw	0
 11603  00BE' 6E00'              	movwf	___fldiv@a^0,c
 11604  00C0' 0E00               	movlw	0
 11605  00C2' 6E00'              	movwf	(___fldiv@a+1)^0,c
 11606  00C4' 0E00               	movlw	0
 11607  00C6' 6E00'              	movwf	(___fldiv@a+2)^0,c
 11608  00C8' 0E00               	movlw	0
 11609  00CA' 6E00'              	movwf	(___fldiv@a+3)^0,c
 11610  00CC'                    l4192:
 11611  00CC' 5000'              	movf	___fldiv@a^0,w,c
 11612  00CE' 1000'              	iorwf	(___fldiv@a+1)^0,w,c
 11613  00D0' 1000'              	iorwf	(___fldiv@a+2)^0,w,c
 11614  00D2' 1000'              	iorwf	(___fldiv@a+3)^0,w,c
 11615  00D4' A4D8               	btfss	status,2,c
 11616  00D6' EF00' F000'        	goto	u4291
 11617  00DA' EF00' F000'        	goto	u4290
 11618  00DE'                    u4291:
 11619  00DE' EF00' F000'        	goto	l4204
 11620  00E2'                    u4290:
 11621  00E2' 0E00               	movlw	0
 11622  00E4' 6E00'              	movwf	___fldiv@b^0,c
 11623  00E6' 0E00               	movlw	0
 11624  00E8' 6E00'              	movwf	(___fldiv@b+1)^0,c
 11625  00EA' 0E00               	movlw	0
 11626  00EC' 6E00'              	movwf	(___fldiv@b+2)^0,c
 11627  00EE' 0E00               	movlw	0
 11628  00F0' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11629  00F2' 0E80               	movlw	128
 11630  00F4' 1200'              	iorwf	(___fldiv@b+2)^0,f,c
 11631  00F6' 0E7F               	movlw	127
 11632  00F8' 1200'              	iorwf	(___fldiv@b+3)^0,f,c
 11633  00FA'                    l4198:
 11634  00FA' 5000'              	movf	___fldiv@sign^0,w,c
 11635  00FC' 1200'              	iorwf	(___fldiv@b+3)^0,f,c
 11636  00FE' C00E' F00E'        	movff	___fldiv@b,?___fldiv
 11637  0102' C00F' F00F'        	movff	___fldiv@b+1,?___fldiv+1
 11638  0106' C010' F010'        	movff	___fldiv@b+2,?___fldiv+2
 11639  010A' C011' F011'        	movff	___fldiv@b+3,?___fldiv+3
 11640  010E' EF00' F000'        	goto	l1192
 11641  0112'                    l4204:
 11642  0112' 5000'              	movf	___fldiv@bexp^0,w,c
 11643  0114' A4D8               	btfss	status,2,c
 11644  0116' EF00' F000'        	goto	u4301
 11645  011A' EF00' F000'        	goto	u4300
 11646  011E'                    u4301:
 11647  011E' EF00' F000'        	goto	l4212
 11648  0122'                    u4300:
 11649  0122' 0E00               	movlw	0
 11650  0124' 6E00'              	movwf	?___fldiv^0,c
 11651  0126' 0E00               	movlw	0
 11652  0128' 6E00'              	movwf	(?___fldiv+1)^0,c
 11653  012A' 0E00               	movlw	0
 11654  012C' 6E00'              	movwf	(?___fldiv+2)^0,c
 11655  012E' 0E00               	movlw	0
 11656  0130' 6E00'              	movwf	(?___fldiv+3)^0,c
 11657  0132' EF00' F000'        	goto	l1192
 11658  0136'                    l4212:
 11659  0136' 5000'              	movf	___fldiv@aexp^0,w,c
 11660  0138' C025' F016'        	movff	___fldiv@bexp,??___fldiv
 11661  013C' 6A00'              	clrf	(??___fldiv+1)^0,c
 11662  013E' 5E00'              	subwf	??___fldiv^0,f,c
 11663  0140' 0E00               	movlw	0
 11664  0142' 5A00'              	subwfb	(??___fldiv+1)^0,f,c
 11665  0144' 0E7F               	movlw	127
 11666  0146' 2400'              	addwf	??___fldiv^0,w,c
 11667  0148' 6E00'              	movwf	___fldiv@new_exp^0,c
 11668  014A' 0E00               	movlw	0
 11669  014C' 2000'              	addwfc	(??___fldiv+1)^0,w,c
 11670  014E' 6E00'              	movwf	(___fldiv@new_exp+1)^0,c
 11671  0150' C00E' F01A'        	movff	___fldiv@b,___fldiv@rem
 11672  0154' C00F' F01B'        	movff	___fldiv@b+1,___fldiv@rem+1
 11673  0158' C010' F01C'        	movff	___fldiv@b+2,___fldiv@rem+2
 11674  015C' C011' F01D'        	movff	___fldiv@b+3,___fldiv@rem+3
 11675  0160' 0E00               	movlw	0
 11676  0162' 6E00'              	movwf	___fldiv@b^0,c
 11677  0164' 0E00               	movlw	0
 11678  0166' 6E00'              	movwf	(___fldiv@b+1)^0,c
 11679  0168' 0E00               	movlw	0
 11680  016A' 6E00'              	movwf	(___fldiv@b+2)^0,c
 11681  016C' 0E00               	movlw	0
 11682  016E' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11683  0170' 0E00               	movlw	0
 11684  0172' 6E00'              	movwf	___fldiv@grs^0,c
 11685  0174' 0E00               	movlw	0
 11686  0176' 6E00'              	movwf	(___fldiv@grs+1)^0,c
 11687  0178' 0E00               	movlw	0
 11688  017A' 6E00'              	movwf	(___fldiv@grs+2)^0,c
 11689  017C' 0E00               	movlw	0
 11690  017E' 6E00'              	movwf	(___fldiv@grs+3)^0,c
 11691  0180' 0E00               	movlw	0
 11692  0182' 6E00'              	movwf	___fldiv@aexp^0,c
 11693  0184' EF00' F000'        	goto	l1194
 11694  0188'                    l4222:
 11695  0188' 5000'              	movf	___fldiv@aexp^0,w,c
 11696  018A' B4D8               	btfsc	status,2,c
 11697  018C' EF00' F000'        	goto	u4311
 11698  0190' EF00' F000'        	goto	u4310
 11699  0194'                    u4311:
 11700  0194' EF00' F000'        	goto	l4230
 11701  0198'                    u4310:
 11702  0198' 90D8               	bcf	status,0,c
 11703  019A' 3600'              	rlcf	___fldiv@rem^0,f,c
 11704  019C' 3600'              	rlcf	(___fldiv@rem+1)^0,f,c
 11705  019E' 3600'              	rlcf	(___fldiv@rem+2)^0,f,c
 11706  01A0' 3600'              	rlcf	(___fldiv@rem+3)^0,f,c
 11707  01A2' 90D8               	bcf	status,0,c
 11708  01A4' 3600'              	rlcf	___fldiv@b^0,f,c
 11709  01A6' 3600'              	rlcf	(___fldiv@b+1)^0,f,c
 11710  01A8' 3600'              	rlcf	(___fldiv@b+2)^0,f,c
 11711  01AA' 3600'              	rlcf	(___fldiv@b+3)^0,f,c
 11712  01AC' AE00'              	btfss	(___fldiv@grs+3)^0,7,c
 11713  01AE' EF00' F000'        	goto	u4321
 11714  01B2' EF00' F000'        	goto	u4320
 11715  01B6'                    u4321:
 11716  01B6' EF00' F000'        	goto	l1197
 11717  01BA'                    u4320:
 11718  01BA' 8000'              	bsf	___fldiv@b^0,0,c
 11719  01BC'                    l1197:
 11720  01BC' 90D8               	bcf	status,0,c
 11721  01BE' 3600'              	rlcf	___fldiv@grs^0,f,c
 11722  01C0' 3600'              	rlcf	(___fldiv@grs+1)^0,f,c
 11723  01C2' 3600'              	rlcf	(___fldiv@grs+2)^0,f,c
 11724  01C4' 3600'              	rlcf	(___fldiv@grs+3)^0,f,c
 11725  01C6'                    l4230:
 11726  01C6' 5000'              	movf	___fldiv@a^0,w,c
 11727  01C8' 5C00'              	subwf	___fldiv@rem^0,w,c
 11728  01CA' 5000'              	movf	(___fldiv@a+1)^0,w,c
 11729  01CC' 5800'              	subwfb	(___fldiv@rem+1)^0,w,c
 11730  01CE' 5000'              	movf	(___fldiv@a+2)^0,w,c
 11731  01D0' 5800'              	subwfb	(___fldiv@rem+2)^0,w,c
 11732  01D2' 5000'              	movf	(___fldiv@a+3)^0,w,c
 11733  01D4' 5800'              	subwfb	(___fldiv@rem+3)^0,w,c
 11734  01D6' A0D8               	btfss	status,0,c
 11735  01D8' EF00' F000'        	goto	u4331
 11736  01DC' EF00' F000'        	goto	u4330
 11737  01E0'                    u4331:
 11738  01E0' EF00' F000'        	goto	l4236
 11739  01E4'                    u4330:
 11740  01E4' 8C00'              	bsf	(___fldiv@grs+3)^0,6,c
 11741  01E6' 5000'              	movf	___fldiv@a^0,w,c
 11742  01E8' 5E00'              	subwf	___fldiv@rem^0,f,c
 11743  01EA' 5000'              	movf	(___fldiv@a+1)^0,w,c
 11744  01EC' 5A00'              	subwfb	(___fldiv@rem+1)^0,f,c
 11745  01EE' 5000'              	movf	(___fldiv@a+2)^0,w,c
 11746  01F0' 5A00'              	subwfb	(___fldiv@rem+2)^0,f,c
 11747  01F2' 5000'              	movf	(___fldiv@a+3)^0,w,c
 11748  01F4' 5A00'              	subwfb	(___fldiv@rem+3)^0,f,c
 11749  01F6'                    l4236:
 11750  01F6' 2A00'              	incf	___fldiv@aexp^0,f,c
 11751  01F8'                    l1194:
 11752  01F8' 0E19               	movlw	25
 11753  01FA' 6400'              	cpfsgt	___fldiv@aexp^0,c
 11754  01FC' EF00' F000'        	goto	u4341
 11755  0200' EF00' F000'        	goto	u4340
 11756  0204'                    u4341:
 11757  0204' EF00' F000'        	goto	l4222
 11758  0208'                    u4340:
 11759  0208' 5000'              	movf	___fldiv@rem^0,w,c
 11760  020A' 1000'              	iorwf	(___fldiv@rem+1)^0,w,c
 11761  020C' 1000'              	iorwf	(___fldiv@rem+2)^0,w,c
 11762  020E' 1000'              	iorwf	(___fldiv@rem+3)^0,w,c
 11763  0210' B4D8               	btfsc	status,2,c
 11764  0212' EF00' F000'        	goto	u4351
 11765  0216' EF00' F000'        	goto	u4350
 11766  021A'                    u4351:
 11767  021A' EF00' F000'        	goto	l4248
 11768  021E'                    u4350:
 11769  021E' 8000'              	bsf	___fldiv@grs^0,0,c
 11770  0220' EF00' F000'        	goto	l4248
 11771  0224'                    l4242:
 11772  0224' 90D8               	bcf	status,0,c
 11773  0226' 3600'              	rlcf	___fldiv@b^0,f,c
 11774  0228' 3600'              	rlcf	(___fldiv@b+1)^0,f,c
 11775  022A' 3600'              	rlcf	(___fldiv@b+2)^0,f,c
 11776  022C' 3600'              	rlcf	(___fldiv@b+3)^0,f,c
 11777  022E' AE00'              	btfss	(___fldiv@grs+3)^0,7,c
 11778  0230' EF00' F000'        	goto	u4361
 11779  0234' EF00' F000'        	goto	u4360
 11780  0238'                    u4361:
 11781  0238' EF00' F000'        	goto	l1203
 11782  023C'                    u4360:
 11783  023C' 8000'              	bsf	___fldiv@b^0,0,c
 11784  023E'                    l1203:
 11785  023E' 90D8               	bcf	status,0,c
 11786  0240' 3600'              	rlcf	___fldiv@grs^0,f,c
 11787  0242' 3600'              	rlcf	(___fldiv@grs+1)^0,f,c
 11788  0244' 3600'              	rlcf	(___fldiv@grs+2)^0,f,c
 11789  0246' 3600'              	rlcf	(___fldiv@grs+3)^0,f,c
 11790  0248' 0600'              	decf	___fldiv@new_exp^0,f,c
 11791  024A' A0D8               	btfss	status,0,c
 11792  024C' 0600'              	decf	(___fldiv@new_exp+1)^0,f,c
 11793  024E'                    l4248:
 11794  024E' AE00'              	btfss	(___fldiv@b+2)^0,7,c
 11795  0250' EF00' F000'        	goto	u4371
 11796  0254' EF00' F000'        	goto	u4370
 11797  0258'                    u4371:
 11798  0258' EF00' F000'        	goto	l4242
 11799  025C'                    u4370:
 11800  025C' 0E00               	movlw	0
 11801  025E' 6E00'              	movwf	___fldiv@aexp^0,c
 11802  0260' AE00'              	btfss	(___fldiv@grs+3)^0,7,c
 11803  0262' EF00' F000'        	goto	u4381
 11804  0266' EF00' F000'        	goto	u4380
 11805  026A'                    u4381:
 11806  026A' EF00' F000'        	goto	l1205
 11807  026E'                    u4380:
 11808  026E' 0EFF               	movlw	255
 11809  0270' 1400'              	andwf	___fldiv@grs^0,w,c
 11810  0272' 6E00'              	movwf	??___fldiv^0,c
 11811  0274' 0EFF               	movlw	255
 11812  0276' 1400'              	andwf	(___fldiv@grs+1)^0,w,c
 11813  0278' 6E00'              	movwf	(??___fldiv+1)^0,c
 11814  027A' 0EFF               	movlw	255
 11815  027C' 1400'              	andwf	(___fldiv@grs+2)^0,w,c
 11816  027E' 6E00'              	movwf	(??___fldiv+2)^0,c
 11817  0280' 0E7F               	movlw	127
 11818  0282' 1400'              	andwf	(___fldiv@grs+3)^0,w,c
 11819  0284' 6E00'              	movwf	(??___fldiv+3)^0,c
 11820  0286' 5000'              	movf	??___fldiv^0,w,c
 11821  0288' 1000'              	iorwf	(??___fldiv+1)^0,w,c
 11822  028A' 1000'              	iorwf	(??___fldiv+2)^0,w,c
 11823  028C' 1000'              	iorwf	(??___fldiv+3)^0,w,c
 11824  028E' B4D8               	btfsc	status,2,c
 11825  0290' EF00' F000'        	goto	u4391
 11826  0294' EF00' F000'        	goto	u4390
 11827  0298'                    u4391:
 11828  0298' EF00' F000'        	goto	l1206
 11829  029C'                    u4390:
 11830  029C'                    l4256:
 11831  029C' 0E01               	movlw	1
 11832  029E' 6E00'              	movwf	___fldiv@aexp^0,c
 11833  02A0' EF00' F000'        	goto	l1205
 11834  02A4'                    l1206:
 11835  02A4' A000'              	btfss	___fldiv@b^0,0,c
 11836  02A6' EF00' F000'        	goto	u4401
 11837  02AA' EF00' F000'        	goto	u4400
 11838  02AE'                    u4401:
 11839  02AE' EF00' F000'        	goto	l1205
 11840  02B2'                    u4400:
 11841  02B2' EF00' F000'        	goto	l4256
 11842  02B6'                    l1205:
 11843  02B6' 5000'              	movf	___fldiv@aexp^0,w,c
 11844  02B8' B4D8               	btfsc	status,2,c
 11845  02BA' EF00' F000'        	goto	u4411
 11846  02BE' EF00' F000'        	goto	u4410
 11847  02C2'                    u4411:
 11848  02C2' EF00' F000'        	goto	l4268
 11849  02C6'                    u4410:
 11850  02C6' 0E01               	movlw	1
 11851  02C8' 2600'              	addwf	___fldiv@b^0,f,c
 11852  02CA' 0E00               	movlw	0
 11853  02CC' 2200'              	addwfc	(___fldiv@b+1)^0,f,c
 11854  02CE' 2200'              	addwfc	(___fldiv@b+2)^0,f,c
 11855  02D0' 2200'              	addwfc	(___fldiv@b+3)^0,f,c
 11856  02D2' A000'              	btfss	(___fldiv@b+3)^0,0,c
 11857  02D4' EF00' F000'        	goto	u4421
 11858  02D8' EF00' F000'        	goto	u4420
 11859  02DC'                    u4421:
 11860  02DC' EF00' F000'        	goto	l4268
 11861  02E0'                    u4420:
 11862  02E0' C00E' F016'        	movff	___fldiv@b,??___fldiv
 11863  02E4' C00F' F017'        	movff	___fldiv@b+1,??___fldiv+1
 11864  02E8' C010' F018'        	movff	___fldiv@b+2,??___fldiv+2
 11865  02EC' C011' F019'        	movff	___fldiv@b+3,??___fldiv+3
 11866  02F0' 3400'              	rlcf	(??___fldiv+3)^0,w,c
 11867  02F2' 3200'              	rrcf	(??___fldiv+3)^0,f,c
 11868  02F4' 3200'              	rrcf	(??___fldiv+2)^0,f,c
 11869  02F6' 3200'              	rrcf	(??___fldiv+1)^0,f,c
 11870  02F8' 3200'              	rrcf	??___fldiv^0,f,c
 11871  02FA' C016' F00E'        	movff	??___fldiv,___fldiv@b
 11872  02FE' C017' F00F'        	movff	??___fldiv+1,___fldiv@b+1
 11873  0302' C018' F010'        	movff	??___fldiv+2,___fldiv@b+2
 11874  0306' C019' F011'        	movff	??___fldiv+3,___fldiv@b+3
 11875  030A' 4A00'              	infsnz	___fldiv@new_exp^0,f,c
 11876  030C' 2A00'              	incf	(___fldiv@new_exp+1)^0,f,c
 11877  030E'                    l4268:
 11878  030E' BE00'              	btfsc	(___fldiv@new_exp+1)^0,7,c
 11879  0310' EF00' F000'        	goto	u4431
 11880  0314' 5000'              	movf	(___fldiv@new_exp+1)^0,w,c
 11881  0316' E108               	bnz	u4430
 11882  0318' 2800'              	incf	___fldiv@new_exp^0,w,c
 11883  031A' A0D8               	btfss	status,0,c
 11884  031C' EF00' F000'        	goto	u4431
 11885  0320' EF00' F000'        	goto	u4430
 11886  0324'                    u4431:
 11887  0324' EF00' F000'        	goto	l4272
 11888  0328'                    u4430:
 11889  0328' 0E00               	movlw	0
 11890  032A' 6E00'              	movwf	(___fldiv@new_exp+1)^0,c
 11891  032C' 6800'              	setf	___fldiv@new_exp^0,c
 11892  032E' 0E00               	movlw	0
 11893  0330' 6E00'              	movwf	___fldiv@b^0,c
 11894  0332' 0E00               	movlw	0
 11895  0334' 6E00'              	movwf	(___fldiv@b+1)^0,c
 11896  0336' 0E00               	movlw	0
 11897  0338' 6E00'              	movwf	(___fldiv@b+2)^0,c
 11898  033A' 0E00               	movlw	0
 11899  033C' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11900  033E'                    l4272:
 11901  033E' BE00'              	btfsc	(___fldiv@new_exp+1)^0,7,c
 11902  0340' EF00' F000'        	goto	u4440
 11903  0344' 5000'              	movf	(___fldiv@new_exp+1)^0,w,c
 11904  0346' E106               	bnz	u4441
 11905  0348' 0400'              	decf	___fldiv@new_exp^0,w,c
 11906  034A' B0D8               	btfsc	status,0,c
 11907  034C' EF00' F000'        	goto	u4441
 11908  0350' EF00' F000'        	goto	u4440
 11909  0354'                    u4441:
 11910  0354' EF00' F000'        	goto	l4276
 11911  0358'                    u4440:
 11912  0358' 0E00               	movlw	0
 11913  035A' 6E00'              	movwf	(___fldiv@new_exp+1)^0,c
 11914  035C' 0E00               	movlw	0
 11915  035E' 6E00'              	movwf	___fldiv@new_exp^0,c
 11916  0360' 0E00               	movlw	0
 11917  0362' 6E00'              	movwf	___fldiv@b^0,c
 11918  0364' 0E00               	movlw	0
 11919  0366' 6E00'              	movwf	(___fldiv@b+1)^0,c
 11920  0368' 0E00               	movlw	0
 11921  036A' 6E00'              	movwf	(___fldiv@b+2)^0,c
 11922  036C' 0E00               	movlw	0
 11923  036E' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11924  0370' 0E00               	movlw	0
 11925  0372' 6E00'              	movwf	___fldiv@sign^0,c
 11926  0374'                    l4276:
 11927  0374' C01F' F025'        	movff	___fldiv@new_exp,___fldiv@bexp
 11928  0378' A000'              	btfss	___fldiv@bexp^0,0,c
 11929  037A' EF00' F000'        	goto	u4451
 11930  037E' EF00' F000'        	goto	u4450
 11931  0382'                    u4451:
 11932  0382' EF00' F000'        	goto	l4282
 11933  0386'                    u4450:
 11934  0386' 8E00'              	bsf	(___fldiv@b+2)^0,7,c
 11935  0388' EF00' F000'        	goto	l4284
 11936  038C'                    l4282:
 11937  038C' 9E00'              	bcf	(___fldiv@b+2)^0,7,c
 11938  038E'                    l4284:
 11939  038E' 90D8               	bcf	status,0,c
 11940  0390' 3000'              	rrcf	___fldiv@bexp^0,w,c
 11941  0392' 6E00'              	movwf	(___fldiv@b+3)^0,c
 11942  0394' EF00' F000'        	goto	l4198
 11943  0398'                    l1192:
 11944  0398' 0012               	return		;funcret
 11945  039A'                    __end_of___fldiv:
 11946                           	callstack 0
 11947                           
 11948 ;; *************** function _checkbatterylevel *****************
 11949 ;; Defined at:
 11950 ;;		line 73 in file "DC_motors.c"
 11951 ;; Parameters:    Size  Location     Type
 11952 ;;		None
 11953 ;; Auto vars:     Size  Location     Type
 11954 ;;  batterylevel    1    1[COMRAM] unsigned char 
 11955 ;; Return value:  Size  Location     Type
 11956 ;;                  1    wreg      void 
 11957 ;; Registers used:
 11958 ;;		wreg, status,2, status,0, cstack
 11959 ;; Tracked objects:
 11960 ;;		On entry : 0/0
 11961 ;;		On exit  : 0/0
 11962 ;;		Unchanged: 0/0
 11963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11968 ;;Total ram usage:        1 bytes
 11969 ;; Hardware stack levels used: 1
 11970 ;; Hardware stack levels required when called: 1
 11971 ;; This function calls:
 11972 ;;		_ADC_getval
 11973 ;; This function is called by:
 11974 ;;		_main
 11975 ;; This function uses a non-reentrant model
 11976 ;;
 11977                           
 11978                           	psect	text54
 11979  0000'                    __ptext54:
 11980                           	callstack 0
 11981  0000'                    _checkbatterylevel:
 11982                           	callstack 29
 11983  0000'                    
 11984                           ;DC_motors.c: 75:     unsigned char batterylevel;;DC_motors.c: 76:     batterylevel = AD
      +                          C_getval();
 11985  0000' EC00' F000'        	call	_ADC_getval	;wreg free
 11986  0004' 6E00'              	movwf	checkbatterylevel@batterylevel^0,c
 11987  0006'                    
 11988                           ;DC_motors.c: 77:     if (batterylevel<200) {
 11989  0006' 0EC8               	movlw	200
 11990  0008' 6000'              	cpfslt	checkbatterylevel@batterylevel^0,c
 11991  000A' EF00' F000'        	goto	u6691
 11992  000E' EF00' F000'        	goto	u6690
 11993  0012'                    u6691:
 11994  0012' EF00' F000'        	goto	l521
 11995  0016'                    u6690:
 11996  0016'                    
 11997                           ;DC_motors.c: 78:         LATDbits.LATD7 = 1;
 11998  0016' 8E7C               	bsf	124,7,c	;volatile
 11999                           
 12000                           ;DC_motors.c: 79:     } else {
 12001  0018' EF00' F000'        	goto	l523
 12002  001C'                    l521:
 12003                           
 12004                           ;DC_motors.c: 80:         LATDbits.LATD7 = 0;
 12005  001C' 9E7C               	bcf	124,7,c	;volatile
 12006  001E'                    l523:
 12007  001E' 0012               	return		;funcret
 12008  0020'                    __end_of_checkbatterylevel:
 12009                           	callstack 0
 12010                           
 12011 ;; *************** function _ADC_getval *****************
 12012 ;; Defined at:
 12013 ;;		line 26 in file "ADC.c"
 12014 ;; Parameters:    Size  Location     Type
 12015 ;;		None
 12016 ;; Auto vars:     Size  Location     Type
 12017 ;;  tmpval          1    0[COMRAM] unsigned char 
 12018 ;; Return value:  Size  Location     Type
 12019 ;;                  1    wreg      unsigned char 
 12020 ;; Registers used:
 12021 ;;		wreg, status,2
 12022 ;; Tracked objects:
 12023 ;;		On entry : 0/0
 12024 ;;		On exit  : 0/0
 12025 ;;		Unchanged: 0/0
 12026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12031 ;;Total ram usage:        1 bytes
 12032 ;; Hardware stack levels used: 1
 12033 ;; This function calls:
 12034 ;;		Nothing
 12035 ;; This function is called by:
 12036 ;;		_checkbatterylevel
 12037 ;; This function uses a non-reentrant model
 12038 ;;
 12039                           
 12040                           	psect	text55
 12041  0000'                    __ptext55:
 12042                           	callstack 0
 12043  0000'                    _ADC_getval:
 12044                           	callstack 29
 12045  0000'                    
 12046                           ;ADC.c: 27:     unsigned char tmpval;;ADC.c: 29:     ADCON0bits.GO = 1;
 12047  0000' 8060               	bsf	96,0,c	;volatile
 12048  0002'                    l267:
 12049  0002' B060               	btfsc	96,0,c	;volatile
 12050  0004' EF00' F000'        	goto	u6551
 12051  0008' EF00' F000'        	goto	u6550
 12052  000C'                    u6551:
 12053  000C' EF00' F000'        	goto	l267
 12054  0010'                    u6550:
 12055  0010'                    
 12056                           ;ADC.c: 31:     tmpval = ADRESH;
 12057  0010' CF64 F000'         	movff	3940,ADC_getval@tmpval	;volatile
 12058  0014'                    
 12059                           ;ADC.c: 34:     return tmpval;
 12060  0014' 5000'              	movf	ADC_getval@tmpval^0,w,c
 12061  0016' 0012               	return		;funcret
 12062  0018'                    __end_of_ADC_getval:
 12063                           	callstack 0
 12064                           
 12065 ;; *************** function _USART4_init *****************
 12066 ;; Defined at:
 12067 ;;		line 7 in file "serial_comm.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;		None
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;		None
 12072 ;; Return value:  Size  Location     Type
 12073 ;;                  1    wreg      void 
 12074 ;; Registers used:
 12075 ;;		wreg, status,2
 12076 ;; Tracked objects:
 12077 ;;		On entry : 0/0
 12078 ;;		On exit  : 0/0
 12079 ;;		Unchanged: 0/0
 12080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12085 ;;Total ram usage:        0 bytes
 12086 ;; Hardware stack levels used: 1
 12087 ;; This function calls:
 12088 ;;		Nothing
 12089 ;; This function is called by:
 12090 ;;		_main
 12091 ;; This function uses a non-reentrant model
 12092 ;;
 12093                           
 12094                           	psect	text56
 12095  0000'                    __ptext56:
 12096                           	callstack 0
 12097  0000'                    _USART4_init:
 12098                           	callstack 30
 12099  0000'                    
 12100                           ;serial_comm.c: 10:     RC0PPS = 0x12;
 12101  0000' 0E12               	movlw	18
 12102  0002' 010E               	movlb	14	; () banked
 12103  0004' 6F62               	movwf	98,b	;volatile
 12104                           
 12105                           ;serial_comm.c: 11:     RX4PPS = 0x11;
 12106  0006' 0E11               	movlw	17
 12107  0008' 6F15               	movwf	21,b	;volatile
 12108  000A'                    
 12109                           ; BSR set to: 14
 12110                           ;serial_comm.c: 12:     TRISCbits.TRISC1 = 1;
 12111  000A' 8283               	bsf	131,1,c	;volatile
 12112  000C'                    
 12113                           ; BSR set to: 14
 12114                           ;serial_comm.c: 14:     BAUD4CONbits.BRG16 = 0;
 12115  000C' 97E9               	bcf	233,3,b	;volatile
 12116  000E'                    
 12117                           ; BSR set to: 14
 12118                           ;serial_comm.c: 15:     TX4STAbits.BRGH = 0;
 12119  000E' 95E8               	bcf	232,2,b	;volatile
 12120                           
 12121                           ;serial_comm.c: 16:     SP4BRGL = 51;
 12122  0010' 0E33               	movlw	51
 12123  0012' 6FE5               	movwf	229,b	;volatile
 12124                           
 12125                           ;serial_comm.c: 17:     SP4BRGH = 0;
 12126  0014' 0E00               	movlw	0
 12127  0016' 6FE6               	movwf	230,b	;volatile
 12128  0018'                    
 12129                           ; BSR set to: 14
 12130                           ;serial_comm.c: 19:     RC4STAbits.CREN = 1;
 12131  0018' 89E7               	bsf	231,4,b	;volatile
 12132  001A'                    
 12133                           ; BSR set to: 14
 12134                           ;serial_comm.c: 20:     TX4STAbits.TXEN = 1;
 12135  001A' 8BE8               	bsf	232,5,b	;volatile
 12136  001C'                    
 12137                           ; BSR set to: 14
 12138                           ;serial_comm.c: 21:     RC4STAbits.SPEN = 1;
 12139  001C' 8FE7               	bsf	231,7,b	;volatile
 12140  001E'                    
 12141                           ; BSR set to: 14
 12142  001E' 0012               	return		;funcret
 12143  0020'                    __end_of_USART4_init:
 12144                           	callstack 0
 12145                           
 12146 ;; *************** function _DCmotors_testing *****************
 12147 ;; Defined at:
 12148 ;;		line 281 in file "DC_motors.c"
 12149 ;; Parameters:    Size  Location     Type
 12150 ;;  mL              2   39[COMRAM] PTR struct .
 12151 ;;		 -> main@motorL(9), 
 12152 ;;  mR              2   41[COMRAM] PTR struct .
 12153 ;;		 -> main@motorR(9), 
 12154 ;; Auto vars:     Size  Location     Type
 12155 ;;		None
 12156 ;; Return value:  Size  Location     Type
 12157 ;;                  1    wreg      void 
 12158 ;; Registers used:
 12159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12160 ;; Tracked objects:
 12161 ;;		On entry : 0/0
 12162 ;;		On exit  : 0/0
 12163 ;;		Unchanged: 0/0
 12164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12169 ;;Total ram usage:        6 bytes
 12170 ;; Hardware stack levels used: 1
 12171 ;; Hardware stack levels required when called: 4
 12172 ;; This function calls:
 12173 ;;		_forward
 12174 ;;		_reverse
 12175 ;;		_stop
 12176 ;;		_turnleft
 12177 ;;		_turnright
 12178 ;; This function is called by:
 12179 ;;		_main
 12180 ;; This function uses a non-reentrant model
 12181 ;;
 12182                           
 12183                           	psect	text57
 12184  0000'                    __ptext57:
 12185                           	callstack 0
 12186  0000'                    _DCmotors_testing:
 12187                           	callstack 26
 12188  0000'                    
 12189                           ;DC_motors.c: 281: void DCmotors_testing(DC_motor *mL, DC_motor *mR);DC_motors.c: 282: {
      +                          ;DC_motors.c: 283:     INTCONbits.GIE = 0;
 12190  0000' 9EF2               	bcf	242,7,c	;volatile
 12191  0002'                    
 12192                           ;DC_motors.c: 285:     forward(mL, mR);
 12193  0002' C027' F019'        	movff	DCmotors_testing@mL,forward@mL
 12194  0006' C028' F01A'        	movff	DCmotors_testing@mL+1,forward@mL+1
 12195  000A' C029' F01B'        	movff	DCmotors_testing@mR,forward@mR
 12196  000E' C02A' F01C'        	movff	DCmotors_testing@mR+1,forward@mR+1
 12197  0012' EC00' F000'        	call	_forward	;wreg free
 12198                           
 12199                           ;DC_motors.c: 286:     stop(mL, mR);
 12200  0016' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12201  001A' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12202  001E' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12203  0022' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12204  0026' EC00' F000'        	call	_stop	;wreg free
 12205  002A'                    
 12206                           ;DC_motors.c: 287:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12207  002A' 0E52               	movlw	82
 12208  002C' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12209  002E' 0E2B               	movlw	43
 12210  0030' 6E00'              	movwf	??_DCmotors_testing^0,c
 12211  0032' 0E00               	movlw	0
 12212  0034'                    u7277:
 12213  0034' 2EE8               	decfsz	wreg,f,c
 12214  0036' D7FE               	bra	u7277
 12215  0038' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12216  003A' D7FC               	bra	u7277
 12217  003C' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12218  003E' D7FA               	bra	u7277
 12219  0040' D000               	nop2	
 12220  0042'                    
 12221                           ;DC_motors.c: 289:     reverse(mL, mR);
 12222  0042' C027' F019'        	movff	DCmotors_testing@mL,reverse@mL
 12223  0046' C028' F01A'        	movff	DCmotors_testing@mL+1,reverse@mL+1
 12224  004A' C029' F01B'        	movff	DCmotors_testing@mR,reverse@mR
 12225  004E' C02A' F01C'        	movff	DCmotors_testing@mR+1,reverse@mR+1
 12226  0052' EC00' F000'        	call	_reverse	;wreg free
 12227  0056'                    
 12228                           ;DC_motors.c: 290:     stop(mL, mR);
 12229  0056' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12230  005A' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12231  005E' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12232  0062' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12233  0066' EC00' F000'        	call	_stop	;wreg free
 12234  006A'                    
 12235                           ;DC_motors.c: 291:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12236  006A' 0E52               	movlw	82
 12237  006C' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12238  006E' 0E2B               	movlw	43
 12239  0070' 6E00'              	movwf	??_DCmotors_testing^0,c
 12240  0072' 0E00               	movlw	0
 12241  0074'                    u7287:
 12242  0074' 2EE8               	decfsz	wreg,f,c
 12243  0076' D7FE               	bra	u7287
 12244  0078' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12245  007A' D7FC               	bra	u7287
 12246  007C' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12247  007E' D7FA               	bra	u7287
 12248  0080' D000               	nop2	
 12249                           
 12250                           ;DC_motors.c: 293:     turnright(mL, mR, 90);
 12251  0082' C027' F021'        	movff	DCmotors_testing@mL,turnright@mL
 12252  0086' C028' F022'        	movff	DCmotors_testing@mL+1,turnright@mL+1
 12253  008A' C029' F023'        	movff	DCmotors_testing@mR,turnright@mR
 12254  008E' C02A' F024'        	movff	DCmotors_testing@mR+1,turnright@mR+1
 12255  0092' 0E00               	movlw	0
 12256  0094' 6E00'              	movwf	(turnright@deg+1)^0,c
 12257  0096' 0E5A               	movlw	90
 12258  0098' 6E00'              	movwf	turnright@deg^0,c
 12259  009A' EC00' F000'        	call	_turnright	;wreg free
 12260                           
 12261                           ;DC_motors.c: 294:     stop(mL, mR);
 12262  009E' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12263  00A2' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12264  00A6' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12265  00AA' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12266  00AE' EC00' F000'        	call	_stop	;wreg free
 12267  00B2'                    
 12268                           ;DC_motors.c: 295:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12269  00B2' 0E52               	movlw	82
 12270  00B4' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12271  00B6' 0E2B               	movlw	43
 12272  00B8' 6E00'              	movwf	??_DCmotors_testing^0,c
 12273  00BA' 0E00               	movlw	0
 12274  00BC'                    u7297:
 12275  00BC' 2EE8               	decfsz	wreg,f,c
 12276  00BE' D7FE               	bra	u7297
 12277  00C0' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12278  00C2' D7FC               	bra	u7297
 12279  00C4' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12280  00C6' D7FA               	bra	u7297
 12281  00C8' D000               	nop2	
 12282  00CA'                    
 12283                           ;DC_motors.c: 297:     turnleft(mL, mR, 90);
 12284  00CA' C027' F021'        	movff	DCmotors_testing@mL,turnleft@mL
 12285  00CE' C028' F022'        	movff	DCmotors_testing@mL+1,turnleft@mL+1
 12286  00D2' C029' F023'        	movff	DCmotors_testing@mR,turnleft@mR
 12287  00D6' C02A' F024'        	movff	DCmotors_testing@mR+1,turnleft@mR+1
 12288  00DA' 0E00               	movlw	0
 12289  00DC' 6E00'              	movwf	(turnleft@deg+1)^0,c
 12290  00DE' 0E5A               	movlw	90
 12291  00E0' 6E00'              	movwf	turnleft@deg^0,c
 12292  00E2' EC00' F000'        	call	_turnleft	;wreg free
 12293  00E6'                    
 12294                           ;DC_motors.c: 298:     stop(mL, mR);
 12295  00E6' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12296  00EA' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12297  00EE' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12298  00F2' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12299  00F6' EC00' F000'        	call	_stop	;wreg free
 12300  00FA'                    
 12301                           ;DC_motors.c: 299:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12302  00FA' 0E52               	movlw	82
 12303  00FC' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12304  00FE' 0E2B               	movlw	43
 12305  0100' 6E00'              	movwf	??_DCmotors_testing^0,c
 12306  0102' 0E00               	movlw	0
 12307  0104'                    u7307:
 12308  0104' 2EE8               	decfsz	wreg,f,c
 12309  0106' D7FE               	bra	u7307
 12310  0108' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12311  010A' D7FC               	bra	u7307
 12312  010C' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12313  010E' D7FA               	bra	u7307
 12314  0110' D000               	nop2	
 12315                           
 12316                           ;DC_motors.c: 301:     turnright(mL, mR, 180);
 12317  0112' C027' F021'        	movff	DCmotors_testing@mL,turnright@mL
 12318  0116' C028' F022'        	movff	DCmotors_testing@mL+1,turnright@mL+1
 12319  011A' C029' F023'        	movff	DCmotors_testing@mR,turnright@mR
 12320  011E' C02A' F024'        	movff	DCmotors_testing@mR+1,turnright@mR+1
 12321  0122' 0E00               	movlw	0
 12322  0124' 6E00'              	movwf	(turnright@deg+1)^0,c
 12323  0126' 0EB4               	movlw	180
 12324  0128' 6E00'              	movwf	turnright@deg^0,c
 12325  012A' EC00' F000'        	call	_turnright	;wreg free
 12326                           
 12327                           ;DC_motors.c: 302:     stop(mL, mR);
 12328  012E' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12329  0132' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12330  0136' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12331  013A' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12332  013E' EC00' F000'        	call	_stop	;wreg free
 12333  0142'                    
 12334                           ;DC_motors.c: 303:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12335  0142' 0E52               	movlw	82
 12336  0144' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12337  0146' 0E2B               	movlw	43
 12338  0148' 6E00'              	movwf	??_DCmotors_testing^0,c
 12339  014A' 0E00               	movlw	0
 12340  014C'                    u7317:
 12341  014C' 2EE8               	decfsz	wreg,f,c
 12342  014E' D7FE               	bra	u7317
 12343  0150' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12344  0152' D7FC               	bra	u7317
 12345  0154' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12346  0156' D7FA               	bra	u7317
 12347  0158' D000               	nop2	
 12348  015A'                    
 12349                           ;DC_motors.c: 305:     turnleft(mL, mR, 180);
 12350  015A' C027' F021'        	movff	DCmotors_testing@mL,turnleft@mL
 12351  015E' C028' F022'        	movff	DCmotors_testing@mL+1,turnleft@mL+1
 12352  0162' C029' F023'        	movff	DCmotors_testing@mR,turnleft@mR
 12353  0166' C02A' F024'        	movff	DCmotors_testing@mR+1,turnleft@mR+1
 12354  016A' 0E00               	movlw	0
 12355  016C' 6E00'              	movwf	(turnleft@deg+1)^0,c
 12356  016E' 0EB4               	movlw	180
 12357  0170' 6E00'              	movwf	turnleft@deg^0,c
 12358  0172' EC00' F000'        	call	_turnleft	;wreg free
 12359  0176'                    
 12360                           ;DC_motors.c: 306:     stop(mL, mR);
 12361  0176' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12362  017A' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12363  017E' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12364  0182' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12365  0186' EC00' F000'        	call	_stop	;wreg free
 12366  018A'                    
 12367                           ;DC_motors.c: 307:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12368  018A' 0E52               	movlw	82
 12369  018C' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12370  018E' 0E2B               	movlw	43
 12371  0190' 6E00'              	movwf	??_DCmotors_testing^0,c
 12372  0192' 0E00               	movlw	0
 12373  0194'                    u7327:
 12374  0194' 2EE8               	decfsz	wreg,f,c
 12375  0196' D7FE               	bra	u7327
 12376  0198' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12377  019A' D7FC               	bra	u7327
 12378  019C' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12379  019E' D7FA               	bra	u7327
 12380  01A0' D000               	nop2	
 12381                           
 12382                           ;DC_motors.c: 309:     turnright(mL, mR, 135);
 12383  01A2' C027' F021'        	movff	DCmotors_testing@mL,turnright@mL
 12384  01A6' C028' F022'        	movff	DCmotors_testing@mL+1,turnright@mL+1
 12385  01AA' C029' F023'        	movff	DCmotors_testing@mR,turnright@mR
 12386  01AE' C02A' F024'        	movff	DCmotors_testing@mR+1,turnright@mR+1
 12387  01B2' 0E00               	movlw	0
 12388  01B4' 6E00'              	movwf	(turnright@deg+1)^0,c
 12389  01B6' 0E87               	movlw	135
 12390  01B8' 6E00'              	movwf	turnright@deg^0,c
 12391  01BA' EC00' F000'        	call	_turnright	;wreg free
 12392                           
 12393                           ;DC_motors.c: 310:     stop(mL, mR);
 12394  01BE' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12395  01C2' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12396  01C6' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12397  01CA' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12398  01CE' EC00' F000'        	call	_stop	;wreg free
 12399  01D2'                    
 12400                           ;DC_motors.c: 311:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12401  01D2' 0E52               	movlw	82
 12402  01D4' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12403  01D6' 0E2B               	movlw	43
 12404  01D8' 6E00'              	movwf	??_DCmotors_testing^0,c
 12405  01DA' 0E00               	movlw	0
 12406  01DC'                    u7337:
 12407  01DC' 2EE8               	decfsz	wreg,f,c
 12408  01DE' D7FE               	bra	u7337
 12409  01E0' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12410  01E2' D7FC               	bra	u7337
 12411  01E4' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12412  01E6' D7FA               	bra	u7337
 12413  01E8' D000               	nop2	
 12414  01EA'                    
 12415                           ;DC_motors.c: 313:     turnleft(mL, mR, 135);
 12416  01EA' C027' F021'        	movff	DCmotors_testing@mL,turnleft@mL
 12417  01EE' C028' F022'        	movff	DCmotors_testing@mL+1,turnleft@mL+1
 12418  01F2' C029' F023'        	movff	DCmotors_testing@mR,turnleft@mR
 12419  01F6' C02A' F024'        	movff	DCmotors_testing@mR+1,turnleft@mR+1
 12420  01FA' 0E00               	movlw	0
 12421  01FC' 6E00'              	movwf	(turnleft@deg+1)^0,c
 12422  01FE' 0E87               	movlw	135
 12423  0200' 6E00'              	movwf	turnleft@deg^0,c
 12424  0202' EC00' F000'        	call	_turnleft	;wreg free
 12425  0206'                    
 12426                           ;DC_motors.c: 314:     stop(mL, mR);
 12427  0206' C027' F019'        	movff	DCmotors_testing@mL,stop@mL
 12428  020A' C028' F01A'        	movff	DCmotors_testing@mL+1,stop@mL+1
 12429  020E' C029' F01B'        	movff	DCmotors_testing@mR,stop@mR
 12430  0212' C02A' F01C'        	movff	DCmotors_testing@mR+1,stop@mR+1
 12431  0216' EC00' F000'        	call	_stop	;wreg free
 12432  021A'                    
 12433                           ;DC_motors.c: 315:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 12434  021A' 0E52               	movlw	82
 12435  021C' 6E00'              	movwf	(??_DCmotors_testing+1)^0,c
 12436  021E' 0E2B               	movlw	43
 12437  0220' 6E00'              	movwf	??_DCmotors_testing^0,c
 12438  0222' 0E00               	movlw	0
 12439  0224'                    u7347:
 12440  0224' 2EE8               	decfsz	wreg,f,c
 12441  0226' D7FE               	bra	u7347
 12442  0228' 2E00'              	decfsz	??_DCmotors_testing^0,f,c
 12443  022A' D7FC               	bra	u7347
 12444  022C' 2E00'              	decfsz	(??_DCmotors_testing+1)^0,f,c
 12445  022E' D7FA               	bra	u7347
 12446  0230' D000               	nop2	
 12447  0232'                    
 12448                           ;DC_motors.c: 317:     INTCONbits.GIE = 1;
 12449  0232' 8EF2               	bsf	242,7,c	;volatile
 12450  0234' 0012               	return		;funcret
 12451  0236'                    __end_of_DCmotors_testing:
 12452                           	callstack 0
 12453                           
 12454 ;; *************** function _reverse *****************
 12455 ;; Defined at:
 12456 ;;		line 108 in file "DC_motors.c"
 12457 ;; Parameters:    Size  Location     Type
 12458 ;;  mL              2   25[COMRAM] PTR struct .
 12459 ;;		 -> main@motorL(9), 
 12460 ;;  mR              2   27[COMRAM] PTR struct .
 12461 ;;		 -> main@motorR(9), 
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;		None
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  1    wreg      void 
 12466 ;; Registers used:
 12467 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12473 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12475 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12476 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12477 ;;Total ram usage:        6 bytes
 12478 ;; Hardware stack levels used: 1
 12479 ;; Hardware stack levels required when called: 2
 12480 ;; This function calls:
 12481 ;;		_DCmotors_setPWM
 12482 ;; This function is called by:
 12483 ;;		_colourcards_readRGBC
 12484 ;;		_DCmotors_testing
 12485 ;; This function uses a non-reentrant model
 12486 ;;
 12487                           
 12488                           	psect	text58
 12489  0000'                    __ptext58:
 12490                           	callstack 0
 12491  0000'                    _reverse:
 12492                           	callstack 27
 12493  0000'                    
 12494                           ;DC_motors.c: 108: void reverse(DC_motor *mL, DC_motor *mR);DC_motors.c: 109: {;DC_motor
      +                          s.c: 111:     mL->direction = 0;
 12495  0000' EE20 F001          	lfsr	2,1
 12496  0004' 5000'              	movf	reverse@mL^0,w,c
 12497  0006' 26D9               	addwf	fsr2l,f,c
 12498  0008' 5000'              	movf	(reverse@mL+1)^0,w,c
 12499  000A' 22DA               	addwfc	fsr2h,f,c
 12500  000C' 0E00               	movlw	0
 12501  000E' 6EDF               	movwf	indf2,c
 12502                           
 12503                           ;DC_motors.c: 112:     mR->direction = 0;
 12504  0010' EE20 F001          	lfsr	2,1
 12505  0014' 5000'              	movf	reverse@mR^0,w,c
 12506  0016' 26D9               	addwf	fsr2l,f,c
 12507  0018' 5000'              	movf	(reverse@mR+1)^0,w,c
 12508  001A' 22DA               	addwfc	fsr2h,f,c
 12509  001C' 0E00               	movlw	0
 12510  001E' 6EDF               	movwf	indf2,c
 12511                           
 12512                           ;DC_motors.c: 115:     while((mL->power < 100) && (mR->power < 100)){
 12513  0020' EF00' F000'        	goto	l534
 12514  0024'                    l5390:
 12515                           
 12516                           ;DC_motors.c: 116:         mL->power += 1;
 12517  0024' C019' FFD9         	movff	reverse@mL,fsr2l
 12518  0028' C01A' FFDA         	movff	reverse@mL+1,fsr2h
 12519  002C' 2ADF               	incf	indf2,f,c
 12520                           
 12521                           ;DC_motors.c: 117:         mR->power += 1;
 12522  002E' C01B' FFD9         	movff	reverse@mR,fsr2l
 12523  0032' C01C' FFDA         	movff	reverse@mR+1,fsr2h
 12524  0036' 2ADF               	incf	indf2,f,c
 12525  0038'                    
 12526                           ;DC_motors.c: 119:         DCmotors_setPWM(mL);
 12527  0038' C019' F00E'        	movff	reverse@mL,DCmotors_setPWM@m
 12528  003C' C01A' F00F'        	movff	reverse@mL+1,DCmotors_setPWM@m+1
 12529  0040' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 12530  0044'                    
 12531                           ;DC_motors.c: 120:         DCmotors_setPWM(mR);
 12532  0044' C01B' F00E'        	movff	reverse@mR,DCmotors_setPWM@m
 12533  0048' C01C' F00F'        	movff	reverse@mR+1,DCmotors_setPWM@m+1
 12534  004C' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 12535  0050'                    
 12536                           ;DC_motors.c: 121:         _delay((unsigned long)((100)*(64000000/4000.0)));
 12537  0050' 0E09               	movlw	9
 12538  0052' 6E00'              	movwf	(??_reverse+1)^0,c
 12539  0054' 0E1E               	movlw	30
 12540  0056' 6E00'              	movwf	??_reverse^0,c
 12541  0058' 0EE4               	movlw	228
 12542  005A'                    u7357:
 12543  005A' 2EE8               	decfsz	wreg,f,c
 12544  005C' D7FE               	bra	u7357
 12545  005E' 2E00'              	decfsz	??_reverse^0,f,c
 12546  0060' D7FC               	bra	u7357
 12547  0062' 2E00'              	decfsz	(??_reverse+1)^0,f,c
 12548  0064' D7FA               	bra	u7357
 12549  0066' D000               	nop2	
 12550  0068'                    l534:
 12551                           
 12552                           ;DC_motors.c: 115:     while((mL->power < 100) && (mR->power < 100)){
 12553  0068' C019' FFD9         	movff	reverse@mL,fsr2l
 12554  006C' C01A' FFDA         	movff	reverse@mL+1,fsr2h
 12555  0070' 0E64               	movlw	100
 12556  0072' 60DF               	cpfslt	indf2,c
 12557  0074' EF00' F000'        	goto	u6501
 12558  0078' EF00' F000'        	goto	u6500
 12559  007C'                    u6501:
 12560  007C' EF00' F000'        	goto	l539
 12561  0080'                    u6500:
 12562  0080' C01B' FFD9         	movff	reverse@mR,fsr2l
 12563  0084' C01C' FFDA         	movff	reverse@mR+1,fsr2h
 12564  0088' 0E63               	movlw	99
 12565  008A' 64DF               	cpfsgt	indf2,c
 12566  008C' EF00' F000'        	goto	u6511
 12567  0090' EF00' F000'        	goto	u6510
 12568  0094'                    u6511:
 12569  0094' EF00' F000'        	goto	l5390
 12570  0098'                    u6510:
 12571  0098'                    l539:
 12572  0098' 0012               	return		;funcret
 12573  009A'                    __end_of_reverse:
 12574                           	callstack 0
 12575                           
 12576 ;; *************** function _forward *****************
 12577 ;; Defined at:
 12578 ;;		line 88 in file "DC_motors.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;  mL              2   25[COMRAM] PTR struct .
 12581 ;;		 -> main@motorL(9), 
 12582 ;;  mR              2   27[COMRAM] PTR struct .
 12583 ;;		 -> main@motorR(9), 
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;		None
 12586 ;; Return value:  Size  Location     Type
 12587 ;;                  1    wreg      void 
 12588 ;; Registers used:
 12589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12595 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12598 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12599 ;;Total ram usage:        6 bytes
 12600 ;; Hardware stack levels used: 1
 12601 ;; Hardware stack levels required when called: 2
 12602 ;; This function calls:
 12603 ;;		_DCmotors_setPWM
 12604 ;; This function is called by:
 12605 ;;		_main
 12606 ;;		_colourcards_readRGBC
 12607 ;;		_DCmotors_testing
 12608 ;; This function uses a non-reentrant model
 12609 ;;
 12610                           
 12611                           	psect	text59
 12612  0000'                    __ptext59:
 12613                           	callstack 0
 12614  0000'                    _forward:
 12615                           	callstack 28
 12616  0000'                    
 12617                           ;DC_motors.c: 88: void forward(DC_motor *mL, DC_motor *mR);DC_motors.c: 89: {;DC_motors.
      +                          c: 90:     mL->direction = 1;
 12618  0000' EE20 F001          	lfsr	2,1
 12619  0004' 5000'              	movf	forward@mL^0,w,c
 12620  0006' 26D9               	addwf	fsr2l,f,c
 12621  0008' 5000'              	movf	(forward@mL+1)^0,w,c
 12622  000A' 22DA               	addwfc	fsr2h,f,c
 12623  000C' 0E01               	movlw	1
 12624  000E' 6EDF               	movwf	indf2,c
 12625                           
 12626                           ;DC_motors.c: 91:     mR->direction = 1;
 12627  0010' EE20 F001          	lfsr	2,1
 12628  0014' 5000'              	movf	forward@mR^0,w,c
 12629  0016' 26D9               	addwf	fsr2l,f,c
 12630  0018' 5000'              	movf	(forward@mR+1)^0,w,c
 12631  001A' 22DA               	addwfc	fsr2h,f,c
 12632  001C' 0E01               	movlw	1
 12633  001E' 6EDF               	movwf	indf2,c
 12634                           
 12635                           ;DC_motors.c: 94:     while((mL->power < 100) && (mR->power < 100)){
 12636  0020' EF00' F000'        	goto	l526
 12637  0024'                    l5364:
 12638                           
 12639                           ;DC_motors.c: 95:         mL->power += 1;
 12640  0024' C019' FFD9         	movff	forward@mL,fsr2l
 12641  0028' C01A' FFDA         	movff	forward@mL+1,fsr2h
 12642  002C' 2ADF               	incf	indf2,f,c
 12643                           
 12644                           ;DC_motors.c: 96:         mR->power += 1;
 12645  002E' C01B' FFD9         	movff	forward@mR,fsr2l
 12646  0032' C01C' FFDA         	movff	forward@mR+1,fsr2h
 12647  0036' 2ADF               	incf	indf2,f,c
 12648  0038'                    
 12649                           ;DC_motors.c: 98:         DCmotors_setPWM(mL);
 12650  0038' C019' F00E'        	movff	forward@mL,DCmotors_setPWM@m
 12651  003C' C01A' F00F'        	movff	forward@mL+1,DCmotors_setPWM@m+1
 12652  0040' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 12653  0044'                    
 12654                           ;DC_motors.c: 99:         DCmotors_setPWM(mR);
 12655  0044' C01B' F00E'        	movff	forward@mR,DCmotors_setPWM@m
 12656  0048' C01C' F00F'        	movff	forward@mR+1,DCmotors_setPWM@m+1
 12657  004C' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 12658  0050'                    
 12659                           ;DC_motors.c: 100:         _delay((unsigned long)((100)*(64000000/4000.0)));
 12660  0050' 0E09               	movlw	9
 12661  0052' 6E00'              	movwf	(??_forward+1)^0,c
 12662  0054' 0E1E               	movlw	30
 12663  0056' 6E00'              	movwf	??_forward^0,c
 12664  0058' 0EE4               	movlw	228
 12665  005A'                    u7367:
 12666  005A' 2EE8               	decfsz	wreg,f,c
 12667  005C' D7FE               	bra	u7367
 12668  005E' 2E00'              	decfsz	??_forward^0,f,c
 12669  0060' D7FC               	bra	u7367
 12670  0062' 2E00'              	decfsz	(??_forward+1)^0,f,c
 12671  0064' D7FA               	bra	u7367
 12672  0066' D000               	nop2	
 12673  0068'                    l526:
 12674                           
 12675                           ;DC_motors.c: 94:     while((mL->power < 100) && (mR->power < 100)){
 12676  0068' C019' FFD9         	movff	forward@mL,fsr2l
 12677  006C' C01A' FFDA         	movff	forward@mL+1,fsr2h
 12678  0070' 0E64               	movlw	100
 12679  0072' 60DF               	cpfslt	indf2,c
 12680  0074' EF00' F000'        	goto	u6461
 12681  0078' EF00' F000'        	goto	u6460
 12682  007C'                    u6461:
 12683  007C' EF00' F000'        	goto	l531
 12684  0080'                    u6460:
 12685  0080' C01B' FFD9         	movff	forward@mR,fsr2l
 12686  0084' C01C' FFDA         	movff	forward@mR+1,fsr2h
 12687  0088' 0E63               	movlw	99
 12688  008A' 64DF               	cpfsgt	indf2,c
 12689  008C' EF00' F000'        	goto	u6471
 12690  0090' EF00' F000'        	goto	u6470
 12691  0094'                    u6471:
 12692  0094' EF00' F000'        	goto	l5364
 12693  0098'                    u6470:
 12694  0098'                    l531:
 12695  0098' 0012               	return		;funcret
 12696  009A'                    __end_of_forward:
 12697                           	callstack 0
 12698                           
 12699 ;; *************** function _DCmotors_init *****************
 12700 ;; Defined at:
 12701 ;;		line 10 in file "DC_motors.c"
 12702 ;; Parameters:    Size  Location     Type
 12703 ;;  PWMperiod       1    wreg     unsigned char 
 12704 ;; Auto vars:     Size  Location     Type
 12705 ;;  PWMperiod       1    0[COMRAM] unsigned char 
 12706 ;; Return value:  Size  Location     Type
 12707 ;;                  1    wreg      void 
 12708 ;; Registers used:
 12709 ;;		wreg, status,2, cstack
 12710 ;; Tracked objects:
 12711 ;;		On entry : 0/0
 12712 ;;		On exit  : 0/0
 12713 ;;		Unchanged: 0/0
 12714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12719 ;;Total ram usage:        1 bytes
 12720 ;; Hardware stack levels used: 1
 12721 ;; Hardware stack levels required when called: 1
 12722 ;; This function calls:
 12723 ;;		_buggyLEDs_init
 12724 ;;		_clicker2LEDs_init
 12725 ;;		_clicker2buttons_init
 12726 ;; This function is called by:
 12727 ;;		_main
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           	psect	text60
 12732  0000'                    __ptext60:
 12733                           	callstack 0
 12734  0000'                    _DCmotors_init:
 12735                           	callstack 29
 12736                           
 12737                           ;incstack = 0
 12738                           ;DCmotors_init@PWMperiod stored from wreg
 12739  0000' 6E00'              	movwf	DCmotors_init@PWMperiod^0,c
 12740  0002'                    
 12741                           ;DC_motors.c: 10: void DCmotors_init(unsigned char PWMperiod);DC_motors.c: 11: {;DC_moto
      +                          rs.c: 13:     T2CONbits.CKPS=0b100;
 12742  0002' 50BD               	movf	189,w,c	;volatile
 12743  0004' 0B8F               	andlw	-113
 12744  0006' 0940               	iorlw	64
 12745  0008' 6EBD               	movwf	189,c	;volatile
 12746                           
 12747                           ;DC_motors.c: 14:     T2HLTbits.MODE=0b00000;
 12748  000A' 0EE0               	movlw	-32
 12749  000C' 16BE               	andwf	190,f,c	;volatile
 12750                           
 12751                           ;DC_motors.c: 15:     T2CLKCONbits.CS=0b0001;
 12752  000E' 50BF               	movf	191,w,c	;volatile
 12753  0010' 0BF0               	andlw	-16
 12754  0012' 0901               	iorlw	1
 12755  0014' 6EBF               	movwf	191,c	;volatile
 12756  0016'                    
 12757                           ;DC_motors.c: 18:     T2PR=PWMperiod;
 12758  0016' C000' FFBC         	movff	DCmotors_init@PWMperiod,4028	;volatile
 12759  001A'                    
 12760                           ;DC_motors.c: 19:     T2CONbits.ON=1;
 12761  001A' 8EBD               	bsf	189,7,c	;volatile
 12762  001C'                    
 12763                           ;DC_motors.c: 22:     TRISEbits.TRISE2=0;
 12764  001C' 9485               	bcf	133,2,c	;volatile
 12765  001E'                    
 12766                           ;DC_motors.c: 23:     TRISEbits.TRISE4=0;
 12767  001E' 9885               	bcf	133,4,c	;volatile
 12768  0020'                    
 12769                           ;DC_motors.c: 24:     TRISCbits.TRISC7=0;
 12770  0020' 9E83               	bcf	131,7,c	;volatile
 12771  0022'                    
 12772                           ;DC_motors.c: 25:     TRISGbits.TRISG6=0;
 12773  0022' 9C87               	bcf	135,6,c	;volatile
 12774  0024'                    
 12775                           ;DC_motors.c: 27:     LATEbits.LATE2=0;
 12776  0024' 947D               	bcf	125,2,c	;volatile
 12777  0026'                    
 12778                           ;DC_motors.c: 28:     LATEbits.LATE4=0;
 12779  0026' 987D               	bcf	125,4,c	;volatile
 12780  0028'                    
 12781                           ;DC_motors.c: 29:     LATCbits.LATC7=0;
 12782  0028' 9E7B               	bcf	123,7,c	;volatile
 12783  002A'                    
 12784                           ;DC_motors.c: 30:     LATGbits.LATG6=0;
 12785  002A' 9C7F               	bcf	127,6,c	;volatile
 12786                           
 12787                           ;DC_motors.c: 32:     PWM6DCH=0;
 12788  002C' 0E00               	movlw	0
 12789  002E' 6EA3               	movwf	163,c	;volatile
 12790                           
 12791                           ;DC_motors.c: 33:     PWM7DCH=0;
 12792  0030' 0E00               	movlw	0
 12793  0032' 6EA0               	movwf	160,c	;volatile
 12794  0034'                    
 12795                           ;DC_motors.c: 35:     PWM6CONbits.EN = 1;
 12796  0034' 8EA4               	bsf	164,7,c	;volatile
 12797  0036'                    
 12798                           ;DC_motors.c: 36:     PWM7CONbits.EN = 1;
 12799  0036' 8EA1               	bsf	161,7,c	;volatile
 12800                           
 12801                           ;DC_motors.c: 38:     RE2PPS=0x0A;
 12802  0038' 0E0A               	movlw	10
 12803  003A' 010E               	movlb	14	; () banked
 12804  003C' 6F74               	movwf	116,b	;volatile
 12805                           
 12806                           ;DC_motors.c: 39:     RC7PPS=0x0B;
 12807  003E' 0E0B               	movlw	11
 12808  0040' 6F69               	movwf	105,b	;volatile
 12809  0042'                    
 12810                           ; BSR set to: 14
 12811                           ;DC_motors.c: 42:     clicker2buttons_init();
 12812  0042' EC00' F000'        	call	_clicker2buttons_init	;wreg free
 12813  0046'                    
 12814                           ;DC_motors.c: 43:     clicker2LEDs_init();
 12815  0046' EC00' F000'        	call	_clicker2LEDs_init	;wreg free
 12816  004A'                    
 12817                           ;DC_motors.c: 44:     buggyLEDs_init();
 12818  004A' EC00' F000'        	call	_buggyLEDs_init	;wreg free
 12819  004E' 0012               	return		;funcret
 12820  0050'                    __end_of_DCmotors_init:
 12821                           	callstack 0
 12822                           
 12823 ;; *************** function _clicker2buttons_init *****************
 12824 ;; Defined at:
 12825 ;;		line 7 in file "buttons_n_LEDs.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;		None
 12828 ;; Auto vars:     Size  Location     Type
 12829 ;;		None
 12830 ;; Return value:  Size  Location     Type
 12831 ;;                  1    wreg      void 
 12832 ;; Registers used:
 12833 ;;		None
 12834 ;; Tracked objects:
 12835 ;;		On entry : 0/0
 12836 ;;		On exit  : 0/0
 12837 ;;		Unchanged: 0/0
 12838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12843 ;;Total ram usage:        0 bytes
 12844 ;; Hardware stack levels used: 1
 12845 ;; This function calls:
 12846 ;;		Nothing
 12847 ;; This function is called by:
 12848 ;;		_DCmotors_init
 12849 ;; This function uses a non-reentrant model
 12850 ;;
 12851                           
 12852                           	psect	text61
 12853  0000'                    __ptext61:
 12854                           	callstack 0
 12855  0000'                    _clicker2buttons_init:
 12856                           	callstack 29
 12857  0000'                    
 12858                           ;buttons_n_LEDs.c: 10:     TRISFbits.TRISF2=1;
 12859  0000' 8486               	bsf	134,2,c	;volatile
 12860                           
 12861                           ;buttons_n_LEDs.c: 11:     TRISFbits.TRISF3=1;
 12862  0002' 8686               	bsf	134,3,c	;volatile
 12863                           
 12864                           ;buttons_n_LEDs.c: 12:     ANSELFbits.ANSELF2=0;
 12865  0004' 010E               	movlb	14	; () banked
 12866  0006' 95B4               	bcf	180,2,b	;volatile
 12867                           
 12868                           ;buttons_n_LEDs.c: 13:     ANSELFbits.ANSELF3=0;
 12869  0008' 97B4               	bcf	180,3,b	;volatile
 12870  000A'                    
 12871                           ; BSR set to: 14
 12872  000A' 0012               	return		;funcret
 12873  000C'                    __end_of_clicker2buttons_init:
 12874                           	callstack 0
 12875                           
 12876 ;; *************** function _clicker2LEDs_init *****************
 12877 ;; Defined at:
 12878 ;;		line 19 in file "buttons_n_LEDs.c"
 12879 ;; Parameters:    Size  Location     Type
 12880 ;;		None
 12881 ;; Auto vars:     Size  Location     Type
 12882 ;;		None
 12883 ;; Return value:  Size  Location     Type
 12884 ;;                  1    wreg      void 
 12885 ;; Registers used:
 12886 ;;		None
 12887 ;; Tracked objects:
 12888 ;;		On entry : 0/0
 12889 ;;		On exit  : 0/0
 12890 ;;		Unchanged: 0/0
 12891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12896 ;;Total ram usage:        0 bytes
 12897 ;; Hardware stack levels used: 1
 12898 ;; This function calls:
 12899 ;;		Nothing
 12900 ;; This function is called by:
 12901 ;;		_DCmotors_init
 12902 ;; This function uses a non-reentrant model
 12903 ;;
 12904                           
 12905                           	psect	text62
 12906  0000'                    __ptext62:
 12907                           	callstack 0
 12908  0000'                    _clicker2LEDs_init:
 12909                           	callstack 29
 12910  0000'                    
 12911                           ;buttons_n_LEDs.c: 21:     TRISDbits.TRISD7 = 0;
 12912  0000' 9E84               	bcf	132,7,c	;volatile
 12913                           
 12914                           ;buttons_n_LEDs.c: 22:     TRISHbits.TRISH3 = 0;
 12915  0002' 9688               	bcf	136,3,c	;volatile
 12916                           
 12917                           ;buttons_n_LEDs.c: 24:     LATDbits.LATD7 = 0;
 12918  0004' 9E7C               	bcf	124,7,c	;volatile
 12919                           
 12920                           ;buttons_n_LEDs.c: 25:     LATHbits.LATH3 = 0;
 12921  0006' 9680               	bcf	128,3,c	;volatile
 12922  0008' 0012               	return		;funcret
 12923  000A'                    __end_of_clicker2LEDs_init:
 12924                           	callstack 0
 12925                           
 12926 ;; *************** function _buggyLEDs_init *****************
 12927 ;; Defined at:
 12928 ;;		line 31 in file "buttons_n_LEDs.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;		None
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;		None
 12933 ;; Return value:  Size  Location     Type
 12934 ;;                  1    wreg      void 
 12935 ;; Registers used:
 12936 ;;		None
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12946 ;;Total ram usage:        0 bytes
 12947 ;; Hardware stack levels used: 1
 12948 ;; This function calls:
 12949 ;;		Nothing
 12950 ;; This function is called by:
 12951 ;;		_DCmotors_init
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           	psect	text63
 12956  0000'                    __ptext63:
 12957                           	callstack 0
 12958  0000'                    _buggyLEDs_init:
 12959                           	callstack 29
 12960  0000'                    
 12961                           ;buttons_n_LEDs.c: 33:     TRISHbits.TRISH1 = 0;
 12962  0000' 9288               	bcf	136,1,c	;volatile
 12963                           
 12964                           ;buttons_n_LEDs.c: 34:     TRISDbits.TRISD3 = 0;
 12965  0002' 9684               	bcf	132,3,c	;volatile
 12966                           
 12967                           ;buttons_n_LEDs.c: 35:     TRISDbits.TRISD4 = 0;
 12968  0004' 9884               	bcf	132,4,c	;volatile
 12969                           
 12970                           ;buttons_n_LEDs.c: 36:     TRISFbits.TRISF0 = 0;
 12971  0006' 9086               	bcf	134,0,c	;volatile
 12972                           
 12973                           ;buttons_n_LEDs.c: 37:     TRISHbits.TRISH0 = 0;
 12974  0008' 9088               	bcf	136,0,c	;volatile
 12975                           
 12976                           ;buttons_n_LEDs.c: 39:     LATHbits.LATH1 = 0;
 12977  000A' 9280               	bcf	128,1,c	;volatile
 12978                           
 12979                           ;buttons_n_LEDs.c: 40:     LATDbits.LATD3 = 0;
 12980  000C' 967C               	bcf	124,3,c	;volatile
 12981                           
 12982                           ;buttons_n_LEDs.c: 41:     LATDbits.LATD4 = 0;
 12983  000E' 987C               	bcf	124,4,c	;volatile
 12984                           
 12985                           ;buttons_n_LEDs.c: 42:     LATFbits.LATF0 = 0;
 12986  0010' 907E               	bcf	126,0,c	;volatile
 12987                           
 12988                           ;buttons_n_LEDs.c: 43:     LATHbits.LATH0 = 0;
 12989  0012' 9080               	bcf	128,0,c	;volatile
 12990  0014' 0012               	return		;funcret
 12991  0016'                    __end_of_buggyLEDs_init:
 12992                           	callstack 0
 12993                           
 12994 ;; *************** function _DCmotors_calibration *****************
 12995 ;; Defined at:
 12996 ;;		line 230 in file "DC_motors.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;  mL              2   39[COMRAM] PTR struct .
 12999 ;;		 -> main@motorL(9), 
 13000 ;;  mR              2   41[COMRAM] PTR struct .
 13001 ;;		 -> main@motorR(9), 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;		None
 13004 ;; Return value:  Size  Location     Type
 13005 ;;                  1    wreg      void 
 13006 ;; Registers used:
 13007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13008 ;; Tracked objects:
 13009 ;;		On entry : 0/0
 13010 ;;		On exit  : 0/0
 13011 ;;		Unchanged: 0/0
 13012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13013 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13016 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13017 ;;Total ram usage:        6 bytes
 13018 ;; Hardware stack levels used: 1
 13019 ;; Hardware stack levels required when called: 4
 13020 ;; This function calls:
 13021 ;;		_DCmotors_adjustval
 13022 ;;		_stop
 13023 ;;		_turnleft
 13024 ;;		_turnright
 13025 ;; This function is called by:
 13026 ;;		_main
 13027 ;; This function uses a non-reentrant model
 13028 ;;
 13029                           
 13030                           	psect	text64
 13031  0000'                    __ptext64:
 13032                           	callstack 0
 13033  0000'                    _DCmotors_calibration:
 13034                           	callstack 26
 13035  0000'                    l576:
 13036  0000' A48E               	btfss	142,2,c	;volatile
 13037  0002' EF00' F000'        	goto	u6771
 13038  0006' EF00' F000'        	goto	u6770
 13039  000A'                    u6771:
 13040  000A' EF00' F000'        	goto	l580
 13041  000E'                    u6770:
 13042  000E' B68E               	btfsc	142,3,c	;volatile
 13043  0010' EF00' F000'        	goto	u6781
 13044  0014' EF00' F000'        	goto	u6780
 13045  0018'                    u6781:
 13046  0018' EF00' F000'        	goto	l576
 13047  001C'                    u6780:
 13048  001C'                    l580:
 13049                           
 13050                           ;DC_motors.c: 233:     LATDbits.LATD3 = 1;
 13051  001C' 867C               	bsf	124,3,c	;volatile
 13052  001E'                    
 13053                           ;DC_motors.c: 234:     turnleft(mL, mR, 360);
 13054  001E' C027' F021'        	movff	DCmotors_calibration@mL,turnleft@mL
 13055  0022' C028' F022'        	movff	DCmotors_calibration@mL+1,turnleft@mL+1
 13056  0026' C029' F023'        	movff	DCmotors_calibration@mR,turnleft@mR
 13057  002A' C02A' F024'        	movff	DCmotors_calibration@mR+1,turnleft@mR+1
 13058  002E' 0E01               	movlw	1
 13059  0030' 6E00'              	movwf	(turnleft@deg+1)^0,c
 13060  0032' 0E68               	movlw	104
 13061  0034' 6E00'              	movwf	turnleft@deg^0,c
 13062  0036' EC00' F000'        	call	_turnleft	;wreg free
 13063                           
 13064                           ;DC_motors.c: 235:     stop(mL, mR);
 13065  003A' C027' F019'        	movff	DCmotors_calibration@mL,stop@mL
 13066  003E' C028' F01A'        	movff	DCmotors_calibration@mL+1,stop@mL+1
 13067  0042' C029' F01B'        	movff	DCmotors_calibration@mR,stop@mR
 13068  0046' C02A' F01C'        	movff	DCmotors_calibration@mR+1,stop@mR+1
 13069  004A' EC00' F000'        	call	_stop	;wreg free
 13070  004E'                    l581:
 13071  004E' A48E               	btfss	142,2,c	;volatile
 13072  0050' EF00' F000'        	goto	u6791
 13073  0054' EF00' F000'        	goto	u6790
 13074  0058'                    u6791:
 13075  0058' EF00' F000'        	goto	l5656
 13076  005C'                    u6790:
 13077  005C' B68E               	btfsc	142,3,c	;volatile
 13078  005E' EF00' F000'        	goto	u6801
 13079  0062' EF00' F000'        	goto	u6800
 13080  0066'                    u6801:
 13081  0066' EF00' F000'        	goto	l581
 13082  006A'                    u6800:
 13083  006A'                    l5656:
 13084                           
 13085                           ;DC_motors.c: 238:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 13086  006A' 0E52               	movlw	82
 13087  006C' 6E00'              	movwf	(??_DCmotors_calibration+1)^0,c
 13088  006E' 0E2B               	movlw	43
 13089  0070' 6E00'              	movwf	??_DCmotors_calibration^0,c
 13090  0072' 0E00               	movlw	0
 13091  0074'                    u7377:
 13092  0074' 2EE8               	decfsz	wreg,f,c
 13093  0076' D7FE               	bra	u7377
 13094  0078' 2E00'              	decfsz	??_DCmotors_calibration^0,f,c
 13095  007A' D7FC               	bra	u7377
 13096  007C' 2E00'              	decfsz	(??_DCmotors_calibration+1)^0,f,c
 13097  007E' D7FA               	bra	u7377
 13098  0080' D000               	nop2	
 13099  0082'                    
 13100                           ;DC_motors.c: 239:     DCmotors_adjustval();
 13101  0082' EC00' F000'        	call	_DCmotors_adjustval	;wreg free
 13102  0086'                    
 13103                           ;DC_motors.c: 240:     LATDbits.LATD3 = 0;
 13104  0086' 967C               	bcf	124,3,c	;volatile
 13105  0088'                    l586:
 13106  0088' A48E               	btfss	142,2,c	;volatile
 13107  008A' EF00' F000'        	goto	u6811
 13108  008E' EF00' F000'        	goto	u6810
 13109  0092'                    u6811:
 13110  0092' EF00' F000'        	goto	l590
 13111  0096'                    u6810:
 13112  0096' B68E               	btfsc	142,3,c	;volatile
 13113  0098' EF00' F000'        	goto	u6821
 13114  009C' EF00' F000'        	goto	u6820
 13115  00A0'                    u6821:
 13116  00A0' EF00' F000'        	goto	l586
 13117  00A4'                    u6820:
 13118  00A4'                    l590:
 13119                           
 13120                           ;DC_motors.c: 243:     LATDbits.LATD3 = 1;
 13121  00A4' 867C               	bsf	124,3,c	;volatile
 13122  00A6'                    
 13123                           ;DC_motors.c: 244:     turnright(mL, mR, 360);
 13124  00A6' C027' F021'        	movff	DCmotors_calibration@mL,turnright@mL
 13125  00AA' C028' F022'        	movff	DCmotors_calibration@mL+1,turnright@mL+1
 13126  00AE' C029' F023'        	movff	DCmotors_calibration@mR,turnright@mR
 13127  00B2' C02A' F024'        	movff	DCmotors_calibration@mR+1,turnright@mR+1
 13128  00B6' 0E01               	movlw	1
 13129  00B8' 6E00'              	movwf	(turnright@deg+1)^0,c
 13130  00BA' 0E68               	movlw	104
 13131  00BC' 6E00'              	movwf	turnright@deg^0,c
 13132  00BE' EC00' F000'        	call	_turnright	;wreg free
 13133                           
 13134                           ;DC_motors.c: 245:     stop(mL, mR);
 13135  00C2' C027' F019'        	movff	DCmotors_calibration@mL,stop@mL
 13136  00C6' C028' F01A'        	movff	DCmotors_calibration@mL+1,stop@mL+1
 13137  00CA' C029' F01B'        	movff	DCmotors_calibration@mR,stop@mR
 13138  00CE' C02A' F01C'        	movff	DCmotors_calibration@mR+1,stop@mR+1
 13139  00D2' EC00' F000'        	call	_stop	;wreg free
 13140  00D6'                    l591:
 13141  00D6' A48E               	btfss	142,2,c	;volatile
 13142  00D8' EF00' F000'        	goto	u6831
 13143  00DC' EF00' F000'        	goto	u6830
 13144  00E0'                    u6831:
 13145  00E0' EF00' F000'        	goto	l5668
 13146  00E4'                    u6830:
 13147  00E4' B68E               	btfsc	142,3,c	;volatile
 13148  00E6' EF00' F000'        	goto	u6841
 13149  00EA' EF00' F000'        	goto	u6840
 13150  00EE'                    u6841:
 13151  00EE' EF00' F000'        	goto	l591
 13152  00F2'                    u6840:
 13153  00F2'                    l5668:
 13154                           
 13155                           ;DC_motors.c: 248:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 13156  00F2' 0E52               	movlw	82
 13157  00F4' 6E00'              	movwf	(??_DCmotors_calibration+1)^0,c
 13158  00F6' 0E2B               	movlw	43
 13159  00F8' 6E00'              	movwf	??_DCmotors_calibration^0,c
 13160  00FA' 0E00               	movlw	0
 13161  00FC'                    u7387:
 13162  00FC' 2EE8               	decfsz	wreg,f,c
 13163  00FE' D7FE               	bra	u7387
 13164  0100' 2E00'              	decfsz	??_DCmotors_calibration^0,f,c
 13165  0102' D7FC               	bra	u7387
 13166  0104' 2E00'              	decfsz	(??_DCmotors_calibration+1)^0,f,c
 13167  0106' D7FA               	bra	u7387
 13168  0108' D000               	nop2	
 13169  010A'                    
 13170                           ;DC_motors.c: 249:     DCmotors_adjustval();
 13171  010A' EC00' F000'        	call	_DCmotors_adjustval	;wreg free
 13172  010E'                    
 13173                           ;DC_motors.c: 250:     LATDbits.LATD3 = 0;
 13174  010E' 967C               	bcf	124,3,c	;volatile
 13175  0110' 0012               	return		;funcret
 13176  0112'                    __end_of_DCmotors_calibration:
 13177                           	callstack 0
 13178                           
 13179 ;; *************** function _turnright *****************
 13180 ;; Defined at:
 13181 ;;		line 218 in file "DC_motors.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;  mL              2   33[COMRAM] PTR struct .
 13184 ;;		 -> main@motorL(9), 
 13185 ;;  mR              2   35[COMRAM] PTR struct .
 13186 ;;		 -> main@motorR(9), 
 13187 ;;  deg             2   37[COMRAM] unsigned int 
 13188 ;; Auto vars:     Size  Location     Type
 13189 ;;		None
 13190 ;; Return value:  Size  Location     Type
 13191 ;;                  1    wreg      void 
 13192 ;; Registers used:
 13193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13194 ;; Tracked objects:
 13195 ;;		On entry : 0/0
 13196 ;;		On exit  : 0/0
 13197 ;;		Unchanged: 0/0
 13198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13199 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13202 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13203 ;;Total ram usage:        6 bytes
 13204 ;; Hardware stack levels used: 1
 13205 ;; Hardware stack levels required when called: 3
 13206 ;; This function calls:
 13207 ;;		_left
 13208 ;;		_right
 13209 ;; This function is called by:
 13210 ;;		_colourcards_readRGBC
 13211 ;;		_DCmotors_calibration
 13212 ;;		_DCmotors_testing
 13213 ;; This function uses a non-reentrant model
 13214 ;;
 13215                           
 13216                           	psect	text65
 13217  0000'                    __ptext65:
 13218                           	callstack 0
 13219  0000'                    _turnright:
 13220                           	callstack 26
 13221  0000'                    
 13222                           ;DC_motors.c: 218: void turnright(DC_motor *mL, DC_motor *mR, unsigned int deg);DC_motor
      +                          s.c: 219: {;DC_motors.c: 220:     if (returnhome_flag==0) {
 13223  0000' 0100               	movlb	0	; () banked
 13224  0002' 5100'              	movf	_returnhome_flag& (0+255),w,b	;volatile
 13225  0004' A4D8               	btfss	status,2,c
 13226  0006' EF00' F000'        	goto	u6481
 13227  000A' EF00' F000'        	goto	u6480
 13228  000E'                    u6481:
 13229  000E' EF00' F000'        	goto	l5380
 13230  0012'                    u6480:
 13231  0012'                    
 13232                           ; BSR set to: 0
 13233                           ;DC_motors.c: 221:         right(mL, mR, deg);
 13234  0012' C021' F019'        	movff	turnright@mL,right@mL
 13235  0016' C022' F01A'        	movff	turnright@mL+1,right@mL+1
 13236  001A' C023' F01B'        	movff	turnright@mR,right@mR
 13237  001E' C024' F01C'        	movff	turnright@mR+1,right@mR+1
 13238  0022' C025' F01D'        	movff	turnright@deg,right@deg
 13239  0026' C026' F01E'        	movff	turnright@deg+1,right@deg+1
 13240  002A' EC00' F000'        	call	_right	;wreg free
 13241                           
 13242                           ;DC_motors.c: 222:     } else {
 13243  002E' EF00' F000'        	goto	l573
 13244  0032'                    l5380:
 13245                           
 13246                           ; BSR set to: 0
 13247                           ;DC_motors.c: 223:         left(mL, mR, deg);
 13248  0032' C021' F019'        	movff	turnright@mL,left@mL
 13249  0036' C022' F01A'        	movff	turnright@mL+1,left@mL+1
 13250  003A' C023' F01B'        	movff	turnright@mR,left@mR
 13251  003E' C024' F01C'        	movff	turnright@mR+1,left@mR+1
 13252  0042' C025' F01D'        	movff	turnright@deg,left@deg
 13253  0046' C026' F01E'        	movff	turnright@deg+1,left@deg+1
 13254  004A' EC00' F000'        	call	_left	;wreg free
 13255  004E'                    l573:
 13256  004E' 0012               	return		;funcret
 13257  0050'                    __end_of_turnright:
 13258                           	callstack 0
 13259                           
 13260 ;; *************** function _turnleft *****************
 13261 ;; Defined at:
 13262 ;;		line 205 in file "DC_motors.c"
 13263 ;; Parameters:    Size  Location     Type
 13264 ;;  mL              2   33[COMRAM] PTR struct .
 13265 ;;		 -> main@motorL(9), 
 13266 ;;  mR              2   35[COMRAM] PTR struct .
 13267 ;;		 -> main@motorR(9), 
 13268 ;;  deg             2   37[COMRAM] unsigned int 
 13269 ;; Auto vars:     Size  Location     Type
 13270 ;;		None
 13271 ;; Return value:  Size  Location     Type
 13272 ;;                  1    wreg      void 
 13273 ;; Registers used:
 13274 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13275 ;; Tracked objects:
 13276 ;;		On entry : 0/0
 13277 ;;		On exit  : 0/0
 13278 ;;		Unchanged: 0/0
 13279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13280 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13283 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13284 ;;Total ram usage:        6 bytes
 13285 ;; Hardware stack levels used: 1
 13286 ;; Hardware stack levels required when called: 3
 13287 ;; This function calls:
 13288 ;;		_left
 13289 ;;		_right
 13290 ;; This function is called by:
 13291 ;;		_colourcards_readRGBC
 13292 ;;		_DCmotors_calibration
 13293 ;;		_DCmotors_testing
 13294 ;; This function uses a non-reentrant model
 13295 ;;
 13296                           
 13297                           	psect	text66
 13298  0000'                    __ptext66:
 13299                           	callstack 0
 13300  0000'                    _turnleft:
 13301                           	callstack 26
 13302  0000'                    
 13303                           ;DC_motors.c: 205: void turnleft(DC_motor *mL, DC_motor *mR, unsigned int deg);DC_motors
      +                          .c: 206: {;DC_motors.c: 207:     if (returnhome_flag==0) {
 13304  0000' 0100               	movlb	0	; () banked
 13305  0002' 5100'              	movf	_returnhome_flag& (0+255),w,b	;volatile
 13306  0004' A4D8               	btfss	status,2,c
 13307  0006' EF00' F000'        	goto	u6491
 13308  000A' EF00' F000'        	goto	u6490
 13309  000E'                    u6491:
 13310  000E' EF00' F000'        	goto	l5386
 13311  0012'                    u6490:
 13312  0012'                    
 13313                           ; BSR set to: 0
 13314                           ;DC_motors.c: 208:         left(mL, mR, deg);
 13315  0012' C021' F019'        	movff	turnleft@mL,left@mL
 13316  0016' C022' F01A'        	movff	turnleft@mL+1,left@mL+1
 13317  001A' C023' F01B'        	movff	turnleft@mR,left@mR
 13318  001E' C024' F01C'        	movff	turnleft@mR+1,left@mR+1
 13319  0022' C025' F01D'        	movff	turnleft@deg,left@deg
 13320  0026' C026' F01E'        	movff	turnleft@deg+1,left@deg+1
 13321  002A' EC00' F000'        	call	_left	;wreg free
 13322                           
 13323                           ;DC_motors.c: 209:     } else {
 13324  002E' EF00' F000'        	goto	l568
 13325  0032'                    l5386:
 13326                           
 13327                           ; BSR set to: 0
 13328                           ;DC_motors.c: 210:         right(mL, mR, deg);
 13329  0032' C021' F019'        	movff	turnleft@mL,right@mL
 13330  0036' C022' F01A'        	movff	turnleft@mL+1,right@mL+1
 13331  003A' C023' F01B'        	movff	turnleft@mR,right@mR
 13332  003E' C024' F01C'        	movff	turnleft@mR+1,right@mR+1
 13333  0042' C025' F01D'        	movff	turnleft@deg,right@deg
 13334  0046' C026' F01E'        	movff	turnleft@deg+1,right@deg+1
 13335  004A' EC00' F000'        	call	_right	;wreg free
 13336  004E'                    l568:
 13337  004E' 0012               	return		;funcret
 13338  0050'                    __end_of_turnleft:
 13339                           	callstack 0
 13340                           
 13341 ;; *************** function _right *****************
 13342 ;; Defined at:
 13343 ;;		line 177 in file "DC_motors.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;  mL              2   25[COMRAM] PTR struct .
 13346 ;;		 -> main@motorL(9), 
 13347 ;;  mR              2   27[COMRAM] PTR struct .
 13348 ;;		 -> main@motorR(9), 
 13349 ;;  deg             2   29[COMRAM] unsigned int 
 13350 ;; Auto vars:     Size  Location     Type
 13351 ;;		None
 13352 ;; Return value:  Size  Location     Type
 13353 ;;                  1    wreg      void 
 13354 ;; Registers used:
 13355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13356 ;; Tracked objects:
 13357 ;;		On entry : 0/0
 13358 ;;		On exit  : 0/0
 13359 ;;		Unchanged: 0/0
 13360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13361 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13363 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13364 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13365 ;;Total ram usage:        8 bytes
 13366 ;; Hardware stack levels used: 1
 13367 ;; Hardware stack levels required when called: 2
 13368 ;; This function calls:
 13369 ;;		_DCmotors_setPWM
 13370 ;; This function is called by:
 13371 ;;		_turnleft
 13372 ;;		_turnright
 13373 ;; This function uses a non-reentrant model
 13374 ;;
 13375                           
 13376                           	psect	text67
 13377  0000'                    __ptext67:
 13378                           	callstack 0
 13379  0000'                    _right:
 13380                           	callstack 26
 13381  0000'                    
 13382                           ;DC_motors.c: 177: void right(DC_motor *mL, DC_motor *mR, unsigned int deg);DC_motors.c:
      +                           178: {;DC_motors.c: 180:     mL->direction = 1;
 13383  0000' EE20 F001          	lfsr	2,1
 13384  0004' 5000'              	movf	right@mL^0,w,c
 13385  0006' 26D9               	addwf	fsr2l,f,c
 13386  0008' 5000'              	movf	(right@mL+1)^0,w,c
 13387  000A' 22DA               	addwfc	fsr2h,f,c
 13388  000C' 0E01               	movlw	1
 13389  000E' 6EDF               	movwf	indf2,c
 13390                           
 13391                           ;DC_motors.c: 181:     mR->direction = 0;
 13392  0010' EE20 F001          	lfsr	2,1
 13393  0014' 5000'              	movf	right@mR^0,w,c
 13394  0016' 26D9               	addwf	fsr2l,f,c
 13395  0018' 5000'              	movf	(right@mR+1)^0,w,c
 13396  001A' 22DA               	addwfc	fsr2h,f,c
 13397  001C' 0E00               	movlw	0
 13398  001E' 6EDF               	movwf	indf2,c
 13399                           
 13400                           ;DC_motors.c: 184:     while((mL->power < DCmotors_upper) || (mR->power < DCmotors_lower
      +                          )){
 13401  0020' EF00' F000'        	goto	l558
 13402  0024'                    l5336:
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;DC_motors.c: 186:         LATHbits.LATH0 = !LATHbits.LATH0;
 13406  0024' A080               	btfss	128,0,c	;volatile
 13407  0026' EF00' F000'        	goto	u6391
 13408  002A' EF00' F000'        	goto	u6390
 13409  002E'                    u6391:
 13410  002E' 6A00'              	clrf	??_right^0,c
 13411  0030' 2A00'              	incf	??_right^0,f,c
 13412  0032' EF00' F000'        	goto	u6408
 13413  0036'                    u6390:
 13414  0036' 6A00'              	clrf	??_right^0,c
 13415  0038'                    u6408:
 13416  0038' 5080               	movf	128,w,c	;volatile
 13417  003A' 1800'              	xorwf	??_right^0,w,c
 13418  003C' 0BFE               	andlw	-2
 13419  003E' 1800'              	xorwf	??_right^0,w,c
 13420  0040' 6E80               	movwf	128,c	;volatile
 13421  0042'                    
 13422                           ;DC_motors.c: 189:         if (mL->power < DCmotors_upper) {mL->power += 1;}
 13423  0042' C019' FFD9         	movff	right@mL,fsr2l
 13424  0046' C01A' FFDA         	movff	right@mL+1,fsr2h
 13425  004A' 0100               	movlb	0	; () banked
 13426  004C' 5100'              	movf	_DCmotors_upper& (0+255),w,b	;volatile
 13427  004E' 5CDE               	subwf	postinc2,w,c
 13428  0050' B0D8               	btfsc	status,0,c
 13429  0052' EF00' F000'        	goto	u6411
 13430  0056' EF00' F000'        	goto	u6410
 13431  005A'                    u6411:
 13432  005A' EF00' F000'        	goto	l5342
 13433  005E'                    u6410:
 13434  005E'                    
 13435                           ; BSR set to: 0
 13436  005E' C019' FFD9         	movff	right@mL,fsr2l
 13437  0062' C01A' FFDA         	movff	right@mL+1,fsr2h
 13438  0066' 2ADF               	incf	indf2,f,c
 13439  0068'                    l5342:
 13440                           
 13441                           ; BSR set to: 0
 13442                           ;DC_motors.c: 190:         if (mR->power < DCmotors_lower) {mR->power += 1;}
 13443  0068' C01B' FFD9         	movff	right@mR,fsr2l
 13444  006C' C01C' FFDA         	movff	right@mR+1,fsr2h
 13445  0070' 5100'              	movf	_DCmotors_lower& (0+255),w,b	;volatile
 13446  0072' 5CDE               	subwf	postinc2,w,c
 13447  0074' B0D8               	btfsc	status,0,c
 13448  0076' EF00' F000'        	goto	u6421
 13449  007A' EF00' F000'        	goto	u6420
 13450  007E'                    u6421:
 13451  007E' EF00' F000'        	goto	l5346
 13452  0082'                    u6420:
 13453  0082'                    
 13454                           ; BSR set to: 0
 13455  0082' C01B' FFD9         	movff	right@mR,fsr2l
 13456  0086' C01C' FFDA         	movff	right@mR+1,fsr2h
 13457  008A' 2ADF               	incf	indf2,f,c
 13458  008C'                    l5346:
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;DC_motors.c: 193:         DCmotors_setPWM(mL);
 13462  008C' C019' F00E'        	movff	right@mL,DCmotors_setPWM@m
 13463  0090' C01A' F00F'        	movff	right@mL+1,DCmotors_setPWM@m+1
 13464  0094' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 13465  0098'                    
 13466                           ;DC_motors.c: 194:         DCmotors_setPWM(mR);
 13467  0098' C01B' F00E'        	movff	right@mR,DCmotors_setPWM@m
 13468  009C' C01C' F00F'        	movff	right@mR+1,DCmotors_setPWM@m+1
 13469  00A0' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 13470  00A4'                    
 13471                           ;DC_motors.c: 195:         _delay((unsigned long)((100)*(64000000/4000.0)));
 13472  00A4' 0E09               	movlw	9
 13473  00A6' 6E00'              	movwf	(??_right+1)^0,c
 13474  00A8' 0E1E               	movlw	30
 13475  00AA' 6E00'              	movwf	??_right^0,c
 13476  00AC' 0EE4               	movlw	228
 13477  00AE'                    u7397:
 13478  00AE' 2EE8               	decfsz	wreg,f,c
 13479  00B0' D7FE               	bra	u7397
 13480  00B2' 2E00'              	decfsz	??_right^0,f,c
 13481  00B4' D7FC               	bra	u7397
 13482  00B6' 2E00'              	decfsz	(??_right+1)^0,f,c
 13483  00B8' D7FA               	bra	u7397
 13484  00BA' D000               	nop2	
 13485  00BC'                    l558:
 13486                           
 13487                           ;DC_motors.c: 184:     while((mL->power < DCmotors_upper) || (mR->power < DCmotors_lower
      +                          )){
 13488  00BC' C019' FFD9         	movff	right@mL,fsr2l
 13489  00C0' C01A' FFDA         	movff	right@mL+1,fsr2h
 13490  00C4' 0100               	movlb	0	; () banked
 13491  00C6' 5100'              	movf	_DCmotors_upper& (0+255),w,b	;volatile
 13492  00C8' 5CDE               	subwf	postinc2,w,c
 13493  00CA' A0D8               	btfss	status,0,c
 13494  00CC' EF00' F000'        	goto	u6431
 13495  00D0' EF00' F000'        	goto	u6430
 13496  00D4'                    u6431:
 13497  00D4' EF00' F000'        	goto	l5336
 13498  00D8'                    u6430:
 13499  00D8'                    
 13500                           ; BSR set to: 0
 13501  00D8' C01B' FFD9         	movff	right@mR,fsr2l
 13502  00DC' C01C' FFDA         	movff	right@mR+1,fsr2h
 13503  00E0' 5100'              	movf	_DCmotors_lower& (0+255),w,b	;volatile
 13504  00E2' 5CDE               	subwf	postinc2,w,c
 13505  00E4' A0D8               	btfss	status,0,c
 13506  00E6' EF00' F000'        	goto	u6441
 13507  00EA' EF00' F000'        	goto	u6440
 13508  00EE'                    u6441:
 13509  00EE' EF00' F000'        	goto	l5336
 13510  00F2'                    u6440:
 13511  00F2'                    
 13512                           ; BSR set to: 0
 13513                           ;DC_motors.c: 198:     LATHbits.LATH0 = 0;
 13514  00F2' 9080               	bcf	128,0,c	;volatile
 13515  00F4'                    
 13516                           ; BSR set to: 0
 13517  00F4' 0012               	return		;funcret
 13518  00F6'                    __end_of_right:
 13519                           	callstack 0
 13520                           
 13521 ;; *************** function _left *****************
 13522 ;; Defined at:
 13523 ;;		line 150 in file "DC_motors.c"
 13524 ;; Parameters:    Size  Location     Type
 13525 ;;  mL              2   25[COMRAM] PTR struct .
 13526 ;;		 -> main@motorL(9), 
 13527 ;;  mR              2   27[COMRAM] PTR struct .
 13528 ;;		 -> main@motorR(9), 
 13529 ;;  deg             2   29[COMRAM] unsigned int 
 13530 ;; Auto vars:     Size  Location     Type
 13531 ;;		None
 13532 ;; Return value:  Size  Location     Type
 13533 ;;                  1    wreg      void 
 13534 ;; Registers used:
 13535 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13536 ;; Tracked objects:
 13537 ;;		On entry : 0/0
 13538 ;;		On exit  : 0/0
 13539 ;;		Unchanged: 0/0
 13540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13541 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13544 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13545 ;;Total ram usage:        8 bytes
 13546 ;; Hardware stack levels used: 1
 13547 ;; Hardware stack levels required when called: 2
 13548 ;; This function calls:
 13549 ;;		_DCmotors_setPWM
 13550 ;; This function is called by:
 13551 ;;		_turnleft
 13552 ;;		_turnright
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           	psect	text68
 13557  0000'                    __ptext68:
 13558                           	callstack 0
 13559  0000'                    _left:
 13560                           	callstack 26
 13561  0000'                    
 13562                           ;DC_motors.c: 150: void left(DC_motor *mL, DC_motor *mR, unsigned int deg);DC_motors.c: 
      +                          151: {;DC_motors.c: 153:     mL->direction = 0;
 13563  0000' EE20 F001          	lfsr	2,1
 13564  0004' 5000'              	movf	left@mL^0,w,c
 13565  0006' 26D9               	addwf	fsr2l,f,c
 13566  0008' 5000'              	movf	(left@mL+1)^0,w,c
 13567  000A' 22DA               	addwfc	fsr2h,f,c
 13568  000C' 0E00               	movlw	0
 13569  000E' 6EDF               	movwf	indf2,c
 13570                           
 13571                           ;DC_motors.c: 154:     mR->direction = 1;
 13572  0010' EE20 F001          	lfsr	2,1
 13573  0014' 5000'              	movf	left@mR^0,w,c
 13574  0016' 26D9               	addwf	fsr2l,f,c
 13575  0018' 5000'              	movf	(left@mR+1)^0,w,c
 13576  001A' 22DA               	addwfc	fsr2h,f,c
 13577  001C' 0E01               	movlw	1
 13578  001E' 6EDF               	movwf	indf2,c
 13579                           
 13580                           ;DC_motors.c: 157:     while((mL->power < DCmotors_lower) || (mR->power < DCmotors_upper
      +                          )){
 13581  0020' EF00' F000'        	goto	l550
 13582  0024'                    l5316:
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;DC_motors.c: 159:         LATFbits.LATF0 = !LATFbits.LATF0;
 13586  0024' A07E               	btfss	126,0,c	;volatile
 13587  0026' EF00' F000'        	goto	u6331
 13588  002A' EF00' F000'        	goto	u6330
 13589  002E'                    u6331:
 13590  002E' 6A00'              	clrf	??_left^0,c
 13591  0030' 2A00'              	incf	??_left^0,f,c
 13592  0032' EF00' F000'        	goto	u6348
 13593  0036'                    u6330:
 13594  0036' 6A00'              	clrf	??_left^0,c
 13595  0038'                    u6348:
 13596  0038' 507E               	movf	126,w,c	;volatile
 13597  003A' 1800'              	xorwf	??_left^0,w,c
 13598  003C' 0BFE               	andlw	-2
 13599  003E' 1800'              	xorwf	??_left^0,w,c
 13600  0040' 6E7E               	movwf	126,c	;volatile
 13601  0042'                    
 13602                           ;DC_motors.c: 162:         if (mL->power < DCmotors_lower) {mL->power += 1;}
 13603  0042' C019' FFD9         	movff	left@mL,fsr2l
 13604  0046' C01A' FFDA         	movff	left@mL+1,fsr2h
 13605  004A' 0100               	movlb	0	; () banked
 13606  004C' 5100'              	movf	_DCmotors_lower& (0+255),w,b	;volatile
 13607  004E' 5CDE               	subwf	postinc2,w,c
 13608  0050' B0D8               	btfsc	status,0,c
 13609  0052' EF00' F000'        	goto	u6351
 13610  0056' EF00' F000'        	goto	u6350
 13611  005A'                    u6351:
 13612  005A' EF00' F000'        	goto	l5322
 13613  005E'                    u6350:
 13614  005E'                    
 13615                           ; BSR set to: 0
 13616  005E' C019' FFD9         	movff	left@mL,fsr2l
 13617  0062' C01A' FFDA         	movff	left@mL+1,fsr2h
 13618  0066' 2ADF               	incf	indf2,f,c
 13619  0068'                    l5322:
 13620                           
 13621                           ; BSR set to: 0
 13622                           ;DC_motors.c: 163:         if (mR->power < DCmotors_upper) {mR->power += 1;}
 13623  0068' C01B' FFD9         	movff	left@mR,fsr2l
 13624  006C' C01C' FFDA         	movff	left@mR+1,fsr2h
 13625  0070' 5100'              	movf	_DCmotors_upper& (0+255),w,b	;volatile
 13626  0072' 5CDE               	subwf	postinc2,w,c
 13627  0074' B0D8               	btfsc	status,0,c
 13628  0076' EF00' F000'        	goto	u6361
 13629  007A' EF00' F000'        	goto	u6360
 13630  007E'                    u6361:
 13631  007E' EF00' F000'        	goto	l5326
 13632  0082'                    u6360:
 13633  0082'                    
 13634                           ; BSR set to: 0
 13635  0082' C01B' FFD9         	movff	left@mR,fsr2l
 13636  0086' C01C' FFDA         	movff	left@mR+1,fsr2h
 13637  008A' 2ADF               	incf	indf2,f,c
 13638  008C'                    l5326:
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;DC_motors.c: 166:         DCmotors_setPWM(mL);
 13642  008C' C019' F00E'        	movff	left@mL,DCmotors_setPWM@m
 13643  0090' C01A' F00F'        	movff	left@mL+1,DCmotors_setPWM@m+1
 13644  0094' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 13645  0098'                    
 13646                           ;DC_motors.c: 167:         DCmotors_setPWM(mR);
 13647  0098' C01B' F00E'        	movff	left@mR,DCmotors_setPWM@m
 13648  009C' C01C' F00F'        	movff	left@mR+1,DCmotors_setPWM@m+1
 13649  00A0' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 13650  00A4'                    
 13651                           ;DC_motors.c: 168:         _delay((unsigned long)((100)*(64000000/4000.0)));
 13652  00A4' 0E09               	movlw	9
 13653  00A6' 6E00'              	movwf	(??_left+1)^0,c
 13654  00A8' 0E1E               	movlw	30
 13655  00AA' 6E00'              	movwf	??_left^0,c
 13656  00AC' 0EE4               	movlw	228
 13657  00AE'                    u7407:
 13658  00AE' 2EE8               	decfsz	wreg,f,c
 13659  00B0' D7FE               	bra	u7407
 13660  00B2' 2E00'              	decfsz	??_left^0,f,c
 13661  00B4' D7FC               	bra	u7407
 13662  00B6' 2E00'              	decfsz	(??_left+1)^0,f,c
 13663  00B8' D7FA               	bra	u7407
 13664  00BA' D000               	nop2	
 13665  00BC'                    l550:
 13666                           
 13667                           ;DC_motors.c: 157:     while((mL->power < DCmotors_lower) || (mR->power < DCmotors_upper
      +                          )){
 13668  00BC' C019' FFD9         	movff	left@mL,fsr2l
 13669  00C0' C01A' FFDA         	movff	left@mL+1,fsr2h
 13670  00C4' 0100               	movlb	0	; () banked
 13671  00C6' 5100'              	movf	_DCmotors_lower& (0+255),w,b	;volatile
 13672  00C8' 5CDE               	subwf	postinc2,w,c
 13673  00CA' A0D8               	btfss	status,0,c
 13674  00CC' EF00' F000'        	goto	u6371
 13675  00D0' EF00' F000'        	goto	u6370
 13676  00D4'                    u6371:
 13677  00D4' EF00' F000'        	goto	l5316
 13678  00D8'                    u6370:
 13679  00D8'                    
 13680                           ; BSR set to: 0
 13681  00D8' C01B' FFD9         	movff	left@mR,fsr2l
 13682  00DC' C01C' FFDA         	movff	left@mR+1,fsr2h
 13683  00E0' 5100'              	movf	_DCmotors_upper& (0+255),w,b	;volatile
 13684  00E2' 5CDE               	subwf	postinc2,w,c
 13685  00E4' A0D8               	btfss	status,0,c
 13686  00E6' EF00' F000'        	goto	u6381
 13687  00EA' EF00' F000'        	goto	u6380
 13688  00EE'                    u6381:
 13689  00EE' EF00' F000'        	goto	l5316
 13690  00F2'                    u6380:
 13691  00F2'                    
 13692                           ; BSR set to: 0
 13693                           ;DC_motors.c: 171:     LATFbits.LATF0 = 0;
 13694  00F2' 907E               	bcf	126,0,c	;volatile
 13695  00F4'                    
 13696                           ; BSR set to: 0
 13697  00F4' 0012               	return		;funcret
 13698  00F6'                    __end_of_left:
 13699                           	callstack 0
 13700                           
 13701 ;; *************** function _stop *****************
 13702 ;; Defined at:
 13703 ;;		line 129 in file "DC_motors.c"
 13704 ;; Parameters:    Size  Location     Type
 13705 ;;  mL              2   25[COMRAM] PTR struct .
 13706 ;;		 -> main@motorL(9), 
 13707 ;;  mR              2   27[COMRAM] PTR struct .
 13708 ;;		 -> main@motorR(9), 
 13709 ;; Auto vars:     Size  Location     Type
 13710 ;;		None
 13711 ;; Return value:  Size  Location     Type
 13712 ;;                  1    wreg      void 
 13713 ;; Registers used:
 13714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13715 ;; Tracked objects:
 13716 ;;		On entry : 0/0
 13717 ;;		On exit  : 0/0
 13718 ;;		Unchanged: 0/0
 13719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13720 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13723 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13724 ;;Total ram usage:        6 bytes
 13725 ;; Hardware stack levels used: 1
 13726 ;; Hardware stack levels required when called: 2
 13727 ;; This function calls:
 13728 ;;		_DCmotors_setPWM
 13729 ;; This function is called by:
 13730 ;;		_colourcards_readRGBC
 13731 ;;		_DCmotors_calibration
 13732 ;;		_DCmotors_testing
 13733 ;; This function uses a non-reentrant model
 13734 ;;
 13735                           
 13736                           	psect	text69
 13737  0000'                    __ptext69:
 13738                           	callstack 0
 13739  0000'                    _stop:
 13740                           	callstack 27
 13741  0000'                    
 13742                           ;DC_motors.c: 129: void stop(DC_motor *mL, DC_motor *mR);DC_motors.c: 130: {;DC_motors.c
      +                          : 131:     LATDbits.LATD4 = 1;
 13743  0000' 887C               	bsf	124,4,c	;volatile
 13744                           
 13745                           ;DC_motors.c: 134:     while(((mL->power)>0) && ((mR->power)>0)){
 13746  0002' EF00' F000'        	goto	l5410
 13747  0006'                    l5402:
 13748                           
 13749                           ;DC_motors.c: 135:         mL->power-=1;
 13750  0006' C019' FFD9         	movff	stop@mL,fsr2l
 13751  000A' C01A' FFDA         	movff	stop@mL+1,fsr2h
 13752  000E' 06DF               	decf	indf2,f,c
 13753                           
 13754                           ;DC_motors.c: 136:         mR->power-=1;
 13755  0010' C01B' FFD9         	movff	stop@mR,fsr2l
 13756  0014' C01C' FFDA         	movff	stop@mR+1,fsr2h
 13757  0018' 06DF               	decf	indf2,f,c
 13758  001A'                    
 13759                           ;DC_motors.c: 139:         DCmotors_setPWM(mL);
 13760  001A' C019' F00E'        	movff	stop@mL,DCmotors_setPWM@m
 13761  001E' C01A' F00F'        	movff	stop@mL+1,DCmotors_setPWM@m+1
 13762  0022' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 13763  0026'                    
 13764                           ;DC_motors.c: 140:         DCmotors_setPWM(mR);
 13765  0026' C01B' F00E'        	movff	stop@mR,DCmotors_setPWM@m
 13766  002A' C01C' F00F'        	movff	stop@mR+1,DCmotors_setPWM@m+1
 13767  002E' EC00' F000'        	call	_DCmotors_setPWM	;wreg free
 13768  0032'                    
 13769                           ;DC_motors.c: 141:         _delay((unsigned long)((100)*(64000000/4000.0)));
 13770  0032' 0E09               	movlw	9
 13771  0034' 6E00'              	movwf	(??_stop+1)^0,c
 13772  0036' 0E1E               	movlw	30
 13773  0038' 6E00'              	movwf	??_stop^0,c
 13774  003A' 0EE4               	movlw	228
 13775  003C'                    u7417:
 13776  003C' 2EE8               	decfsz	wreg,f,c
 13777  003E' D7FE               	bra	u7417
 13778  0040' 2E00'              	decfsz	??_stop^0,f,c
 13779  0042' D7FC               	bra	u7417
 13780  0044' 2E00'              	decfsz	(??_stop+1)^0,f,c
 13781  0046' D7FA               	bra	u7417
 13782  0048' D000               	nop2	
 13783  004A'                    l5410:
 13784                           
 13785                           ;DC_motors.c: 134:     while(((mL->power)>0) && ((mR->power)>0)){
 13786  004A' C019' FFD9         	movff	stop@mL,fsr2l
 13787  004E' C01A' FFDA         	movff	stop@mL+1,fsr2h
 13788  0052' 50DF               	movf	indf2,w,c
 13789  0054' B4D8               	btfsc	status,2,c
 13790  0056' EF00' F000'        	goto	u6521
 13791  005A' EF00' F000'        	goto	u6520
 13792  005E'                    u6521:
 13793  005E' EF00' F000'        	goto	l546
 13794  0062'                    u6520:
 13795  0062' C01B' FFD9         	movff	stop@mR,fsr2l
 13796  0066' C01C' FFDA         	movff	stop@mR+1,fsr2h
 13797  006A' 50DF               	movf	indf2,w,c
 13798  006C' A4D8               	btfss	status,2,c
 13799  006E' EF00' F000'        	goto	u6531
 13800  0072' EF00' F000'        	goto	u6530
 13801  0076'                    u6531:
 13802  0076' EF00' F000'        	goto	l5402
 13803  007A'                    u6530:
 13804  007A'                    l546:
 13805                           
 13806                           ;DC_motors.c: 144:     LATDbits.LATD4 = 0;
 13807  007A' 987C               	bcf	124,4,c	;volatile
 13808  007C' 0012               	return		;funcret
 13809  007E'                    __end_of_stop:
 13810                           	callstack 0
 13811                           
 13812 ;; *************** function _DCmotors_setPWM *****************
 13813 ;; Defined at:
 13814 ;;		line 51 in file "DC_motors.c"
 13815 ;; Parameters:    Size  Location     Type
 13816 ;;  m               2   14[COMRAM] PTR struct .
 13817 ;;		 -> main@motorR(9), main@motorL(9), 
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;  PWMduty         2   23[COMRAM] int 
 13820 ;; Return value:  Size  Location     Type
 13821 ;;                  1    wreg      void 
 13822 ;; Registers used:
 13823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13824 ;; Tracked objects:
 13825 ;;		On entry : 0/0
 13826 ;;		On exit  : 0/0
 13827 ;;		Unchanged: 0/0
 13828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13829 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13831 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13832 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13833 ;;Total ram usage:       11 bytes
 13834 ;; Hardware stack levels used: 1
 13835 ;; Hardware stack levels required when called: 1
 13836 ;; This function calls:
 13837 ;;		___awdiv
 13838 ;;		___wmul
 13839 ;; This function is called by:
 13840 ;;		_forward
 13841 ;;		_reverse
 13842 ;;		_stop
 13843 ;;		_left
 13844 ;;		_right
 13845 ;; This function uses a non-reentrant model
 13846 ;;
 13847                           
 13848                           	psect	text70
 13849  0000'                    __ptext70:
 13850                           	callstack 0
 13851  0000'                    _DCmotors_setPWM:
 13852                           	callstack 28
 13853  0000'                    
 13854                           ;DC_motors.c: 51: void DCmotors_setPWM(DC_motor *m);DC_motors.c: 52: {;DC_motors.c: 53: 
      +                           int PWMduty;;DC_motors.c: 55:  if (m->direction){
 13855  0000' EE20 F001          	lfsr	2,1
 13856  0004' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13857  0006' 26D9               	addwf	fsr2l,f,c
 13858  0008' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13859  000A' 22DA               	addwfc	fsr2h,f,c
 13860  000C' 50DF               	movf	indf2,w,c
 13861  000E' B4D8               	btfsc	status,2,c
 13862  0010' EF00' F000'        	goto	u6091
 13863  0014' EF00' F000'        	goto	u6090
 13864  0018'                    u6091:
 13865  0018' EF00' F000'        	goto	l5174
 13866  001C'                    u6090:
 13867  001C'                    
 13868                           ;DC_motors.c: 56:   PWMduty = (m->PWMperiod) - ((int)(m->power)*(m->PWMperiod))/100;
 13869  001C' C00E' FFD9         	movff	DCmotors_setPWM@m,fsr2l
 13870  0020' C00F' FFDA         	movff	DCmotors_setPWM@m+1,fsr2h
 13871  0024' 50DF               	movf	indf2,w,c
 13872  0026' 6E00'              	movwf	??_DCmotors_setPWM^0,c
 13873  0028' 5000'              	movf	??_DCmotors_setPWM^0,w,c
 13874  002A' 6E00'              	movwf	___wmul@multiplier^0,c
 13875  002C' 6A00'              	clrf	(___wmul@multiplier+1)^0,c
 13876  002E' EE20 F007          	lfsr	2,7
 13877  0032' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13878  0034' 26D9               	addwf	fsr2l,f,c
 13879  0036' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13880  0038' 22DA               	addwfc	fsr2h,f,c
 13881  003A' CFDE F002'         	movff	postinc2,___wmul@multiplicand
 13882  003E' CFDD F003'         	movff	postdec2,___wmul@multiplicand+1
 13883  0042' EC00' F000'        	call	___wmul	;wreg free
 13884  0046' C000' F006'        	movff	?___wmul,___awdiv@dividend
 13885  004A' C001' F007'        	movff	?___wmul+1,___awdiv@dividend+1
 13886  004E' 0E00               	movlw	0
 13887  0050' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
 13888  0052' 0E64               	movlw	100
 13889  0054' 6E00'              	movwf	___awdiv@divisor^0,c
 13890  0056' EC00' F000'        	call	___awdiv	;wreg free
 13891  005A' EE20 F007          	lfsr	2,7
 13892  005E' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13893  0060' 26D9               	addwf	fsr2l,f,c
 13894  0062' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13895  0064' 22DA               	addwfc	fsr2h,f,c
 13896  0066' CFDE F011'         	movff	postinc2,??_DCmotors_setPWM+1
 13897  006A' CFDD F012'         	movff	postdec2,??_DCmotors_setPWM+2
 13898  006E' 5000'              	movf	?___awdiv^0,w,c
 13899  0070' 5C00'              	subwf	(??_DCmotors_setPWM+1)^0,w,c
 13900  0072' 6E00'              	movwf	DCmotors_setPWM@PWMduty^0,c
 13901  0074' 5000'              	movf	(?___awdiv+1)^0,w,c
 13902  0076' 5800'              	subwfb	(??_DCmotors_setPWM+2)^0,w,c
 13903  0078' 6E00'              	movwf	(DCmotors_setPWM@PWMduty+1)^0,c
 13904                           
 13905                           ;DC_motors.c: 57:  } else {
 13906  007A' EF00' F000'        	goto	l5176
 13907  007E'                    l5174:
 13908                           
 13909                           ;DC_motors.c: 58:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
 13910  007E' C00E' FFD9         	movff	DCmotors_setPWM@m,fsr2l
 13911  0082' C00F' FFDA         	movff	DCmotors_setPWM@m+1,fsr2h
 13912  0086' 50DF               	movf	indf2,w,c
 13913  0088' 6E00'              	movwf	??_DCmotors_setPWM^0,c
 13914  008A' 5000'              	movf	??_DCmotors_setPWM^0,w,c
 13915  008C' 6E00'              	movwf	___wmul@multiplier^0,c
 13916  008E' 6A00'              	clrf	(___wmul@multiplier+1)^0,c
 13917  0090' EE20 F007          	lfsr	2,7
 13918  0094' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13919  0096' 26D9               	addwf	fsr2l,f,c
 13920  0098' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13921  009A' 22DA               	addwfc	fsr2h,f,c
 13922  009C' CFDE F002'         	movff	postinc2,___wmul@multiplicand
 13923  00A0' CFDD F003'         	movff	postdec2,___wmul@multiplicand+1
 13924  00A4' EC00' F000'        	call	___wmul	;wreg free
 13925  00A8' C000' F006'        	movff	?___wmul,___awdiv@dividend
 13926  00AC' C001' F007'        	movff	?___wmul+1,___awdiv@dividend+1
 13927  00B0' 0E00               	movlw	0
 13928  00B2' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
 13929  00B4' 0E64               	movlw	100
 13930  00B6' 6E00'              	movwf	___awdiv@divisor^0,c
 13931  00B8' EC00' F000'        	call	___awdiv	;wreg free
 13932  00BC' C006' F017'        	movff	?___awdiv,DCmotors_setPWM@PWMduty
 13933  00C0' C007' F018'        	movff	?___awdiv+1,DCmotors_setPWM@PWMduty+1
 13934  00C4'                    l5176:
 13935                           
 13936                           ;DC_motors.c: 61:  *(m->dutyHighByte) = (unsigned char)(PWMduty);
 13937  00C4' EE20 F002          	lfsr	2,2
 13938  00C8' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13939  00CA' 26D9               	addwf	fsr2l,f,c
 13940  00CC' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13941  00CE' 22DA               	addwfc	fsr2h,f,c
 13942  00D0' CFDE F010'         	movff	postinc2,??_DCmotors_setPWM
 13943  00D4' CFDD F011'         	movff	postdec2,??_DCmotors_setPWM+1
 13944  00D8' C010' FFD9         	movff	??_DCmotors_setPWM,fsr2l
 13945  00DC' C011' FFDA         	movff	??_DCmotors_setPWM+1,fsr2h
 13946  00E0' C017' FFDF         	movff	DCmotors_setPWM@PWMduty,indf2
 13947  00E4'                    
 13948                           ;DC_motors.c: 63:  if (m->direction){
 13949  00E4' EE20 F001          	lfsr	2,1
 13950  00E8' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13951  00EA' 26D9               	addwf	fsr2l,f,c
 13952  00EC' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13953  00EE' 22DA               	addwfc	fsr2h,f,c
 13954  00F0' 50DF               	movf	indf2,w,c
 13955  00F2' B4D8               	btfsc	status,2,c
 13956  00F4' EF00' F000'        	goto	u6101
 13957  00F8' EF00' F000'        	goto	u6100
 13958  00FC'                    u6101:
 13959  00FC' EF00' F000'        	goto	l5182
 13960  0100'                    u6100:
 13961  0100'                    
 13962                           ;DC_motors.c: 64:   *(m->dir_LAT) = (unsigned char)(*(m->dir_LAT) | (1<<(m->dir_pin)));
 13963  0100' EE20 F004          	lfsr	2,4
 13964  0104' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13965  0106' 26D9               	addwf	fsr2l,f,c
 13966  0108' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13967  010A' 22DA               	addwfc	fsr2h,f,c
 13968  010C' CFDE F010'         	movff	postinc2,??_DCmotors_setPWM
 13969  0110' CFDD F011'         	movff	postdec2,??_DCmotors_setPWM+1
 13970  0114' C010' FFD9         	movff	??_DCmotors_setPWM,fsr2l
 13971  0118' C011' FFDA         	movff	??_DCmotors_setPWM+1,fsr2h
 13972  011C' EE10 F004          	lfsr	1,4
 13973  0120' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13974  0122' 26E1               	addwf	fsr1l,f,c
 13975  0124' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13976  0126' 22E2               	addwfc	fsr1h,f,c
 13977  0128' CFE6 F012'         	movff	postinc1,??_DCmotors_setPWM+2
 13978  012C' CFE5 F013'         	movff	postdec1,??_DCmotors_setPWM+3
 13979  0130' C012' FFE1         	movff	??_DCmotors_setPWM+2,fsr1l
 13980  0134' C013' FFE2         	movff	??_DCmotors_setPWM+3,fsr1h
 13981  0138' 50E7               	movf	indf1,w,c
 13982  013A' 6E00'              	movwf	(??_DCmotors_setPWM+4)^0,c
 13983  013C' EE10 F006          	lfsr	1,6
 13984  0140' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 13985  0142' 26E1               	addwf	fsr1l,f,c
 13986  0144' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 13987  0146' 22E2               	addwfc	fsr1h,f,c
 13988  0148' 50E7               	movf	indf1,w,c
 13989  014A' 6E00'              	movwf	(??_DCmotors_setPWM+5)^0,c
 13990  014C' 0E01               	movlw	1
 13991  014E' 6E00'              	movwf	(??_DCmotors_setPWM+6)^0,c
 13992  0150' 2A00'              	incf	(??_DCmotors_setPWM+5)^0,f,c
 13993  0152' EF00' F000'        	goto	u6114
 13994  0156'                    u6115:
 13995  0156' 90D8               	bcf	status,0,c
 13996  0158' 3600'              	rlcf	(??_DCmotors_setPWM+6)^0,f,c
 13997  015A'                    u6114:
 13998  015A' 2E00'              	decfsz	(??_DCmotors_setPWM+5)^0,f,c
 13999  015C' EF00' F000'        	goto	u6115
 14000  0160' 5000'              	movf	(??_DCmotors_setPWM+6)^0,w,c
 14001  0162' 1000'              	iorwf	(??_DCmotors_setPWM+4)^0,w,c
 14002  0164' 6EDF               	movwf	indf2,c
 14003                           
 14004                           ;DC_motors.c: 65:  } else {
 14005  0166' EF00' F000'        	goto	l518
 14006  016A'                    l5182:
 14007                           
 14008                           ;DC_motors.c: 66:   *(m->dir_LAT) = (unsigned char)(*(m->dir_LAT) & (~(1<<(m->dir_pin)))
      +                          );
 14009  016A' EE20 F004          	lfsr	2,4
 14010  016E' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 14011  0170' 26D9               	addwf	fsr2l,f,c
 14012  0172' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 14013  0174' 22DA               	addwfc	fsr2h,f,c
 14014  0176' CFDE F010'         	movff	postinc2,??_DCmotors_setPWM
 14015  017A' CFDD F011'         	movff	postdec2,??_DCmotors_setPWM+1
 14016  017E' C010' FFD9         	movff	??_DCmotors_setPWM,fsr2l
 14017  0182' C011' FFDA         	movff	??_DCmotors_setPWM+1,fsr2h
 14018  0186' EE10 F004          	lfsr	1,4
 14019  018A' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 14020  018C' 26E1               	addwf	fsr1l,f,c
 14021  018E' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 14022  0190' 22E2               	addwfc	fsr1h,f,c
 14023  0192' CFE6 F012'         	movff	postinc1,??_DCmotors_setPWM+2
 14024  0196' CFE5 F013'         	movff	postdec1,??_DCmotors_setPWM+3
 14025  019A' C012' FFE1         	movff	??_DCmotors_setPWM+2,fsr1l
 14026  019E' C013' FFE2         	movff	??_DCmotors_setPWM+3,fsr1h
 14027  01A2' 50E7               	movf	indf1,w,c
 14028  01A4' 6E00'              	movwf	(??_DCmotors_setPWM+4)^0,c
 14029  01A6' EE10 F006          	lfsr	1,6
 14030  01AA' 5000'              	movf	DCmotors_setPWM@m^0,w,c
 14031  01AC' 26E1               	addwf	fsr1l,f,c
 14032  01AE' 5000'              	movf	(DCmotors_setPWM@m+1)^0,w,c
 14033  01B0' 22E2               	addwfc	fsr1h,f,c
 14034  01B2' 50E7               	movf	indf1,w,c
 14035  01B4' 6E00'              	movwf	(??_DCmotors_setPWM+5)^0,c
 14036  01B6' 0E01               	movlw	1
 14037  01B8' 6E00'              	movwf	(??_DCmotors_setPWM+6)^0,c
 14038  01BA' 2A00'              	incf	(??_DCmotors_setPWM+5)^0,f,c
 14039  01BC' EF00' F000'        	goto	u6124
 14040  01C0'                    u6125:
 14041  01C0' 90D8               	bcf	status,0,c
 14042  01C2' 3600'              	rlcf	(??_DCmotors_setPWM+6)^0,f,c
 14043  01C4'                    u6124:
 14044  01C4' 2E00'              	decfsz	(??_DCmotors_setPWM+5)^0,f,c
 14045  01C6' EF00' F000'        	goto	u6125
 14046  01CA' 5000'              	movf	(??_DCmotors_setPWM+6)^0,w,c
 14047  01CC' 0AFF               	xorlw	255
 14048  01CE' 1400'              	andwf	(??_DCmotors_setPWM+4)^0,w,c
 14049  01D0' 6EDF               	movwf	indf2,c
 14050  01D2'                    l518:
 14051  01D2' 0012               	return		;funcret
 14052  01D4'                    __end_of_DCmotors_setPWM:
 14053                           	callstack 0
 14054                           
 14055 ;; *************** function ___wmul *****************
 14056 ;; Defined at:
 14057 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;  multiplier      2    0[COMRAM] unsigned int 
 14060 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14061 ;; Auto vars:     Size  Location     Type
 14062 ;;  product         2    4[COMRAM] unsigned int 
 14063 ;; Return value:  Size  Location     Type
 14064 ;;                  2    0[COMRAM] unsigned int 
 14065 ;; Registers used:
 14066 ;;		wreg, status,2, status,0, prodl, prodh
 14067 ;; Tracked objects:
 14068 ;;		On entry : 0/0
 14069 ;;		On exit  : 0/0
 14070 ;;		Unchanged: 0/0
 14071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14075 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14076 ;;Total ram usage:        6 bytes
 14077 ;; Hardware stack levels used: 1
 14078 ;; This function calls:
 14079 ;;		Nothing
 14080 ;; This function is called by:
 14081 ;;		_DCmotors_setPWM
 14082 ;;		_atoi
 14083 ;; This function uses a non-reentrant model
 14084 ;;
 14085                           
 14086                           	psect	text71
 14087  0000'                    __ptext71:
 14088                           	callstack 0
 14089  0000'                    ___wmul:
 14090                           	callstack 28
 14091  0000' 5000'              	movf	___wmul@multiplier^0,w,c
 14092  0002' 0200'              	mulwf	___wmul@multiplicand^0,c
 14093  0004' CFF3 F004'         	movff	prodl,___wmul@product
 14094  0008' CFF4 F005'         	movff	prodh,___wmul@product+1
 14095  000C' 5000'              	movf	___wmul@multiplier^0,w,c
 14096  000E' 0200'              	mulwf	(___wmul@multiplicand+1)^0,c
 14097  0010' 50F3               	movf	243,w,c
 14098  0012' 2600'              	addwf	(___wmul@product+1)^0,f,c
 14099  0014' 5000'              	movf	(___wmul@multiplier+1)^0,w,c
 14100  0016' 0200'              	mulwf	___wmul@multiplicand^0,c
 14101  0018' 50F3               	movf	243,w,c
 14102  001A' 2600'              	addwf	(___wmul@product+1)^0,f,c
 14103  001C' C004' F000'        	movff	___wmul@product,?___wmul
 14104  0020' C005' F001'        	movff	___wmul@product+1,?___wmul+1
 14105  0024' 0012               	return		;funcret
 14106  0026'                    __end_of___wmul:
 14107                           	callstack 0
 14108                           
 14109 ;; *************** function ___awdiv *****************
 14110 ;; Defined at:
 14111 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
 14112 ;; Parameters:    Size  Location     Type
 14113 ;;  dividend        2    6[COMRAM] int 
 14114 ;;  divisor         2    8[COMRAM] int 
 14115 ;; Auto vars:     Size  Location     Type
 14116 ;;  quotient        2   12[COMRAM] int 
 14117 ;;  sign            1   11[COMRAM] unsigned char 
 14118 ;;  counter         1   10[COMRAM] unsigned char 
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  2    6[COMRAM] int 
 14121 ;; Registers used:
 14122 ;;		wreg, status,2, status,0
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14128 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14129 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14131 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14132 ;;Total ram usage:        8 bytes
 14133 ;; Hardware stack levels used: 1
 14134 ;; This function calls:
 14135 ;;		Nothing
 14136 ;; This function is called by:
 14137 ;;		_DCmotors_setPWM
 14138 ;;		_efgtoa
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text72
 14143  0000'                    __ptext72:
 14144                           	callstack 0
 14145  0000'                    ___awdiv:
 14146                           	callstack 28
 14147  0000' 0E00               	movlw	0
 14148  0002' 6E00'              	movwf	___awdiv@sign^0,c
 14149  0004' BE00'              	btfsc	(___awdiv@divisor+1)^0,7,c
 14150  0006' EF00' F000'        	goto	u4650
 14151  000A' EF00' F000'        	goto	u4651
 14152  000E'                    u4651:
 14153  000E' EF00' F000'        	goto	l4436
 14154  0012'                    u4650:
 14155  0012' 6C00'              	negf	___awdiv@divisor^0,c
 14156  0014' 1E00'              	comf	(___awdiv@divisor+1)^0,f,c
 14157  0016' B0D8               	btfsc	status,0,c
 14158  0018' 2A00'              	incf	(___awdiv@divisor+1)^0,f,c
 14159  001A' 0E01               	movlw	1
 14160  001C' 6E00'              	movwf	___awdiv@sign^0,c
 14161  001E'                    l4436:
 14162  001E' BE00'              	btfsc	(___awdiv@dividend+1)^0,7,c
 14163  0020' EF00' F000'        	goto	u4660
 14164  0024' EF00' F000'        	goto	u4661
 14165  0028'                    u4661:
 14166  0028' EF00' F000'        	goto	l4442
 14167  002C'                    u4660:
 14168  002C' 6C00'              	negf	___awdiv@dividend^0,c
 14169  002E' 1E00'              	comf	(___awdiv@dividend+1)^0,f,c
 14170  0030' B0D8               	btfsc	status,0,c
 14171  0032' 2A00'              	incf	(___awdiv@dividend+1)^0,f,c
 14172  0034' 0E01               	movlw	1
 14173  0036' 1A00'              	xorwf	___awdiv@sign^0,f,c
 14174  0038'                    l4442:
 14175  0038' 0E00               	movlw	0
 14176  003A' 6E00'              	movwf	(___awdiv@quotient+1)^0,c
 14177  003C' 0E00               	movlw	0
 14178  003E' 6E00'              	movwf	___awdiv@quotient^0,c
 14179  0040' 5000'              	movf	___awdiv@divisor^0,w,c
 14180  0042' 1000'              	iorwf	(___awdiv@divisor+1)^0,w,c
 14181  0044' B4D8               	btfsc	status,2,c
 14182  0046' EF00' F000'        	goto	u4671
 14183  004A' EF00' F000'        	goto	u4670
 14184  004E'                    u4671:
 14185  004E' EF00' F000'        	goto	l4464
 14186  0052'                    u4670:
 14187  0052' 0E01               	movlw	1
 14188  0054' 6E00'              	movwf	___awdiv@counter^0,c
 14189  0056' EF00' F000'        	goto	l4450
 14190  005A'                    l4448:
 14191  005A' 90D8               	bcf	status,0,c
 14192  005C' 3600'              	rlcf	___awdiv@divisor^0,f,c
 14193  005E' 3600'              	rlcf	(___awdiv@divisor+1)^0,f,c
 14194  0060' 2A00'              	incf	___awdiv@counter^0,f,c
 14195  0062'                    l4450:
 14196  0062' AE00'              	btfss	(___awdiv@divisor+1)^0,7,c
 14197  0064' EF00' F000'        	goto	u4681
 14198  0068' EF00' F000'        	goto	u4680
 14199  006C'                    u4681:
 14200  006C' EF00' F000'        	goto	l4448
 14201  0070'                    u4680:
 14202  0070'                    l4452:
 14203  0070' 90D8               	bcf	status,0,c
 14204  0072' 3600'              	rlcf	___awdiv@quotient^0,f,c
 14205  0074' 3600'              	rlcf	(___awdiv@quotient+1)^0,f,c
 14206  0076' 5000'              	movf	___awdiv@divisor^0,w,c
 14207  0078' 5C00'              	subwf	___awdiv@dividend^0,w,c
 14208  007A' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
 14209  007C' 5800'              	subwfb	(___awdiv@dividend+1)^0,w,c
 14210  007E' A0D8               	btfss	status,0,c
 14211  0080' EF00' F000'        	goto	u4691
 14212  0084' EF00' F000'        	goto	u4690
 14213  0088'                    u4691:
 14214  0088' EF00' F000'        	goto	l4460
 14215  008C'                    u4690:
 14216  008C' 5000'              	movf	___awdiv@divisor^0,w,c
 14217  008E' 5E00'              	subwf	___awdiv@dividend^0,f,c
 14218  0090' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
 14219  0092' 5A00'              	subwfb	(___awdiv@dividend+1)^0,f,c
 14220  0094' 8000'              	bsf	___awdiv@quotient^0,0,c
 14221  0096'                    l4460:
 14222  0096' 90D8               	bcf	status,0,c
 14223  0098' 3200'              	rrcf	(___awdiv@divisor+1)^0,f,c
 14224  009A' 3200'              	rrcf	___awdiv@divisor^0,f,c
 14225  009C' 2E00'              	decfsz	___awdiv@counter^0,f,c
 14226  009E' EF00' F000'        	goto	l4452
 14227  00A2'                    l4464:
 14228  00A2' 5000'              	movf	___awdiv@sign^0,w,c
 14229  00A4' B4D8               	btfsc	status,2,c
 14230  00A6' EF00' F000'        	goto	u4701
 14231  00AA' EF00' F000'        	goto	u4700
 14232  00AE'                    u4701:
 14233  00AE' EF00' F000'        	goto	l4468
 14234  00B2'                    u4700:
 14235  00B2' 6C00'              	negf	___awdiv@quotient^0,c
 14236  00B4' 1E00'              	comf	(___awdiv@quotient+1)^0,f,c
 14237  00B6' B0D8               	btfsc	status,0,c
 14238  00B8' 2A00'              	incf	(___awdiv@quotient+1)^0,f,c
 14239  00BA'                    l4468:
 14240  00BA' C00C' F006'        	movff	___awdiv@quotient,?___awdiv
 14241  00BE' C00D' F007'        	movff	___awdiv@quotient+1,?___awdiv+1
 14242  00C2' 0012               	return		;funcret
 14243  00C4'                    __end_of___awdiv:
 14244                           	callstack 0
 14245                           
 14246 ;; *************** function _DCmotors_adjustval *****************
 14247 ;; Defined at:
 14248 ;;		line 256 in file "DC_motors.c"
 14249 ;; Parameters:    Size  Location     Type
 14250 ;;		None
 14251 ;; Auto vars:     Size  Location     Type
 14252 ;;  i               1    2[COMRAM] unsigned char 
 14253 ;; Return value:  Size  Location     Type
 14254 ;;                  1    wreg      void 
 14255 ;; Registers used:
 14256 ;;		wreg, status,2, status,0
 14257 ;; Tracked objects:
 14258 ;;		On entry : 0/0
 14259 ;;		On exit  : 0/0
 14260 ;;		Unchanged: 0/0
 14261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14265 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14266 ;;Total ram usage:        3 bytes
 14267 ;; Hardware stack levels used: 1
 14268 ;; This function calls:
 14269 ;;		Nothing
 14270 ;; This function is called by:
 14271 ;;		_DCmotors_calibration
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           	psect	text73
 14276  0000'                    __ptext73:
 14277                           	callstack 0
 14278  0000'                    _DCmotors_adjustval:
 14279                           	callstack 29
 14280  0000'                    
 14281                           ;DC_motors.c: 258:     unsigned char i;;DC_motors.c: 259:     for (i=0; i<10; i++) {
 14282  0000' 0E00               	movlw	0
 14283  0002' 6E00'              	movwf	DCmotors_adjustval@i^0,c
 14284  0004'                    l599:
 14285                           
 14286                           ;DC_motors.c: 260:         if (PORTFbits.RF2) {
 14287  0004' A48E               	btfss	142,2,c	;volatile
 14288  0006' EF00' F000'        	goto	u6561
 14289  000A' EF00' F000'        	goto	u6560
 14290  000E'                    u6561:
 14291  000E' EF00' F000'        	goto	l601
 14292  0012'                    u6560:
 14293  0012'                    
 14294                           ;DC_motors.c: 261:             LATDbits.LATD7 = 1;
 14295  0012' 8E7C               	bsf	124,7,c	;volatile
 14296  0014'                    
 14297                           ;DC_motors.c: 262:             DCmotors_upper+=5;
 14298  0014' 0E05               	movlw	5
 14299  0016' 0100               	movlb	0	; () banked
 14300  0018' 2700'              	addwf	_DCmotors_upper& (0+255),f,b	;volatile
 14301                           
 14302                           ;DC_motors.c: 263:             DCmotors_lower-=5;
 14303  001A' 0E05               	movlw	5
 14304  001C' 5F00'              	subwf	_DCmotors_lower& (0+255),f,b	;volatile
 14305  001E'                    
 14306                           ; BSR set to: 0
 14307                           ;DC_motors.c: 264:             _delay((unsigned long)((100)*(64000000/4000.0)));
 14308  001E' 0E09               	movlw	9
 14309  0020' 6E00'              	movwf	(??_DCmotors_adjustval+1)^0,c
 14310  0022' 0E1E               	movlw	30
 14311  0024' 6E00'              	movwf	??_DCmotors_adjustval^0,c
 14312  0026' 0EE4               	movlw	228
 14313  0028'                    u7427:
 14314  0028' 2EE8               	decfsz	wreg,f,c
 14315  002A' D7FE               	bra	u7427
 14316  002C' 2E00'              	decfsz	??_DCmotors_adjustval^0,f,c
 14317  002E' D7FC               	bra	u7427
 14318  0030' 2E00'              	decfsz	(??_DCmotors_adjustval+1)^0,f,c
 14319  0032' D7FA               	bra	u7427
 14320  0034' D000               	nop2	
 14321  0036'                    
 14322                           ;DC_motors.c: 265:             LATDbits.LATD7 = 0;
 14323  0036' 9E7C               	bcf	124,7,c	;volatile
 14324  0038'                    l5478:
 14325                           
 14326                           ;DC_motors.c: 266:             _delay((unsigned long)((1000)*(64000000/4000.0)));
 14327  0038' 0E52               	movlw	82
 14328  003A' 6E00'              	movwf	(??_DCmotors_adjustval+1)^0,c
 14329  003C' 0E2B               	movlw	43
 14330  003E' 6E00'              	movwf	??_DCmotors_adjustval^0,c
 14331  0040' 0E00               	movlw	0
 14332  0042'                    u7437:
 14333  0042' 2EE8               	decfsz	wreg,f,c
 14334  0044' D7FE               	bra	u7437
 14335  0046' 2E00'              	decfsz	??_DCmotors_adjustval^0,f,c
 14336  0048' D7FC               	bra	u7437
 14337  004A' 2E00'              	decfsz	(??_DCmotors_adjustval+1)^0,f,c
 14338  004C' D7FA               	bra	u7437
 14339  004E' D000               	nop2	
 14340                           
 14341                           ;DC_motors.c: 267:         } else if (PORTFbits.RF3) {
 14342  0050' EF00' F000'        	goto	l5490
 14343  0054'                    l601:
 14344  0054' A68E               	btfss	142,3,c	;volatile
 14345  0056' EF00' F000'        	goto	u6571
 14346  005A' EF00' F000'        	goto	u6570
 14347  005E'                    u6571:
 14348  005E' EF00' F000'        	goto	l5490
 14349  0062'                    u6570:
 14350  0062'                    
 14351                           ;DC_motors.c: 268:             LATHbits.LATH3 = 1;
 14352  0062' 8680               	bsf	128,3,c	;volatile
 14353  0064'                    
 14354                           ;DC_motors.c: 269:             DCmotors_upper-=5;
 14355  0064' 0E05               	movlw	5
 14356  0066' 0100               	movlb	0	; () banked
 14357  0068' 5F00'              	subwf	_DCmotors_upper& (0+255),f,b	;volatile
 14358                           
 14359                           ;DC_motors.c: 270:             DCmotors_lower+=5;
 14360  006A' 0E05               	movlw	5
 14361  006C' 2700'              	addwf	_DCmotors_lower& (0+255),f,b	;volatile
 14362  006E'                    
 14363                           ; BSR set to: 0
 14364                           ;DC_motors.c: 271:             _delay((unsigned long)((100)*(64000000/4000.0)));
 14365  006E' 0E09               	movlw	9
 14366  0070' 6E00'              	movwf	(??_DCmotors_adjustval+1)^0,c
 14367  0072' 0E1E               	movlw	30
 14368  0074' 6E00'              	movwf	??_DCmotors_adjustval^0,c
 14369  0076' 0EE4               	movlw	228
 14370  0078'                    u7447:
 14371  0078' 2EE8               	decfsz	wreg,f,c
 14372  007A' D7FE               	bra	u7447
 14373  007C' 2E00'              	decfsz	??_DCmotors_adjustval^0,f,c
 14374  007E' D7FC               	bra	u7447
 14375  0080' 2E00'              	decfsz	(??_DCmotors_adjustval+1)^0,f,c
 14376  0082' D7FA               	bra	u7447
 14377  0084' D000               	nop2	
 14378  0086'                    
 14379                           ;DC_motors.c: 272:             LATHbits.LATH3 = 0;
 14380  0086' 9680               	bcf	128,3,c	;volatile
 14381  0088' EF00' F000'        	goto	l5478
 14382  008C'                    l5490:
 14383                           
 14384                           ;DC_motors.c: 275:     }
 14385  008C' 2A00'              	incf	DCmotors_adjustval@i^0,f,c
 14386  008E' 0E09               	movlw	9
 14387  0090' 6400'              	cpfsgt	DCmotors_adjustval@i^0,c
 14388  0092' EF00' F000'        	goto	u6581
 14389  0096' EF00' F000'        	goto	u6580
 14390  009A'                    u6581:
 14391  009A' EF00' F000'        	goto	l599
 14392  009E'                    u6580:
 14393  009E' 0012               	return		;funcret
 14394  00A0'                    __end_of_DCmotors_adjustval:
 14395                           	callstack 0
 14396                           
 14397 ;; *************** function _ADC_init *****************
 14398 ;; Defined at:
 14399 ;;		line 8 in file "ADC.c"
 14400 ;; Parameters:    Size  Location     Type
 14401 ;;		None
 14402 ;; Auto vars:     Size  Location     Type
 14403 ;;		None
 14404 ;; Return value:  Size  Location     Type
 14405 ;;                  1    wreg      void 
 14406 ;; Registers used:
 14407 ;;		wreg, status,2
 14408 ;; Tracked objects:
 14409 ;;		On entry : 0/0
 14410 ;;		On exit  : 0/0
 14411 ;;		Unchanged: 0/0
 14412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14417 ;;Total ram usage:        0 bytes
 14418 ;; Hardware stack levels used: 1
 14419 ;; This function calls:
 14420 ;;		Nothing
 14421 ;; This function is called by:
 14422 ;;		_main
 14423 ;; This function uses a non-reentrant model
 14424 ;;
 14425                           
 14426                           	psect	text74
 14427  0000'                    __ptext74:
 14428                           	callstack 0
 14429  0000'                    _ADC_init:
 14430                           	callstack 30
 14431  0000'                    
 14432                           ;ADC.c: 10:     TRISFbits.TRISF6=1;
 14433  0000' 8C86               	bsf	134,6,c	;volatile
 14434                           
 14435                           ;ADC.c: 11:     ANSELFbits.ANSELF6=1;
 14436  0002' 010E               	movlb	14	; () banked
 14437  0004' 8DB4               	bsf	180,6,b	;volatile
 14438                           
 14439                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
 14440  0006' 010F               	movlb	15	; () banked
 14441  0008' 9958               	bcf	88,4,b	;volatile
 14442  000A'                    
 14443                           ; BSR set to: 15
 14444                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
 14445  000A' 0EFC               	movlw	-4
 14446  000C' 1758               	andwf	88,f,b	;volatile
 14447                           
 14448                           ;ADC.c: 16:     ADPCH=0b101110;
 14449  000E' 0E2E               	movlw	46
 14450  0010' 6F5F               	movwf	95,b	;volatile
 14451  0012'                    
 14452                           ; BSR set to: 15
 14453                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
 14454  0012' 9460               	bcf	96,2,c	;volatile
 14455  0014'                    
 14456                           ; BSR set to: 15
 14457                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
 14458  0014' 8860               	bsf	96,4,c	;volatile
 14459  0016'                    
 14460                           ; BSR set to: 15
 14461                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
 14462  0016' 8E60               	bsf	96,7,c	;volatile
 14463  0018'                    
 14464                           ; BSR set to: 15
 14465  0018' 0012               	return		;funcret
 14466  001A'                    __end_of_ADC_init:
 14467                           	callstack 0
 14468                           
 14469                           	psect	rparam
 14470  0000                     
 14471                           	psect	idloc
 14472                           
 14473                           ;Config register IDLOC0 @ 0x200000
 14474                           ;	unspecified, using default values
 14475  200000                     	org	2097152
 14476  200000  0FFF               	dw	4095
 14477                           
 14478                           ;Config register IDLOC1 @ 0x200002
 14479                           ;	unspecified, using default values
 14480  200002                     	org	2097154
 14481  200002  0FFF               	dw	4095
 14482                           
 14483                           ;Config register IDLOC2 @ 0x200004
 14484                           ;	unspecified, using default values
 14485  200004                     	org	2097156
 14486  200004  0FFF               	dw	4095
 14487                           
 14488                           ;Config register IDLOC3 @ 0x200006
 14489                           ;	unspecified, using default values
 14490  200006                     	org	2097158
 14491  200006  0FFF               	dw	4095
 14492                           
 14493                           ;Config register IDLOC4 @ 0x200008
 14494                           ;	unspecified, using default values
 14495  200008                     	org	2097160
 14496  200008  0FFF               	dw	4095
 14497                           
 14498                           ;Config register IDLOC5 @ 0x20000A
 14499                           ;	unspecified, using default values
 14500  20000A                     	org	2097162
 14501  20000A  0FFF               	dw	4095
 14502                           
 14503                           ;Config register IDLOC6 @ 0x20000C
 14504                           ;	unspecified, using default values
 14505  20000C                     	org	2097164
 14506  20000C  0FFF               	dw	4095
 14507                           
 14508                           ;Config register IDLOC7 @ 0x20000E
 14509                           ;	unspecified, using default values
 14510  20000E                     	org	2097166
 14511  20000E  0FFF               	dw	4095
 14512                           
 14513                           	psect	config
 14514                           
 14515                           ;Config register CONFIG1L @ 0x300000
 14516                           ;	External Oscillator mode Selection bits
 14517                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 14518                           ;	Power-up default value for COSC bits
 14519                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 14520  300000                     	org	3145728
 14521  300000  AA                 	db	170
 14522                           
 14523                           ;Config register CONFIG1H @ 0x300001
 14524                           ;	unspecified, using default values
 14525                           ;	Clock Out Enable bit
 14526                           ;	CLKOUTEN = 0x1, unprogrammed default
 14527                           ;	Clock Switch Enable bit
 14528                           ;	CSWEN = 0x1, unprogrammed default
 14529                           ;	Fail-Safe Clock Monitor Enable bit
 14530                           ;	FCMEN = 0x1, unprogrammed default
 14531  300001                     	org	3145729
 14532  300001  FF                 	db	255
 14533                           
 14534                           ;Config register CONFIG2L @ 0x300002
 14535                           ;	unspecified, using default values
 14536                           ;	Master Clear Enable bit
 14537                           ;	MCLRE = 0x1, unprogrammed default
 14538                           ;	Power-up Timer Enable bit
 14539                           ;	PWRTE = 0x1, unprogrammed default
 14540                           ;	Low-power BOR enable bit
 14541                           ;	LPBOREN = 0x1, unprogrammed default
 14542                           ;	Brown-out Reset Enable bits
 14543                           ;	BOREN = 0x3, unprogrammed default
 14544  300002                     	org	3145730
 14545  300002  FF                 	db	255
 14546                           
 14547                           ;Config register CONFIG2H @ 0x300003
 14548                           ;	unspecified, using default values
 14549                           ;	Brown Out Reset Voltage selection bits
 14550                           ;	BORV = 0x3, unprogrammed default
 14551                           ;	ZCD Disable bit
 14552                           ;	ZCD = 0x1, unprogrammed default
 14553                           ;	PPSLOCK bit One-Way Set Enable bit
 14554                           ;	PPS1WAY = 0x1, unprogrammed default
 14555                           ;	Stack Full/Underflow Reset Enable bit
 14556                           ;	STVREN = 0x1, unprogrammed default
 14557                           ;	Debugger Enable bit
 14558                           ;	DEBUG = 0x1, unprogrammed default
 14559                           ;	Extended Instruction Set Enable bit
 14560                           ;	XINST = 0x1, unprogrammed default
 14561  300003                     	org	3145731
 14562  300003  FF                 	db	255
 14563                           
 14564                           ;Config register CONFIG3L @ 0x300004
 14565                           ;	WDT Period Select bits
 14566                           ;	WDTCPS = 0x1F, unprogrammed default
 14567                           ;	WDT operating mode
 14568                           ;	WDTE = OFF, WDT Disabled
 14569  300004                     	org	3145732
 14570  300004  9F                 	db	159
 14571                           
 14572                           ;Config register CONFIG3H @ 0x300005
 14573                           ;	unspecified, using default values
 14574                           ;	WDT Window Select bits
 14575                           ;	WDTCWS = 0x7, unprogrammed default
 14576                           ;	WDT input clock selector
 14577                           ;	WDTCCS = 0x7, unprogrammed default
 14578  300005                     	org	3145733
 14579  300005  FF                 	db	255
 14580                           
 14581                           ;Config register CONFIG4L @ 0x300006
 14582                           ;	unspecified, using default values
 14583                           ;	Write Protection Block 0
 14584                           ;	WRT0 = 0x1, unprogrammed default
 14585                           ;	Write Protection Block 1
 14586                           ;	WRT1 = 0x1, unprogrammed default
 14587                           ;	Write Protection Block 2
 14588                           ;	WRT2 = 0x1, unprogrammed default
 14589                           ;	Write Protection Block 3
 14590                           ;	WRT3 = 0x1, unprogrammed default
 14591                           ;	Write Protection Block 3
 14592                           ;	WRT4 = 0x1, unprogrammed default
 14593                           ;	Write Protection Block 3
 14594                           ;	WRT5 = 0x1, unprogrammed default
 14595                           ;	Write Protection Block 3
 14596                           ;	WRT6 = 0x1, unprogrammed default
 14597                           ;	Write Protection Block 3
 14598                           ;	WRT7 = 0x1, unprogrammed default
 14599  300006                     	org	3145734
 14600  300006  FF                 	db	255
 14601                           
 14602                           ;Config register CONFIG4H @ 0x300007
 14603                           ;	unspecified, using default values
 14604                           ;	Configuration Register Write Protection bit
 14605                           ;	WRTC = 0x1, unprogrammed default
 14606                           ;	Boot Block Write Protection bit
 14607                           ;	WRTB = 0x1, unprogrammed default
 14608                           ;	Data EEPROM Write Protection bit
 14609                           ;	WRTD = 0x1, unprogrammed default
 14610                           ;	Scanner Enable bit
 14611                           ;	SCANE = 0x1, unprogrammed default
 14612                           ;	Low Voltage Programming Enable bit
 14613                           ;	LVP = 0x1, unprogrammed default
 14614  300007                     	org	3145735
 14615  300007  FF                 	db	255
 14616                           
 14617                           ;Config register CONFIG5L @ 0x300008
 14618                           ;	unspecified, using default values
 14619                           ;	UserNVM Program Memory Code Protection bit
 14620                           ;	CP = 0x1, unprogrammed default
 14621                           ;	DataNVM Memory Code Protection bit
 14622                           ;	CPD = 0x1, unprogrammed default
 14623  300008                     	org	3145736
 14624  300008  FF                 	db	255
 14625                           
 14626                           ;Config register CONFIG5H @ 0x300009
 14627                           ;	unspecified, using default values
 14628  300009                     	org	3145737
 14629  300009  FF                 	db	255
 14630                           
 14631                           ;Config register CONFIG6L @ 0x30000A
 14632                           ;	unspecified, using default values
 14633                           ;	Table Read Protection Block 0
 14634                           ;	EBTR0 = 0x1, unprogrammed default
 14635                           ;	Table Read Protection Block 1
 14636                           ;	EBTR1 = 0x1, unprogrammed default
 14637                           ;	Table Read Protection Block 2
 14638                           ;	EBTR2 = 0x1, unprogrammed default
 14639                           ;	Table Read Protection Block 3
 14640                           ;	EBTR3 = 0x1, unprogrammed default
 14641                           ;	Table Read Protection Block 4
 14642                           ;	EBTR4 = 0x1, unprogrammed default
 14643                           ;	Table Read Protection Block 5
 14644                           ;	EBTR5 = 0x1, unprogrammed default
 14645                           ;	Table Read Protection Block 6
 14646                           ;	EBTR6 = 0x1, unprogrammed default
 14647                           ;	Table Read Protection Block 7
 14648                           ;	EBTR7 = 0x1, unprogrammed default
 14649  30000A                     	org	3145738
 14650  30000A  FF                 	db	255
 14651                           
 14652                           ;Config register CONFIG6H @ 0x30000B
 14653                           ;	unspecified, using default values
 14654                           ;	Boot Block Table Read Protection bit
 14655                           ;	EBTRB = 0x1, unprogrammed default
 14656  30000B                     	org	3145739
 14657  30000B  FF                 	db	255
 14658                           tosu	equ	0xFFF
 14659                           tosh	equ	0xFFE
 14660                           tosl	equ	0xFFD
 14661                           stkptr	equ	0xFFC
 14662                           pclatu	equ	0xFFB
 14663                           pclath	equ	0xFFA
 14664                           pcl	equ	0xFF9
 14665                           tblptru	equ	0xFF8
 14666                           tblptrh	equ	0xFF7
 14667                           tblptrl	equ	0xFF6
 14668                           tablat	equ	0xFF5
 14669                           prodh	equ	0xFF4
 14670                           prodl	equ	0xFF3
 14671                           indf0	equ	0xFEF
 14672                           postinc0	equ	0xFEE
 14673                           postdec0	equ	0xFED
 14674                           preinc0	equ	0xFEC
 14675                           plusw0	equ	0xFEB
 14676                           fsr0h	equ	0xFEA
 14677                           fsr0l	equ	0xFE9
 14678                           wreg	equ	0xFE8
 14679                           indf1	equ	0xFE7
 14680                           postinc1	equ	0xFE6
 14681                           postdec1	equ	0xFE5
 14682                           preinc1	equ	0xFE4
 14683                           plusw1	equ	0xFE3
 14684                           fsr1h	equ	0xFE2
 14685                           fsr1l	equ	0xFE1
 14686                           bsr	equ	0xFE0
 14687                           indf2	equ	0xFDF
 14688                           postinc2	equ	0xFDE
 14689                           postdec2	equ	0xFDD
 14690                           preinc2	equ	0xFDC
 14691                           plusw2	equ	0xFDB
 14692                           fsr2h	equ	0xFDA
 14693                           fsr2l	equ	0xFD9
 14694                           status	equ	0xFD8

Data Sizes:
    Strings     73
    Constant    0
    Data        0
    BSS         190
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      95
    BANK0           160    138     159
    BANK1           256    124     234
    BANK2           256      0      60
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 3
		 -> vfpfcnvrt@ct(BANK0[3]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 3
		 -> vfpfcnvrt@ct(BANK0[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 100
		 -> colourcards_testing@buf(BANK1[100]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    efgtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_1(CODE[54]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> colourcards_testing@buf(BANK1[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2602_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 100
		 -> colourcards_testing@buf(BANK1[100]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 100
		 -> colourcards_testing@buf(BANK1[100]), 

    DCmotors_testing@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    DCmotors_testing@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    DCmotors_calibration@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    DCmotors_calibration@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnright@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnright@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnleft@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnleft@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    right@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    right@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    right@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    right@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    right@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    right@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    left@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    left@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    left@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    left@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    left@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    left@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverse@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    reverse@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    reverse@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverse@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    reverse@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    reverse@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    forward@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    forward@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    DCmotors_setPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    DCmotors_setPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    DCmotors_setPWM@m	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> colourcards_testing@buf(BANK1[100]), 

    colourclick_readRGBC@tmpval	PTR struct . size(2) Largest target is 8
		 -> colourclick_calibration@current(COMRAM[8]), colourclick_calibration@initial(COMRAM[8]), colourcards_testing@current(BANK1[8]), main@current(BANK0[8]), 

    colourcards_readRGBC@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    colourcards_readRGBC@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    colourcards_readRGBC@tmpval	PTR struct . size(2) Largest target is 8
		 -> main@current(BANK0[8]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    S45$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S45$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 


Critical Paths under _main in COMRAM

    _main->_colourcards_testing
    _colourclick_init->_colourclick_writetoaddr
    _colourclick_writetoaddr->_I2C_2_Master_Write
    _colourclickLEDs_init->_colourclickLEDs_C
    _colourclick_calibration->_colourclick_readRGBC
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf
    _tolower->_isupper
    _floorf->___fldiv
    ___flsub->___flmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _sendStringSerial4->_sendCharSerial4
    _colourcards_readRGBC->___fldiv
    _colourcards_readRGBC->_turnleft
    _colourcards_readRGBC->_turnright
    _colourclick_readRGBC->_colourclick_readB
    _colourclick_readRGBC->_colourclick_readC
    _colourclick_readRGBC->_colourclick_readG
    _colourclick_readRGBC->_colourclick_readR
    _colourclick_readR->_I2C_2_Master_Read
    _colourclick_readG->_I2C_2_Master_Read
    _colourclick_readC->_I2C_2_Master_Read
    _colourclick_readB->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___flge->___flmul
    ___fldiv->___xxtofl
    _checkbatterylevel->_ADC_getval
    _DCmotors_testing->_turnleft
    _DCmotors_testing->_turnright
    _reverse->_DCmotors_setPWM
    _forward->_DCmotors_setPWM
    _DCmotors_calibration->_turnleft
    _DCmotors_calibration->_turnright
    _turnright->_left
    _turnright->_right
    _turnleft->_left
    _turnleft->_right
    _right->_DCmotors_setPWM
    _left->_DCmotors_setPWM
    _stop->_DCmotors_setPWM
    _DCmotors_setPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _colourcards_testing->_sprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa

Critical Paths under _main in BANK1

    _main->_colourcards_testing

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0  136082
                                             91 COMRAM     2     2      0
                                            112 BANK0     26    26      0
                           _ADC_init
               _DCmotors_calibration
                      _DCmotors_init
                   _DCmotors_testing
                        _USART4_init
                  _checkbatterylevel
               _colourcards_readRGBC
                _colourcards_testing
                  _colourclickLEDs_C
            _colourclick_calibration
                   _colourclick_init
               _colourclick_readRGBC
                            _forward
                    _interrupts_init
 ---------------------------------------------------------------------------------
 (1) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colourclick_init                                     1     1      0     360
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
               _colourclickLEDs_init
            _colourclick_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _colourclick_writetoaddr                              2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _colourclickLEDs_init                                 0     0      0      66
                  _colourclickLEDs_C
 ---------------------------------------------------------------------------------
 (3) _colourclickLEDs_C                                    1     1      0      66
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colourclick_calibration                             19    19      0    1210
                                             13 COMRAM    19    19      0
               _colourclick_readRGBC
 ---------------------------------------------------------------------------------
 (1) _colourcards_testing                                126   126      0   44201
                                             89 COMRAM     2     2      0
                                              0 BANK1    124   124      0
                            ___fldiv
                           ___xxtofl
               _colourclick_readRGBC
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             38    10     28   38559
                                             76 BANK0     36     8     28
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   38200
                                             81 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           48    42      6   37824
                                             71 COMRAM    10     4      6
                                             56 BANK0     20    20      0
                               _atoi
                               _dtoa
                             _efgtoa
                              _fputc
                            _isdigit
                            _isupper
                            _strncmp
                            _tolower
 ---------------------------------------------------------------------------------
 (5) _strncmp                                             11     5      6     453
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _efgtoa                                              68    61      7   27062
                                             59 COMRAM    12     5      7
                                              0 BANK0     56    56      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (5) _tolower                                              8     6      2     944
                                              6 COMRAM     8     6      2
                            _isupper
 ---------------------------------------------------------------------------------
 (6) _isupper                                              6     4      2     465
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strcpy                                              10     6      4     856
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (6) _floorf                                              20    16      4     490
                                             39 COMRAM    20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fpclassifyf                                       14    10      4     287
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4     381
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (6) ___flsub                                              8     0      8    2889
                                             25 COMRAM     8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___fladd                                             16     8      8    2414
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (6) ___flneg                                              4     0      4     121
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    2656
                                              0 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (6) ___fleq                                              12     4      8     646
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    5042
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3393
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _atoi                                                15    13      2    1440
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     143
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _colourcards_readRGBC                                22    16      6   37501
                                             39 COMRAM    22    16      6
                            ___fldiv
                             ___flge
                           ___xxtofl
               _colourclick_readRGBC
                            _forward
                            _reverse
                               _stop
                           _turnleft
                          _turnright
 ---------------------------------------------------------------------------------
 (1) _colourclick_readRGBC                                 2     0      2     920
                                             11 COMRAM     2     0      2
                  _colourclick_readB
                  _colourclick_readC
                  _colourclick_readG
                  _colourclick_readR
 ---------------------------------------------------------------------------------
 (2) _colourclick_readR                                    7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _colourclick_readG                                    7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _colourclick_readC                                    7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _colourclick_readB                                    7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1224
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    4438
                                             25 COMRAM    12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fldiv                                             25    17      8    2909
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _checkbatterylevel                                    1     1      0      46
                                              1 COMRAM     1     1      0
                         _ADC_getval
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART4_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCmotors_testing                                     6     2      4   27293
                                             39 COMRAM     6     2      4
                            _forward
                            _reverse
                               _stop
                           _turnleft
                          _turnright
 ---------------------------------------------------------------------------------
 (2) _reverse                                              6     2      4    2971
                                             25 COMRAM     6     2      4
                    _DCmotors_setPWM
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    2971
                                             25 COMRAM     6     2      4
                    _DCmotors_setPWM
 ---------------------------------------------------------------------------------
 (1) _DCmotors_init                                        1     1      0      22
                                              0 COMRAM     1     1      0
                     _buggyLEDs_init
                  _clicker2LEDs_init
               _clicker2buttons_init
 ---------------------------------------------------------------------------------
 (2) _clicker2buttons_init                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clicker2LEDs_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCmotors_calibration                                 6     2      4   20869
                                             39 COMRAM     6     2      4
                 _DCmotors_adjustval
                               _stop
                           _turnleft
                          _turnright
 ---------------------------------------------------------------------------------
 (2) _turnright                                            6     0      6    8442
                                             33 COMRAM     6     0      6
                               _left
                              _right
 ---------------------------------------------------------------------------------
 (2) _turnleft                                             6     0      6    7758
                                             33 COMRAM     6     0      6
                               _left
                              _right
 ---------------------------------------------------------------------------------
 (3) _right                                                8     2      6    3015
                                             25 COMRAM     8     2      6
                    _DCmotors_setPWM
 ---------------------------------------------------------------------------------
 (3) _left                                                 8     2      6    3015
                                             25 COMRAM     8     2      6
                    _DCmotors_setPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    4295
                                             25 COMRAM     6     2      4
                    _DCmotors_setPWM
 ---------------------------------------------------------------------------------
 (2) _DCmotors_setPWM                                     11     9      2    2339
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     599
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     648
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _DCmotors_adjustval                                   3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _DCmotors_calibration
     _DCmotors_adjustval
     _stop
       _DCmotors_setPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnleft
       _left
         _DCmotors_setPWM
       _right
         _DCmotors_setPWM
     _turnright
       _left
       _right
   _DCmotors_init
     _buggyLEDs_init
     _clicker2LEDs_init
     _clicker2buttons_init
   _DCmotors_testing
     _forward
       _DCmotors_setPWM
     _reverse
       _DCmotors_setPWM
     _stop
     _turnleft
     _turnright
   _USART4_init
   _checkbatterylevel
     _ADC_getval
   _colourcards_readRGBC
     ___fldiv
       ___xxtofl (ARG)
     ___flge
       ___flmul (ARG)
     ___xxtofl
     _colourclick_readRGBC
       _colourclick_readB
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _colourclick_readC
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _colourclick_readG
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _colourclick_readR
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _forward
     _reverse
     _stop
     _turnleft
     _turnright
   _colourcards_testing
     ___fldiv
     ___xxtofl
     _colourclick_readRGBC
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
               _strlen
           _efgtoa
             ___awdiv
             ___awmod
             ___fladd
             ___fldiv
             ___fleq
             ___flge
             ___flmul
             ___flneg
             ___flsub
               ___fladd
               ___flmul (ARG)
             ___fltol
             ___fpclassifyf
             _floorf
               ___fldiv (ARG)
             _isupper
             _pad
             _strcpy
             _tolower
               _isupper
           _fputc
           _isdigit
           _isupper
           _strncmp
           _tolower
   _colourclickLEDs_C
   _colourclick_calibration
     _colourclick_readRGBC
   _colourclick_init
     _I2C_2_Master_Init
     _colourclickLEDs_init
       _colourclickLEDs_C
     _colourclick_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _colourclick_readRGBC
   _forward
   _interrupts_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      3C      10       23.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     7C      EA       7       91.4%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8A      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5F       1      100.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     224       8        0.0%
DATA                 0      0     224       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Dec 12 11:59:02 2021

                    ___fldiv@aexp 000026                      ___fldiv@bexp 000025  
                    ___fldiv@sign 00001E                                l75 00009A  
                              l79 0000B6             __end_of_DCmotors_init 000050  
                    ___awdiv@sign 00000B               ___wmul@multiplicand 000002  
                             l220 00004E                               l302 000008  
                             l214 000036                               l223 00004E  
                             l232 00005C                               l240 00000E  
                             l305 000014                               l401 00001E  
                             l217 00001E                               l226 00004E  
                             l410 000002                               l314 000020  
                             l243 00003A                               l164 000816  
                             l308 00000C                               l229 00004E  
                             l413 000016                               l173 00020A  
                             l245 000048                               l341 000028  
                             l270 000016                               l350 000008  
                             l238 000000                               l511 00004E  
                             l167 000870                               l264 000018  
                             l344 000000                               l601 000054  
                             l521 00001C                               l353 000008  
                             l249 0000F2                               l610 000024  
                             l362 000040                               l531 000098  
                             l267 000002                               l523 00001E  
                             l347 000026                               l419 00002E  
                             l604 00009E                               l356 000008  
                             l269 000010                               l518 0001D2  
                             l550 0000BC                               l526 000068  
                             l534 000068                               l607 000234  
                             l359 00000A                               l546 00007A  
                             l554 0000F2                               l562 0000F2  
                             l547 00007C                               l555 0000F4  
                             l563 0000F4                               l299 00000A  
                             l539 000098                               l580 00001C  
                             l724 000186                               l573 00004E  
                             l581 00004E                               l558 0000BC  
                             l590 0000A4                               l591 0000D6  
                             l568 00004E                               l576 000000  
                             l841 0000C2                               l737 000162  
                             l586 000088                               l907 000104  
                             l596 000110                               l854 0000AE  
                             l599 000004                               l880 000102  
                             l875 0000BC                               l884 000036  
                             l869 0000A8                               _abs 000000  
                             _pad 000000                      ___awmod@sign 000005  
                             wreg 000FE8                      ___flmul@aexp 000011  
                    ___flmul@bexp 000012                      ___flmul@sign 00000C  
                    ___flmul@temp 000017             ?_colourclick_readRGBC 00000B  
                    ___flmul@prod 000013               __size_of_ADC_getval 000000  
                    ___fltol@exp1 000009        colourcards_readRGBC@tmpval 000027  
                            l1203 00023E                              ?_abs 000012  
                            l1140 0001A2                              l1205 0002B6  
                            l1206 0002A4                              l1231 0002BA  
                            l1224 0000C4                              l1241 0003EA  
                            l1233 000332                              l1234 000320  
                            l1138 0001EE                              l1331 000046  
                            l1155 000308                              l1147 0004BE  
                            l1139 0001DC                              l1228 000428  
                            l1164 0003D8                              l1180 000044  
                            l1165 0003C6                              l1334 000088  
                            l1342 0000A0                              l1192 000398  
                            l1272 0000EE                              l1504 000036  
                            l1336 0000C4                              l1344 0000A8  
                            l4000 000386                              l1600 00005C  
                            l1265 000056                              l1194 0001F8  
                            l1362 0002E2                              l4010 0003BE  
                            l4002 000388                              l1426 00082C  
                            l1610 0000E0                              l1507 00003E  
                            l1268 0001B2                              l4100 0000CE  
                            l4020 00043C                              l4004 000396  
                            l1620 000056                              l1380 000C56  
                            l1197 0001BC                              l4102 0000FC  
                            l4110 000136                              l1606 000034  
                            l4030 000482                              l4014 0003E8  
                            l4022 00043E                              l4006 00039A  
                            l1279 00014A                              l1535 00019A  
                            l4200 0000FE                              l4112 000146  
                            l4104 00011C                              l4120 000004  
                            l4040 0004AC                              l4032 000490  
                            l4024 00044E                              l4016 0003F4  
                            l4008 0003A8                              l1544 000210  
                            l5000 000A22                              l1288 000050  
                            l1625 00005E                              l1554 000036  
                            l1562 000050                              l1538 0001A2  
                            l4114 000166                              l4106 00011E  
                            l4130 000064                              l4122 000012  
                            l4050 00001E                              l4042 0004AE  
                            l4034 000496                              l4026 00045E  
                            l4018 000402                              l5010 000A8C  
                            l5002 000A40                              l1482 0004AA  
                            l1474 000568                              l1547 000154  
                            l4220 000180                              l4212 000136  
                            l4204 000112                              l5100 0000A6  
                            l4108 000130                              l4140 0000DA  
                            l4132 000082                              l4124 000032  
                            l4052 000022                              l4060 000028  
                            l4300 00002C                              l4036 000498  
                            l4028 00047E                              l5020 000ACA  
                            l5012 000A90                              l5004 000A5C  
                            l4070 00001C                              l4230 0001C6  
                            l4222 000188                              l4214 000150  
                            l4206 000122                              l5110 00015A  
                            l5102 0000DE                              l4150 000142  
                            l4142 0000FA                              l4134 00008A  
                            l4126 000036                              l4118 000000  
                            l4046 000000                              l4054 000000  
                            l4310 000068                              l4302 00003C  
                            l4038 00049E                              l5030 000AFC  
                            l5022 000AD2                              l5014 000AA0  
                            l5006 000A6E                              l1398 0003EC  
                            l1583 0000C8                              l1591 000042  
                            l4240 00021E                              l4232 0001E4  
                            l4224 000198                              l4216 000160  
                            l4208 000122                              l4160 00001C  
                            l5112 00016C                              l6000 0000C8  
                            l4080 000032                              l4144 00010C  
                            l4136 00009E                              l4128 000044  
                            l4048 00000C                              l4056 00000C  
                            l4400 00038A                              l4320 00009E  
                            l4312 00006E                              l4304 00004C  
                            l1568 000036                              l4064 000000  
                            l5032 000B02                              l5040 000B52  
                            l5024 000AE0                              l5016 000AB2  
                            l5008 000A7C                              l5120 000000  
                            l5200 0000B2                              l1488 00005C  
                            l1489 000064                              l4250 00025C  
                            l4242 000224                              l4234 0001E6  
                            l4226 0001AC                              l4218 000170  
                            l4162 00002C                              l4170 000056  
                            l4154 000000                              l5114 00017E  
                            l5106 000118                              l4090 000074  
                            l4082 000036                              l4074 000000  
                            l4138 0000AC                              l4146 000112  
                            l1594 000000                              l4058 000010  
                            l4410 0003FE                              l4402 0003A4  
                            l4322 0000AE                              l4314 00007C  
                            l4306 000052                              l5050 000BA2  
                            l5042 000B64                              l5034 000B28  
                            l5026 000AE8                              l5018 000ABA  
                            l5130 00005C                              l5122 00002A  
                            l5210 000166                              l5202 0000EC  
                            l1499 0000FC                              l4068 000000  
                            l4260 0002C6                              l4252 000260  
                            l4244 00022E                              l4236 0001F6  
                            l4228 0001BA                              l4180 000082  
                            l4172 000066                              l4164 00003C  
                            l4156 00000C                              l5140 000000  
                            l5300 000046                              l4092 000092  
                            l4084 000044                              l4076 000004  
                            l4148 000122                              l4500 00008E  
                            l4412 00040C                              l4404 0003B8  
                            l4340 000130                              l4332 0000F8  
                            l4324 0000B4                              l4316 00007E  
                            l4308 000062                              l5052 000BAA  
                            l5044 000B7E                              l5036 000B44  
                            l5028 000AF0                              l5132 00007C  
                            l5220 0001F4                              l5204 00010C  
                            l5212 000178                              l4430 000004  
                            l4270 000328                              l4262 0002D2  
                            l4254 00026E                              l4246 00023C  
                            l4238 000208                              l4182 000092  
                            l4190 0000BC                              l4174 00006C  
                            l4166 00004C                              l4158 00001A  
                            l5142 000004                              l5150 000004  
                            l5310 000002                              l4094 00009A  
                            l4086 000064                              l4078 000012  
                            l4502 00009E                              l4510 00002E  
                            l4414 00040E                              l4406 0003D2  
                            l4350 00017A                              l4342 000148  
                            l4334 000104                              l4326 0000D4  
                            l4318 00008E                              l4422 000000  
                            l5070 000C30                              l5062 000BFA  
                            l5054 000BBA                              l5046 000B84  
                            l5038 000B4C                              l5134 00008E  
                            l5126 000036                              l5222 00022A  
                            l5214 00019E                              l5206 00011A  
                            l4440 000034                              l4432 000012  
                            l5400 000000                              l5320 00005E  
                            l4280 000386                              l4272 00033E  
                            l4264 0002E0                              l4256 00029C  
                            l4248 00024E                              l4192 0000CC  
                            l4184 0000A2                              l4176 000072  
                            l4168 00004E                              l5160 00000E  
                            l5152 000000                              l5144 000002  
                            l5304 000000                              l5312 000012  
                            l5080 000014                              l4096 0000AE  
                            l4088 000068                              l4600 000010  
                            l4504 0000A6                              l4520 0000A6  
                            l4512 00003E                              l4408 0003EE  
                            l4416 000414                              l4360 0001D0  
                            l4352 00018A                              l4344 000154  
                            l4336 00010E                              l4328 0000E4  
                            l4424 000010                              l5072 000C36  
                            l5064 000C0C                              l5056 000BC0  
                            l5048 000B96                              l5136 0000BA  
                            l5128 000044                              l5240 000364  
                            l5232 0002FA                              l5224 000252  
                            l5216 0001AE                              l4450 000062  
                            l4442 000038                              l4434 00001A  
                            l5170 000000                              l5402 000006  
                            l5410 00004A                              l5330 0000A4  
                            l5322 000068                              l5314 000000  
                            l4282 00038C                              l4274 000358  
                            l4266 00030A                              l4194 0000E2  
                            l4186 0000B2                              l4178 000080  
                            l4530 00006C                              l5162 000016  
                            l5154 000004                              l5146 000006  
                            l5306 000046                              l5090 00007A  
                            l5082 000018                              l4098 0000BC  
                            l4610 000066                              l4602 000024  
                            l4514 00006C                              l4418 000418  
                            l4370 000274                              l4362 0001EC  
                            l4354 000196                              l4346 000160  
                            l4338 000124                              l5066 000C18  
                            l5058 000BC6                              l5250 000434  
                            l5234 00030C                              l5226 00027A  
                            l5218 0001E4                              l4460 000096  
                            l4452 000070                              l4444 000040  
                            l4436 00001E                              l4428 000000  
                            l5180 000100                              l5172 00001C  
                            l5412 000062                              l5404 00001A  
                            l5332 0000D8                              l5324 000082  
                            l5316 000024                              l5340 00005E  
                            l4284 00038E                              l4276 000374  
                            l4268 00030E                              l4196 0000F2  
                            l4188 0000B4                              l4540 0000FA  
                            l4532 00007C                              l4524 000000  
                            l5500 000066                              l5164 00003C  
                            l5156 000002                              l5148 000000  
                            l4700 00004A                              l5084 00001C  
                            l4620 000000                              l4612 00006A  
                            l4604 000032                              l4516 00007C  
                            l4508 000000                              l4380 0002CA  
                            l4372 000282                              l4364 0001F8  
                            l4356 0001A6                              l4348 00016E  
                            l4292 000000                              l3900 000114  
                            l5068 000C20                              l5252 000446  
                            l5260 0004BE                              l5236 000326  
                            l5244 000390                              l5228 0002C2  
                            l5420 000022                              l4462 00009C  
                            l4454 000076                              l4446 000052  
                            l4438 00002C                              l5182 00016A  
                            l5174 00007E                              l5406 000026  
                            l5326 00008C                              l5318 000042  
                            l5350 0000A4                              l5342 000068  
                            l5334 000000                              l4278 000378  
                            l4198 0000FA                              l4542 000100  
                            l4534 00008A                              l4526 00002E  
                            l5510 0000A4                              l5502 00007C  
                            l5166 00003E                              l5158 000006  
                            l5430 000012                              l5094 000080  
                            l5086 00003C                              l5078 000000  
                            l4622 00001A                              l3830 000000  
                            l4614 000098                              l4606 00003E  
                            l4710 000020                              l4518 0000A0  
                            l4382 0002D8                              l4374 0002A0  
                            l4366 000214                              l4358 0001C0  
                            l4294 00000C                              l4550 000026  
                            l3910 000128                              l3902 000118  
                            l4630 000086                              l5262 0004E6  
                            l5270 000514                              l5254 00047A  
                            l5246 0003BE                              l5238 000334  
                            l5190 000048                              l5422 00003E  
                            l5414 000000                              ?_pad 000010  
                            l4456 00008C                              l4448 00005A  
                            l4464 0000A2                              l5176 0000C4  
                            l5408 000032                              l5328 000098  
                            l5352 0000D8                              l5344 000082  
                            l5336 000024                              l5600 00000E  
                            l4536 00009C                              l4528 00003E  
                            l5520 00012C                              l5512 0000D6  
                            l4704 000000                              l5432 000016  
                            l5096 000096                              l5088 000076  
                            l3840 000082                              l3832 000012  
                            l4616 0000AC                              l4608 000052  
                            l4720 000094                              l4712 000048  
                            l4480 00001E                              l4472 000000  
                            l4392 000342                              l4384 0002DC  
                            l4376 0002AA                              l4368 00023E  
                            l4296 00001A                              l3920 00013C  
                            l3912 00012C                              l3904 00011C  
                            l4560 00002A                              l4632 000092  
                            l4624 000000                              l4800 0000BA  
                            l5272 000522                              l5264 0004F4  
                            l5192 00004C                              l5184 000000  
                            l5360 00003C                              l5416 000012  
                            l5440 000012                              l4466 0000B2  
                            l4458 000094                              l5178 0000E4  
                            l5346 00008C                              l5338 000042  
                            l5370 000050                              l5362 000000  
                            l5602 000018                              l5610 000006  
                            l4538 0000AA                              l5530 000182  
                            l5522 00013A                              l5514 0000D8  
                            l5506 000090                              l4706 000010  
                            l5426 000000                              l5098 00009E  
                            l3834 000024                              l4730 0000DE  
                            l4722 0000B0                              l4714 000068  
                            l4490 000056                              l4482 00002C  
                            l4474 000004                              l4394 00034E  
                            l4386 0002EA                              l4378 0002B8  
                            l4298 00001C                              l4546 000000  
                            l3930 00019A                              l3914 000130  
                            l3906 000120                              l3922 000140  
                            l3850 00001C                              l4570 000078  
                            l4562 000054                              l4554 000000  
                            l4642 0000F4                              l4626 000020  
                            l4650 000000                              l4810 000144  
                            l4802 0000E0                              l5266 000508  
                            l5194 000074                              l5186 000028  
                            l5354 000000                              l5418 00001A  
                            l5442 000014                              l5434 000000  
                            l5450 000006                              l5540 000000  
                            l4468 0000BA                              l5348 000098  
                            l5380 000032                              l5460 000000  
                            l5372 000080                              l5364 000024  
                            l5700 000042                              l5604 00001A  
                            l5452 000000                              l5612 000016  
                            l5532 000192                              l5524 000158  
                            l5516 0000E4                              l5508 000098  
                            l5292 000000                              l5428 000004  
                            l3836 00002E                              l4740 00017C  
                            l4732 0000E8                              l4724 0000C2  
                            l4716 000078                              l4708 000000  
                            l4492 000064                              l4484 000034  
                            l4476 000012                              l4396 00035C  
                            l4388 000318                              l4548 000016  
                            l3940 0001D0                              l3932 0001B0  
                            l3924 000144                              l3916 000134  
                            l3908 000124                              l3852 00002C  
                            l3860 000056                              l3844 000000  
                            l4580 0000A4                              l4564 000056  
                            l4556 000016                              l4628 00005E  
                            l4636 00009E                              l4660 000000  
                            l4900 0004F0                              l4820 0001B4  
                            l4812 00015C                              l5196 00007C  
                            l5188 000036                              l5276 00052E  
                            l5356 000008                              l5620 000034  
                            l5444 000016                              l5436 00000A  
                            l5284 000002                              l5542 00000A  
                            l5470 000012                              l5382 000000  
                            l5462 000000                              l5366 000038  
                            l5390 000024                              l5710 0000E6  
                            l5702 000056                              l5606 00001C  
                            l5454 000014                              l5534 0001A0  
                            l5526 00015A                              l5518 000120  
                            l5294 000046                              l5286 000000  
                            l5374 000000                              l3838 00004C  
                            l4750 00024C                              l4734 0000EE  
                            l4742 0001E0                              l4726 0000D0  
                            l4718 00007A                              l4494 00007A  
                            l4486 000046                              l4478 00001A  
                            l4398 000386                              l3950 000220  
                            l3942 0001DA                              l3934 0001BC  
                            l3926 00016E                              l3918 000138  
                            l3870 000086                              l3862 000066  
                            l3854 00003C                              l3846 00000C  
                            l4590 0000D4                              l4566 000066  
                            l4638 0000B0                              l4662 000020  
                            l4646 000000                              l4654 000036  
                            l4910 000536                              l4902 000502  
                            l4814 000166                              l4806 000116  
                            l5278 000556                              l5198 00008A  
                            l5358 000016                              l5630 000056  
                            l5622 000036                              l5614 000000  
                            l5438 000010                              l5446 000002  
                            l5550 000000                              l5544 000012  
                            l5480 000062                              l5472 000014  
                            l5464 000000                              l5384 000012  
                            l5376 000000                              l5368 000044  
                            l5392 000038                              l5720 00018A  
                            l5712 0000FA                              l5704 00006A  
                            l5608 000000                              l5536 0001A2  
                            l5528 00015E                              l5288 000046  
                            l5800 00067E                              l4760 000296  
                            l4744 0001FA                              l4752 00025C  
                            l4736 000170                              l4728 0000D6  
                            l4496 000082                              l4488 00004E  
                            l3960 00025C                              l3952 000230  
                            l3944 0001FC                              l3936 0001C0  
                            l3928 00018A                              l3880 0000C6  
                            l3872 000094                              l3864 00006C  
                            l3856 00004C                              l3848 00001A  
                            l4592 0000E4                              l4576 000090  
                            l4568 00006A                              l4680 0001C8  
                            l4672 000108                              l4664 000076  
                            l4648 000010                              l4656 000048  
                            l4920 00064A                              l4912 00059A  
                            l4904 00050A                              l4824 0001EA  
                            l4808 000128                              l5640 0000BE  
                            l5632 00006C                              l5616 000010  
                            l5448 000000                              l5560 000032  
                            l5552 000004                              l5546 000014  
                            l5482 000064                              l5490 00008C  
                            l5474 00001E                              l5386 000032  
                            l5378 000012                              l5650 00000E  
                            l5458 000000                              l5570 00001E  
                            l5562 000002                              l5394 000044  
                            l5730 000232                              l5722 0001D2  
                            l5714 000142                              l5706 0000B2  
                            l5298 000000                              l5810 000734  
                            l5802 0006B0                              l4762 0002A2  
                            l4754 00026E                              l4746 000218  
                            l4738 000176                              l4498 000088  
                            l3970 0002A2                              l3962 00026A  
                            l3954 00023E                              l3946 00020C  
                            l3938 0001CE                              l3890 000100  
                            l3882 0000C8                              l3874 000096  
                            l3866 00007E                              l3858 00004E  
                            l4594 0000F4                              l4586 0000B8  
                            l4578 00009A                              l4682 0001F0  
                            l4674 000144                              l4666 00008A  
                            l4930 000708                              l4922 00067E  
                            l4914 0005F2                              l4906 000512  
                            l4850 00034C                              l4842 000284  
                            l4826 0001FC                              l4818 00018E  
                            l4770 000000                              l5642 0000C6  
                            l5634 000084                              l5618 00001C  
                            l5554 00000E                              l5548 000016  
                            l5492 00008E                              l5484 00006E  
                            l5476 000036                              l5660 000086  
                            l5652 00001E                              l5580 000028  
                            l5572 000020                              l5564 000016  
                            l5396 000050                              l5388 000000  
                            l5724 0001EA                              l5716 00015A  
                            l5708 0000CA                              l5820 0007A8  
                            l5812 000766                              l5740 0001E4  
                            l5732 000000                              l4692 000000  
                            l4764 0002AA                              l4756 00027E  
                            l4748 000232                              l3980 00031E  
                            l3972 0002D6                              l3964 00026C  
                            l3956 00024C                              l3892 000104  
                            l3876 0000A6                              l3884 0000D0  
                            l3868 000080                              l4588 0000C4  
                            l4684 000200                              l4668 000098  
                            l4676 000178                              l4940 0007DC  
                            l4932 000718                              l4924 0006B0  
                            l4916 000626                              l4908 000522  
                            l4860 0003AC                              l4852 000354  
                            l4844 0002B8                              l4828 000218  
                            l4836 000234                              l4780 000054  
                            l4772 00000A                              l5644 0000DE  
                            l5636 000090                              l5628 00004A  
                            l5556 00001E                              l5900 0000F2  
                            l5486 000086                              l5478 000038  
                            l5670 00010A                              l5662 000096  
                            l5654 00005C                              l5590 000046  
                            l5582 00002A                              l5574 000022  
                            l5566 00001A                              l5398 000080  
                            l5726 000206                              l5718 000176  
                            l5494 000002                              l5830 00080E  
                            l5822 0007B4                              l5814 000782  
                            l5806 0006D0                              l5750 0002A0  
                            l5742 000216                              l5734 000004  
                            l4694 000004                              l4598 000000  
                            l4758 000284                              l4766 0002BA  
                            l3990 00035A                              l3982 00032E  
                            l3974 0002D8                              l3966 000276  
                            l3958 000258                              l3894 000108  
                            l3886 0000E0                              l3878 0000B6  
                            l4678 0001B4                              l4950 000824  
                            l4942 0007F0                              l4934 00074C  
                            l4926 0006C6                              l4918 00062C  
                            l4862 0003BE                              l4846 0002BE  
                            l4854 000386                              l4838 00024E  
                            l4790 000098                              l4782 00005E  
                            l4774 00001A                              l5646 0000E0  
                            l5638 0000A6                              l5558 000028  
                            l5902 000106                              l5672 00010E  
                            l5664 0000A6                              l5656 00006A  
                            l5648 000000                              l5592 00004A  
                            l5584 000034                              l5576 000024  
                            l5568 00001C                              l5728 00021A  
                            l5496 000012                              l5832 000818  
                            l5824 0007D8                              l5816 000788  
                            l5808 000702                              l5760 000356  
                            l5752 0002D2                              l5744 000232  
                            l5736 000180                              l4688 000000  
                            l4696 000018                              l3992 00035C  
                            l3976 0002E8                              l3968 00027C  
                            l3896 00010C                              l3888 0000F2  
                            l4960 0008E0                              l4952 000848  
                            l4936 0007A2                              l4944 0007F4  
                            l4928 0006F8                              l4880 00046E  
                            l4864 0003C6                              l4856 000396  
                            l4848 000318                              l4792 0000A4  
                            l4784 000066                              l4776 000028  
                            l5680 000066                              l5904 000118  
                            l5666 0000E4                              l5658 000082  
                            l5586 000036                              l5578 000026  
                            l5594 000000                              l5498 000020  
                            l5834 000834                              l5826 0007FA  
                            l5818 000790                              l5770 00040C  
                            l5762 000388                              l5842 000868  
                            l5738 0001B2                              l5746 00023C  
                            l4698 000046                              l3994 00036A  
                            l3986 000342                              l3978 0002F8  
                            l3898 000110                              l4970 000926  
                            l4962 0008EE                              l4954 0008AC  
                            l4946 000804                              l4938 0007A8  
                            l4890 0004A6                              l4882 000476  
                            l4874 00040A                              l4866 0003E0  
                            l4858 00039A                              l4794 0000AC  
                            l4786 000078                              l4778 000030  
                            l5690 0001F0                              l5682 0000BE  
                            l5674 000000                              l5906 000124  
                            l5850 000022                              l5668 0000F2  
                            l5588 000042                              l5596 00000A  
                            l5844 00086C                              l5828 00080A  
                            l5780 0004EA                              l5772 00043E  
                            l5748 00026E                              l5756 0002F2  
                            l3996 000372                              l3988 00034C  
                            l4980 000950                              l4972 00092A  
                            l4956 0008BC                              l4964 0008F6  
                            l4948 000818                              l4892 0004B4  
                            l4876 00041C                              l4884 00047A  
                            l4868 0003F8                              l4796 0000B0  
                            l4788 000086                              l5692 000208  
                            l5684 000116                              l5676 000002  
                            l5908 000140                              l5860 000038  
                            l5852 000026                              l5694 000000  
                            l5598 00000C                              l5838 000850  
                            l5790 0005C8                              l5782 00051C  
                            l5758 000324                              l5766 0003A8  
                            l3998 000376                              l4990 000984  
                            l4982 000956                              l4974 000930  
                            l4966 000908                              l4958 0008CE  
                            l4894 0004B8                              l4886 000482  
                            l4878 000438                              l4798 0000B4  
                            l5686 00016E                              l5678 00000E  
                            l5870 000056                              l5862 00003E  
                            l5854 00002A                              l5846 000000  
                            l5696 000002                              l5792 0005FA  
                            l5768 0003DA                              l5776 000486  
                            l4976 00093C                              l4968 000916  
                            l4984 00095C                              l4992 00098A  
                            l4896 0004CA                              l4888 000494  
                            l5688 0001E4                              l5880 000076  
                            l5872 00005E                              l5864 000042  
                            l5856 000030                              l5848 00000A  
                            l5698 00002A                              l5778 0004B8  
                            l5786 000564                              l4994 0009E2  
                            l4986 00096E                              l4978 00094C  
                            l4898 0004D8                              l5890 0000B8  
                            l5882 00007A                              l5874 000062  
                            l5866 00004A                              l5858 000034  
                            l5788 000596                              l5796 00061A  
                            l4996 000A16                              l4988 000980  
                            l5892 0000BE                              l5884 000082  
                            l5876 000066                              l5868 000052  
                            l5798 00064C                              l4998 000A1E  
                            l5894 0000D6                              l5886 000086  
                            l5878 00006E                              l5896 0000DA  
                            l5888 0000A8                              l5898 0000EE  
                            STR_1 000001                              STR_2 000037  
                            STR_3 00003F                              STR_6 00003B  
                            STR_7 000043                              u4000 00043C  
                    _BAUD4CONbits 000EE9                              u4001 000438  
                            _LATE 000F7D                              u4010 00044E  
                            u4011 00044A                              _LATG 000F7F  
                            u4100 000012                              u4020 00045E  
                            u4101 00000E                              u4021 00045A  
                            u4110 000044                              u4030 00047E  
                            u4111 000040                              u4031 00047A  
                            u4200 0000AC                              u4040 000490  
                            u5000 000086                              u4121 00006E  
                            u4201 0000A8                              u4041 00048C  
                            u5001 000082                              u4130 000092  
                            u4210 0000DA                              u4050 0004AC  
                            u5010 0000B0                              _T2PR 000FBC  
                            u4131 00008E                              u4211 0000D6  
                            u4051 0004A8                              u5011 0000AC  
                            u4300 000122                              u4140 0000BC  
                            u4220 000122                              u4060 000042  
                            u5100 000048                              u4301 00011E  
                            u4141 0000B8                              u4221 00011E  
                            u4061 00003E                              u4310 000198  
                            u4230 00001A                              u4150 0000FC  
                            u4070 000028                              u5030 0000EA  
                            u5110 000076                              u4311 000194  
                            u4231 000016                              u4151 0000F8  
                            u4071 000024                              u5031 0000E4  
                            u5111 000072                              u4400 0002B2  
                            u4320 0001BA                              u4240 00002C  
                            u5200 000030                              u6000 00016C  
                            u4160 000146                              u5040 0000EC  
                            u5120 000098                              u4080 000030  
                            u4401 0002AE                              u4321 0001B6  
                            u4241 000028                              u5201 00002A  
                            u6001 000168                              u4161 000142  
                            u5025 0000C2                              u5121 000094  
                            u5105 00003E                              u4081 00002A  
                            u4410 0002C6                              u4330 0001E4  
                            u4250 00003C                              u5210 000032  
                            u6010 00017E                              u4170 000012  
                            u5050 00004A                              u4090 000032  
                            u4411 0002C2                              u4331 0001E0  
                            u4251 000038                              u6011 00017A  
                            u4171 00000E                              u6100 000100  
                            u4420 0002E0                              u4340 000208  
                            u4260 000080                              u5220 000018  
                            u4180 000044                              u5300 000094  
                            u4500 00008E                              u3700 00007E  
                            u5140 000104                              u5060 00005C  
                            u6020 00002A                              u6101 0000FC  
                            u4421 0002DC                              u4341 000204  
                            u4261 00007C                              u5221 000014  
                            u4181 000040                              u5301 000090  
                            u4501 00008A                              u3701 00007A  
                            u5141 000100                              u5061 000058  
                            u6021 000026                              u4430 000328  
                            u4350 00021E                              u4270 000092  
                            u5230 000046                              u4190 000082  
                            u3630 000012                              u5310 0000C2  
                            u4510 00009E                              u3710 000094  
                            u5150 000128                              u5070 000030  
                            u6030 00005C                              u4431 000324  
                            u4351 00021A                              u4271 00008E  
                            u5231 000042                              u4191 00007E  
                            u3631 00000E                              u5311 0000BE  
                            u4511 00009A                              u3711 000090  
                            u5135 0000AC                              u5071 00002A  
                            u6031 000058                              u4440 000358  
                            u4360 00023C                              u4280 0000A2  
                            u5240 000010                              u7000 000596  
                            u3640 000024                              u5400 000296  
                            u5320 0000D0                              u4600 000342  
                            u4520 0000D4                              u3800 0001CE  
                            u3720 0000A6                              u5160 000144  
                            u5136 0000B6                              u5080 000032  
                            u6040 00007C                              u6200 0001F4  
                            u4441 000354                              u4361 000238  
                            u4281 00009E                              u5241 00000C  
                            u7001 000592                              u3641 000020  
                            u5401 000292                              u5321 0000CC  
                            u4601 00033E                              u4521 0000D0  
                            u3801 0001CA                              u3721 0000A2  
                            u5161 000140                              u5137 0000C6  
                            u5057 000040                              u6041 000078  
                            u6201 0001F0                              u6114 00015A  
                            u4450 000386                              u4370 00025C  
                            u4290 0000E2                              u5250 000026  
                            u7010 0005C8                              u3650 00004C  
                            u5330 0001FA                              u4610 00035C  
                            u4530 0000E4                              u3810 0001EE  
                            u3730 0000B6                              u5170 000198  
                            u5090 000048                              u5410 000028  
                            u6050 00008E                              u6210 000252  
                            u6130 000028                              u6115 000156  
                            u4451 000382                              u4371 000258  
                            u4291 0000DE                              u5251 000022  
                            u7011 0005C4                              u3651 000048  
                            u5331 0001F6                              u4611 000358  
                            u4531 0000E0                              u3811 0001EA  
                            u3731 0000B2                              u5155 00011E  
                            u5091 000044                              u5411 000024  
                            u6051 00008A                              u6211 00024E  
                            u6131 000024                              u4700 0000B2  
                            u6124 0001C4                              u4380 00026E  
                            u7100 0007FA                              u7020 0005FA  
                            u3660 000082                              u5340 000218  
                            u5260 000030                              u4620 0003A4  
                            u4540 00025E                              u4460 00001A  
                            u3900 00032E                              u3820 0001FC  
                            u3740 0000F2                              u5180 0001B4  
                            u5500 0001E2                              u5420 000078  
                            u6060 0000BA                              u6220 00027A  
                            u6140 000074                              u4701 0000AE  
                            u6125 0001C0                              u4381 00026A  
                            u7101 0007F6                              u7021 0005F6  
                            u3661 00007E                              u5341 000214  
                            u5261 00002A                              u4621 0003A0  
                            u4461 000016                              u3901 00032A  
                            u3821 0001F8                              u3741 0000EE  
                            u5181 0001B0                              u5501 0001DC  
                            u5421 000074                              u6061 0000B6  
                            u6221 000276                              u6141 000070  
                            u4390 00029C                              u6070 00002A  
                            u7110 00080A                              u7030 00064C  
                            u5350 000232                              u5270 000032  
                            u4710 000012                              u4630 0003D2  
                            u4550 0002B8                              u4470 00002C  
                            u3910 00035A                              u3830 00020C  
                            u3750 000100                              u3670 00001A  
                            u5190 0001F0                              u5510 0001E4  
                            u5430 000086                              u6230 00030C  
                            u6150 0000B2                              u4391 000298  
                            u6071 000022                              u7111 000806  
                            u7031 000648                              u5351 00022E  
                            u4711 00000E                              u4631 0003CE  
                            u4551 0002B4                              u4471 000028  
                            u3911 000356                              u3831 000208  
                            u3751 0000FC                              u3671 000016  
                            u5191 0001EC                              u5175 00018E  
                            u5431 000082                              u6231 000308  
                            u6151 0000AE                              u4800 00002E  
                            u7120 000848                              u7040 00067E  
                            u6320 000012                              u5360 00024C  
                            u5280 000048                              u4720 00002C  
                            u4640 00040C                              u4560 0002D8  
                            u4480 00003C                              u3920 00036A  
                            u3840 00023E                              u3760 00016E  
                            u3680 00002C                              u5600 00041C  
                            u5520 0001FC                              u5440 000098  
                            u6240 0003BE                              u6160 00015E  
                            u4801 00002A                              u7121 000842  
                            u7041 00067A                              u6321 00000E  
                            u5361 000248                              u5281 000044  
                            u4721 000028                              u4641 000408  
                            u4561 0002D4                              u4545 000254  
                            u4481 000038                              u3921 000366  
                            u3841 00023A                              u3761 00016A  
                            u3681 000028                              u5601 000418  
                            u5521 0001F8                              u5441 000094  
                            u6241 0003BA                              u6161 000158  
                            u6305 000014                              u4650 000012  
                            u6090 00001C                              u6330 000036  
                            u6410 00005E                              u4810 00006C  
                            u7130 00084A                              u7050 0006B0  
                            u5370 00025C                              u5290 000078  
                            u4730 000046                              u4570 0002EA  
                            u4490 00007C                              u3930 000386  
                            u3850 00024C                              u3770 000186  
                            u3690 00003C                              u5610 000438  
                            u5530 000280                              u5450 0000E0  
                            u6250 00042C                              u6170 000160  
                            u6306 000016                              u4651 00000E  
                            u6091 000018                              u6331 00002E  
                            u6411 00005A                              u4811 000068  
                            u7051 0006AC                              u5371 000258  
                            u5291 000074                              u4731 000042  
                            u4571 0002E6                              u4491 000078  
                            u3931 000382                              u3851 000248  
                            u3771 000180                              u3691 000038  
                            u5611 000434                              u5531 00027C  
                            u5451 0000DC                              u6251 000426  
                            u6315 00001E                              u4660 00002C  
                            u6420 000082                              u6500 000080  
                            u4820 00008A                              u7060 000702  
                            u5380 00026E                              u4740 000064  
                            u4580 000318                              u3940 000396  
                            u3860 00026A                              u3780 000188  
                            u4900 0000B4                              u5700 0006B0  
                            u5620 00046E                              u5540 000314  
                            u5460 00010E                              u6260 00042E  
                            u6180 000178                              u6316 000020  
                            u7140 0000A8                              u4661 000028  
                            u6421 00007E                              u6501 00007C  
                            u4821 000086                              u7061 0006FE  
                            u5381 00026A                              u4741 000060  
                            u4581 000314                              u3941 000392  
                            u3861 000266                              u4901 0000B0  
                            u5701 0006AC                              u5621 00046A  
                            u5541 000310                              u5461 000108  
                            u6181 000174                              u7141 0000A4  
                            u4670 000052                              u6350 00005E  
                            u6430 0000D8                              u6510 000098  
                            u4830 0000AA                              u7070 000734  
                            u5390 00027E                              u4750 00007A  
                            u4590 00032E                              u3950 0003A8  
                            u3870 0002A2                              u3790 0001B0  
                            u4910 0000D4                              u5710 0006F8  
                            u5630 000494                              u5550 000386  
                            u5470 000110                              u6270 000446  
                            u6190 0001AE                              u7150 0000B6  
                            u4671 00004E                              u6351 00005A  
                            u6431 0000D4                              u6511 000094  
                            u4831 0000A6                              u7071 000730  
                            u5391 00027A                              u4751 000076  
                            u4591 00032A                              u3951 0003A4  
                            u3871 00029E                              u3791 0001AC  
                            u4911 0000D0                              u5711 0006F4  
                            u5631 000490                              u5551 000382  
                            u6271 000442                              u6191 0001AA  
                            u7151 0000B2                              u4680 000070  
                            u6520 000062                              u6360 000082  
                            u6440 0000F2                              u6408 000038  
                            u4840 0000FA                              u6600 000020  
                            u6088 00002C                              u7080 000766  
                            u4760 00009E                              u3960 0003BE  
                            u3880 0002E8                              u4920 0000E4  
                            u5800 000908                              u5720 000708  
                            u5640 0004A6                              u5560 0003AC  
                            u5480 000128                              u6280 0004E6  
                            u7160 000118                              u4681 00006C  
                            u6521 00005E                              u6361 00007E  
                            u6441 0000EE                              u4841 0000F6  
                            u6601 00001C                              u7081 000762  
                            u4761 00009A                              u3961 0003BA  
                            u3881 0002E4                              u4921 0000E0  
                            u5801 000904                              u5721 000704  
                            u5641 0004A2                              u5561 0003A8  
                            u5481 000124                              u6281 0004E2  
                            u7161 000114                              u7217 0000C8  
                            u4690 00008C                              u6530 00007A  
                            u6370 0000D8                              u6610 00007C  
                            u7090 0007D8                              u4930 000010  
                            u4770 00002E                              u4850 000016  
                            u3970 0003D4                              u3890 00031E  
                            u5810 000916                              u5730 0007A2  
                            u5650 0004B4                              u5570 0003BE  
                            u5490 0001B4                              u6450 00005C  
                            u4691 000088                              u6531 000076  
                            u6371 0000D4                              u7307 000104  
                            u6611 000078                              u7091 0007D4  
                            u4931 00000C                              u4771 00002A  
                            u4851 000012                              u3971 0003D0  
                            u3891 00031A                              u5811 000912  
                            u5731 00079E                              u5651 0004B0  
                            u5571 0003BA                              u5491 0001B0  
                            u6451 000058                              u7227 000014  
                            u6380 0000F2                              u6348 000038  
                            u6460 000080                              u6620 0000D2  
                            u6540 00002E                              u4940 000032  
                            u4780 00006C                              u3980 0003E8  
                            u4860 000016                              u5900 000B7E  
                            u5820 00096E                              u5740 0007F0  
                            u5660 0004CA                              u5580 0003E0  
                            u6700 00000E                              u6381 0000EE  
                            u6461 00007C                              u7317 00014C  
                            u6621 0000CE                              u6541 00002A  
                            u4941 00002E                              u4781 000068  
                            u3981 0003E4                              u4861 000012  
                            u5901 000B7A                              u5821 00096A  
                            u5741 0007EC                              u5661 0004C6  
                            u5581 0003DC                              u7237 000026  
                            u6701 00000A                              u6390 000036  
                            u6470 000098                              u6550 000010  
                            u6630 00011C                              u4950 000088  
                            u4790 0000A0                              u3990 000402  
                            u4870 00004A                              u5910 000B96  
                            u5830 000A40                              u5750 000818  
                            u5670 0004D8                              u5590 000406  
                            u6710 000048                              u7407 0000AE  
                            u6391 00002E                              u6471 000094  
                            u7327 000194                              u6551 00000C  
                            u6631 000118                              u4951 000084  
                            u4791 00009C                              u3991 0003FE  
                            u5911 000B92                              u5831 000A3C  
                            u5751 000814                              u5671 0004D4  
                            u5591 000402                              u7247 0000D0  
                            u6711 000044                              u6295 00000A  
                            u6560 000012                              u6480 000012  
                            u6800 00006A                              u6640 00013A  
                            u4960 000098                              u4880 000078  
                            u5920 000BF4                              u5840 000A5C  
                            u5760 0008BC                              u5680 000502  
                            u6720 00006C                              u6296 00000C  
                            u6561 00000E                              u7417 00003C  
                            u6481 00000E                              u6801 000066  
                            u7337 0001DC                              u6641 000136  
                            u4961 000094                              u4881 000074  
                            u5921 000BEE                              u5841 000A58  
                            u5761 0008B8                              u5681 0004FE  
                            u7257 0001FA                              u6721 000068  
                            u6570 000062                              u6490 000012  
                            u6810 000096                              u6650 00014A  
                            u4970 00001A                              u4890 00008C  
                            u5930 000BF6                              u5850 000A6E  
                            u5770 0008CE                              u5690 00064A  
                            u6730 000084                              u6571 00005E  
                            u7427 000028                              u6491 00000E  
                            u6811 000092                              u7347 000224  
                            u6651 000146                              u7267 00079A  
                            u4971 000016                              u4891 000088  
                            u4875 000040                              u5851 000A6A  
                            u5771 0008CA                              u5691 000646  
                            u6731 000080                              u6580 00009E  
                            u6820 0000A4                              u6660 000158  
                            u6900 0002D2                              u4980 000040  
                            u5940 000C0C                              u5860 000A7C  
                            u5780 0008E0                              u6740 0000A6  
                            u6581 00009A                              u7437 000042  
                            u6821 0000A0                              u7357 00005A  
                            u7277 000034                              u6661 000154  
                            u6901 0002CE                              u5941 000C08  
                            u5861 000A78                              u5781 0008DC  
                            u6741 0000A2                              u6830 0000E4  
                            u6670 000192                              u6590 000012  
                            u6910 000324                              u5950 00003C  
                            u4990 00005E                              u5870 000AB2  
                            u5790 0008EE                              u6750 0000BE  
                            u7447 000078                              u6831 0000E0  
                            u7367 00005A                              u7287 000074  
                            u6671 00018E                              u6591 00000E  
                            u6911 000320                              u5951 000038  
                            u4991 00005A                              u5871 000AAE  
                            u5791 0008EA                              u6751 0000BA  
                            u6840 0000F2                              u6680 0001A0  
                            u6920 000356                              u5960 000076  
                            u5880 000AE0                              u6760 0000F2  
                            u6841 0000EE                              u7377 000074  
                            u7297 0000BC                              u6681 00019C  
                            u6921 000352                              u5961 000072  
                            u4985 000036                              u5881 000ADC  
                            u6761 0000EE                              u6770 00000E  
                            u6690 000016                              u6930 000388  
                            u6850 0001B2                              u5970 000092  
                            u5890 000B64                              u7387 0000FC  
                            u6771 00000A                              u6691 000012  
                            u6931 000384                              u6851 0001AE  
                            u5971 00008E                              u5891 000B60  
                            u6780 00001C                              u6940 0003DA  
                            u6860 0001E4                              u5980 000154  
                            u7397 0000AE                              u6781 000018  
                            u6941 0003D6                              u6861 0001E0  
                            u5981 00014E                              u6790 00005C  
                            u6950 00040C                              u6870 000216  
                            u5990 000156                              u6791 000058  
                            u6951 000408                              u6871 000212  
                            u6960 00043E                              u6880 00026E  
                            u6961 00043A                              u6881 00026A  
                            u6970 0004B8                              u6890 0002A0  
                            u6971 0004B4                              u6891 00029C  
                            u6980 0004EA                              u6981 0004E6  
                            u6990 00051C                              u6991 000518  
                     main@current 000070           __end_of_DCmotors_setPWM 0001D4  
                            abs@a 000012                              _dbuf 00001E  
                            _atoi 000000                              _main 000000  
                            _dtoa 000000                              _left 000000  
                            _prec 000004                              _nout 000000  
                            pad@i 000017                              pad@p 000014  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            pad@w 000019                              fsr2l 000FD9  
                            _stop 000000                     ___fpclassifyf 000000  
                            prodh 000FF4                              prodl 000FF3  
                            start 000000*                 __end_of_ADC_init 00001A  
                 ___fldiv@new_exp 00001F                      _tolower$2903 00000C  
                    ___param_bank 000000                             ??_abs 000014  
                           ??_pad 000016            ??_clicker2buttons_init 000000  
                   ___fltol@sign1 000008                   __end_of___aodiv 000188  
                           ?_atoi 000007                   __end_of___fladd 0004C0  
                           ?_main 000000                             ?_dtoa 00001B  
                           ?_left 000019                   __end_of___aomod 000164  
                           _ADPCH 000F5F                   __end_of___fldiv 00039A  
                 __end_of___awdiv 0000C4                   __end_of___flneg 000038  
                           STR_10 000047                             STR_12 000000  
                 __end_of___awmod 0000B0                   __end_of___flmul 00042A  
                 __end_of___flsub 000046                   __end_of___fltol 000106  
                           ?_stop 000019                   ___awdiv@divisor 000008  
         _colourclick_writetoaddr 000000                   ___awdiv@counter 00000A  
                    vfpfcnvrt@fmt 000049           __end_of_sendCharSerial4 000018  
      __end_of_I2C_2_Master_Start 00000A        __end_of_I2C_2_Master_Write 00000C  
   __size_of_DCmotors_calibration 000000          ?_colourclick_calibration 000000  
                           _flags 000006          __end_of_DCmotors_testing 000236  
                           _fputc 000000        __end_of_DCmotors_adjustval 0000A0  
                 __end_of_forward 00009A                             _fputs 000000  
                 __end_of_isdigit 000038              colourclickLEDs_C@tog 000000  
                           _right 000000                             atoi@n 000014  
                           pad@fp 000010                             atoi@s 000007  
                           _width 000002                             _putch 000000  
                           dtoa@d 00001D                             dtoa@i 00003D  
               _clicker2LEDs_init 000000                             dtoa@n 000035  
                           dtoa@p 00002F                             dtoa@s 000033  
                           dtoa@w 000031                   __end_of_isspace 000052  
                 __end_of_isupper 000038                             tablat 000FF5  
                 __end_of_reverse 00009A            DCmotors_init@PWMperiod 000000  
              ?_clicker2LEDs_init 000000                             status 000FD8  
                 __end_of_sprintf 000052                    ?___fpclassifyf 000000  
                 __end_of_tolower 000060                   __end_of_strncmp 0000E2  
           _I2C_2_Master_RepStart 000000                   __initialization 000000  
             ??_clicker2LEDs_init 000000                      __end_of_atoi 0001A4  
                    __end_of_main 00014E                      __end_of_dtoa 0002E4  
                    __end_of_left 0000F6                      __end_of_stop 00007E  
   __size_of_colourcards_readRGBC 000000                            ??_atoi 000009  
                          ??_main 00005B                            ??_dtoa 000025  
                          ??_left 00001F                            ??_stop 00001D  
                   __activetblptr 000003            ??_colourclick_readRGBC 00000D  
       __end_of_clicker2LEDs_init 00000A                   _colourcard_flag 00000E  
                          ?_fputc 000000                            ?_fputs 000009  
                          _ADRESH 000F64         __size_of_colourclick_init 000000  
                          ?_right 000019                  ___awdiv@dividend 000006  
                          ?_putch 000000                            _RC0PPS 000E62  
                          _RC4REG 000EE3                            _RE2PPS 000E74  
                          _RD5PPS 000E6F                            _RC7PPS 000E69  
                          _RD6PPS 000E70                  ?_interrupts_init 000000  
                ?_DCmotors_setPWM 00000E                            _RX4PPS 000E15  
                          _TX4REG 000EE4                  __end_of___xxtofl 0001B4  
                    ??_ADC_getval 000000                      vfprintf@cfmt 000057  
                          ___flge 000000                            ___fleq 000000  
          colourcards_readRGBC@mL 000029            colourcards_readRGBC@mR 00002B  
                       ??___aodiv 000010                         ??___fladd 000008  
                       ??___aomod 000010                            ___wmul 000000  
                       ??___fldiv 000016                         ??___awdiv 00000A  
                       ??___flneg 000004                         ??___awmod 000004  
                       ??___flmul 000008                         ??___flsub 000021  
                       ??___fltol 000004                            _efgtoa 000000  
                ??_buggyLEDs_init 000000         colourcards_readRGBC@B_rel 000039  
       colourcards_readRGBC@G_rel 000035                            _floorf 000000  
       ??_colourclick_writetoaddr 000003                            clear_0 000006  
                          clear_1 000012                            clear_2 00001E  
       colourcards_readRGBC@R_rel 000031                  ___awdiv@quotient 00000C  
                 ___awmod@divisor 000002                            isa$std 000001  
                 ___awmod@counter 000004                            pad@buf 000012  
                          dtoa@fp 00001B                            left@mL 000019  
                          left@mR 00001B                            _strcpy 000000  
                          _strlen 000000                            fputc@c 000000  
                          fputs@c 00000D                            fputs@i 00000E  
                          fputs@s 000009                         ??_forward 00001D  
                       ??_isdigit 000002                   ___fpclassifyf@e 000008  
                 ___fpclassifyf@u 00000A                   ___fpclassifyf@x 000000  
                    __mediumconst 000000*                        ??_isspace 000002  
                          tblptrh 000FF7                         ??_isupper 000002  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ?_ADC_init 000000                  ?_sendCharSerial4 000000  
                       ??_reverse 00001D       __end_of_colourcards_testing 00020C  
                          putch@c 000000                  __end_of_vfprintf 000066  
                          stop@mL 000019                            stop@mR 00001B  
                       ??_sprintf 000059                         ??_tolower 000008  
              __end_of_ADC_getval 000018                      ?_USART4_init 000000  
                       ??_strncmp 000006                        ___flge@ff1 000019  
                      ___flge@ff2 00001D                   ??___fpclassifyf 000004  
                    ___xxtofl@arg 00000A                      ___xxtofl@exp 000009  
                    ___xxtofl@val 000000                        ___fleq@ff1 000000  
                      ___fleq@ff2 000004                  __end_of_turnleft 000050  
                      __accesstop 000000*          __end_of__initialization 000028  
      colourcards_testing@current 000074                        ___flneg@f1 000000  
          ?_I2C_2_Master_RepStart 000000                     ___rparam_used 000001  
                      ___fltol@f1 000000                    __pcstackCOMRAM 000000  
                   __end_of_fputc 0000CA                     __end_of_fputs 000044  
                   __end_of_right 0000F6                     __end_of_putch 000002  
   checkbatterylevel@batterylevel 000001                        ??_ADC_init 000000  
      __size_of_clicker2LEDs_init 000000                           ??_fputc 000004  
                         ??_fputs 00000D                           ??_right 00001F  
   __size_of_colourclickLEDs_init 000000                           ??_putch 000000  
 __end_of_colourclick_writetoaddr 000020                        __pbssBANK0 000000  
                      __pbssBANK1 000000                        __pbssBANK2 000000  
               _checkbatterylevel 000000                ?_checkbatterylevel 000000  
                    _T2CLKCONbits 000FBF                           ?___flge 000019  
                         ?___fleq 000000                           ?___wmul 000000  
                         ?_efgtoa 00003B               ??_checkbatterylevel 000001  
                         ?_floorf 000027                           ?_strcpy 000000  
                         ?_strlen 000000                         ?___xxtofl 000000  
                         _SP4BRGH 000EE6                           _SP4BRGL 000EE5  
              __size_of_vfpfcnvrt 000000                           _PWM6DCH 000FA3  
                         _PWM7DCH 000FA0                           _SSP2ADD 000ED6  
                         _SSP2BUF 000ED5                  _colourclick_init 000000  
               ?_DCmotors_testing 000027         __end_of_checkbatterylevel 000020  
              ??_DCmotors_testing 00002B            __size_of_DCmotors_init 000000  
                       _ADREFbits 000F58                _I2C_2_Master_Start 000000  
              _I2C_2_Master_Write 000000                           __Hparam 000000  
    __end_of_DCmotors_calibration 000112                __size_of_turnright 000000  
__size_of_colourclick_calibration 000000                           __Lparam 000000  
              _DCmotors_adjustval 000000           sendStringSerial4@string 000001  
          colourcards_testing@buf 000000                   __size_of___flge 000000  
                 __size_of___fleq 000000                           ___aodiv 000000  
                         ___fladd 000000                           ___aomod 000000  
                         ___fldiv 000000                           ___awdiv 000000  
                         ___flneg 000000                           ___awmod 000000  
                         ___flmul 000000                           ___flsub 000000  
                         ___fltol 000000                   __size_of___wmul 000000  
             ?_I2C_2_Master_Start 000000               ?_I2C_2_Master_Write 000000  
                       ?_vfprintf 000051                      __psmallconst 000000  
                 __size_of_efgtoa 000000                   __size_of_floorf 000000  
                         __pcinit 000000               ?_DCmotors_adjustval 000000  
                         __ramtop 000000*                          __ptext0 000000  
                         __ptext1 000000                           __ptext2 000000  
                         __ptext3 000000                           __ptext4 000000  
                         __ptext5 000000                           __ptext6 000000  
                         __ptext7 000000                           __ptext8 000000  
                         __ptext9 000000     __size_of_clicker2buttons_init 000000  
                       ?_turnleft 000021                   __size_of_strcpy 000000  
                 __size_of_strlen 000000                         _T2CONbits 000FBD  
                    __size_of_abs 000000                      __size_of_pad 000000  
                         _forward 000000                           _isdigit 000000  
                      ??___xxtofl 000004                  ___awmod@dividend 000000  
                         _isspace 000000                         _T2HLTbits 000FBE  
                         _isupper 000000                           efgtoa@c 000041  
                         efgtoa@d 000018                           efgtoa@e 000030  
                         efgtoa@f 00003D                           efgtoa@g 00002C  
                         efgtoa@h 000022                           efgtoa@i 00002A  
                         efgtoa@l 000026                           efgtoa@m 000012  
                         efgtoa@n 000032                           efgtoa@p 00001C  
                         efgtoa@t 00000C                           efgtoa@u 000034  
                         efgtoa@w 00001E                           _reverse 000000  
                   _RxBufWriteCnt 000010                           atoi@neg 00000D  
                         _sprintf 000000                           _tolower 000000  
            ??_I2C_2_Master_Start 000001                           left@deg 00001D  
            ??_I2C_2_Master_Write 000001                           _strncmp 000000  
            end_of_initialization 000028      __end_of_colourcards_readRGBC 000872  
                         floorf@e 000035                           floorf@m 000031  
                         floorf@u 000037                           floorf@x 000027  
                ADC_getval@tmpval 000000              ??_DCmotors_adjustval 000000  
                         fputc@fp 000002              __size_of_USART4_init 000000  
                         fputs@fp 00000B                           right@mL 000019  
                         right@mR 00001B                 __end_of_vfpfcnvrt 00056A  
                      efgtoa@mode 000021                        efgtoa@sign 00001A  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE    colourclick_calibration@current 000018  
  colourclick_calibration@initial 000010                        ??_vfprintf 000057  
    colourclick_writetoaddr@value 000002                           strcpy@d 000008  
                         strlen@a 000002                           strcpy@s 000006  
                         strlen@s 000000                     _DCmotors_init 000000  
                       _PORTFbits 000F8E                        ??_turnleft 000027  
                     ___fladd@grs 00000F          colourclick_calibration@i 00000F  
                   ___xxtofl@sign 000008                         _TRISAbits 000F81  
                       _TRISCbits 000F83                         _TRISDbits 000F84  
                       _TRISEbits 000F85                 __end_of_turnright 000050  
                       _TRISFbits 000F86                         _TRISGbits 000F87  
                       _TRISHbits 000F88                       ___fldiv@grs 000021  
                     ___fldiv@rem 00001A     __size_of_colourclick_readRGBC 000000  
               __size_of_ADC_init 000000           ??_I2C_2_Master_RepStart 000001  
            colourclick_readB@tmp 000009              colourclick_readC@tmp 000009  
      __size_of_checkbatterylevel 000000              colourclick_readG@tmp 000009  
            colourclick_readR@tmp 000009                       ___flmul@grs 00000D  
                    _EUSART4RXbuf 000000                      _EUSART4TXbuf 000000  
       sendCharSerial4@charToSend 000000                        main@motorL 000078  
                      main@motorR 000081          __size_of_DCmotors_setPWM 000000  
                  __end_of___flge 000104        colourclick_readRGBC@tmpval 00000B  
                  __end_of___fleq 0000AA                    ?_DCmotors_init 000000  
                     vfpfcnvrt@ap 00004B                       vfpfcnvrt@ct 000048  
                     vfpfcnvrt@fp 000047                       vfpfcnvrt@ll 000038  
                  __end_of___wmul 000026                    __end_of_efgtoa 000C58  
                  __end_of_floorf 000212                        floorf@F527 000014  
                  __end_of_strcpy 00005E                    __end_of_strlen 000036  
             start_initialization 000000                       __end_of_abs 000040  
            _DCmotors_calibration 000000                       __end_of_pad 0000C6  
                   _TxBufWriteCnt 000001                  _unknowncard_flag 00000D  
                 _returnhome_flag 00000C          __size_of_sendCharSerial4 000000  
           __end_of___fpclassifyf 0000FE      __size_of_colourcards_testing 000000  
         _colourclick_calibration 000000                      turnright@deg 000025  
                     vfprintf@fmt 000053          ?_colourclick_writetoaddr 000002  
                        ??___flge 000021                          ??___fleq 000008  
    __end_of_colourclickLEDs_init 00000E                          ??___wmul 000004  
        __end_of_colourclick_init 000038          colourcards_testing@B_rel 00006C  
        colourcards_testing@C_rel 000070                          ??_efgtoa 000042  
        colourcards_testing@G_rel 000068                          ??_floorf 00002B  
        colourcards_testing@R_rel 000064                DCmotors_testing@mL 000027  
              DCmotors_testing@mR 000029              _colourcards_readRGBC 000000  
                        ??_strcpy 000004                          ??_strlen 000002  
                       ___fladd@a 000004                         ___fladd@b 000000  
                       ___fldiv@a 000012                         ___fldiv@b 00000E  
                       ___flmul@a 000004                         ___flmul@b 000000  
                     __pbssCOMRAM 000000                         ___flsub@a 00001D  
                       ___flsub@b 000019                     __pcstackBANK0 000000  
                   __pcstackBANK1 000000             ?_DCmotors_calibration 000027  
                ___aodiv@dividend 000000           __size_of_buggyLEDs_init 000000  
               __size_of___xxtofl 000000                         _card_flag 000000* 
                       _atoi$2810 000011                         _atoi$2808 00000F  
                       _atoi$2809 000013                         __pnvBANK0 000000  
                     _efgtoa$2742 000000                       _efgtoa$2751 000006  
                     _efgtoa$2743 000002                       _efgtoa$2752 000008  
                     _efgtoa$2753 00000A                       _efgtoa$2747 000004  
                       _dtoa$2718 00002D                       _clear_lower 000008  
                     _clear_upper 00001C                   ??_DCmotors_init 000000  
       __size_of_DCmotors_testing 000000                          ?___aodiv 000000  
                        ?___fladd 000000                          ?___aomod 000000  
                        ?___fldiv 00000E                          ?___awdiv 000006  
                ___aodiv@quotient 000012                          ?___flneg 000000  
                        ?___awmod 000000                          ?___flmul 000000  
                        ?___flsub 000019                          ?___fltol 000000  
           ?_colourcards_readRGBC 000027              I2C_2_Master_Read@ack 000002  
               __size_of_vfprintf 000000                 ??_interrupts_init 000000  
               ??_DCmotors_setPWM 000010              I2C_2_Master_Read@tmp 000003  
                     __smallconst 000000*                         ?_forward 000019  
                        ?_isdigit 000000                 _I2C_2_Master_Idle 000000  
               _I2C_2_Master_Init 000000                 _I2C_2_Master_Read 000000  
               _I2C_2_Master_Stop 000000                          ?_isspace 000000  
               __size_of_turnleft 000000                          ?_isupper 000000  
                    _RxBufReadCnt 00000F                          _ADC_init 000000  
                        ?_reverse 000019                ?_I2C_2_Master_Idle 000000  
              ?_I2C_2_Master_Init 000000                ?_I2C_2_Master_Read 000000  
              ?_I2C_2_Master_Stop 000000                          ?_sprintf 00004C  
                        ?_tolower 000006                    __size_of_fputc 000000  
                  __size_of_fputs 000000                          ?_strncmp 000000  
                  __size_of_right 000000                    __size_of_putch 000000  
       ??_colourclick_calibration 00000D      __end_of_clicker2buttons_init 00000C  
               _sendStringSerial4 000000               ??_I2C_2_Master_Idle 000000  
             ??_I2C_2_Master_Init 000000               ??_I2C_2_Master_Read 000001  
                  ___wmul@product 000004                          _LATAbits 000F79  
             ??_I2C_2_Master_Stop 000001                          _LATCbits 000F7B  
               _colourclickLEDs_C 000000                          _LATDbits 000F7C  
                        _LATEbits 000F7D                          _LATFbits 000F7E  
                        _LATGbits 000F7F                          _LATHbits 000F80  
                        _PIE0bits 000E29                ?_sendStringSerial4 000001  
                        _PIE4bits 000E2D                ?_colourclickLEDs_C 000000  
                        _PIR0bits 000E33                          _PIR4bits 000E37  
               ??_sendCharSerial4 000000                          _SSP2CON2 000EDA  
             ??_sendStringSerial4 000003            DCmotors_setPWM@PWMduty 000017  
                        _SSP2STAT 000ED8               ??_colourclickLEDs_C 000000  
               _colourclick_readB 000000                 _colourclick_readC 000000  
               _colourclick_readG 000000                 _colourclick_readR 000000  
                       _vfpfcnvrt 000000                        _ADCON0bits 000F60  
       __end_of_I2C_2_Master_Idle 000028         __end_of_I2C_2_Master_Init 00002A  
       __end_of_I2C_2_Master_Read 000042                 ___wmul@multiplier 000000  
              ?_colourclick_readB 000004                ?_colourclick_readC 000004  
              ?_colourclick_readG 000004                ?_colourclick_readR 000004  
       __end_of_I2C_2_Master_Stop 00000A       I2C_2_Master_Write@data_byte 000001  
          ??_DCmotors_calibration 00002B                      _TxBufReadCnt 000000  
                    _isspace$2839 000006               ??_colourclick_readB 000006  
             ??_colourclick_readC 000006               ??_colourclick_readG 000006  
             ??_colourclick_readR 000006                        vfpfcnvrt@c 00004B  
                      vfpfcnvrt@f 000044                     ??_USART4_init 000000  
       __end_of_sendStringSerial4 000030       __size_of_I2C_2_Master_Start 000000  
            _colourclickLEDs_init 000000       __size_of_I2C_2_Master_Write 000000  
                       _turnright 000000         __end_of_colourclickLEDs_C 000022  
                     turnleft@deg 000025       __size_of_DCmotors_adjustval 000000  
  __size_of_I2C_2_Master_RepStart 000000     __end_of_I2C_2_Master_RepStart 00000A  
                        __Hrparam 000000*                      turnright@mL 000021  
                     turnright@mR 000023                        _ADC_getval 000000  
    __end_of_colourclick_readRGBC 00005E                        vfprintf@ap 000055  
                        __Lrparam 000000*                       vfprintf@fp 000051  
       __end_of_colourclick_readB 000050         __end_of_colourclick_readC 000050  
       __end_of_colourclick_readG 000050         __end_of_colourclick_readR 000050  
                       forward@mL 000019                         forward@mR 00001B  
          ??_colourcards_readRGBC 00002D                  __size_of___aodiv 000000  
                __size_of___fladd 000000                  __size_of___aomod 000000  
                __size_of___fldiv 000000                  __size_of___awdiv 000000  
                __size_of___flneg 000000                  __size_of___awmod 000000  
                __size_of___flmul 000000                  __size_of___flsub 000000  
                __size_of___fltol 000000                        ?_vfpfcnvrt 000047  
 __end_of_colourclick_calibration 0000F4                   ___aodiv@divisor 000008  
                 ___aodiv@counter 000010               _colourcards_testing 000000  
                      _ANSELDbits 000EA7                ___fpclassifyf@F465 000018  
                      _ANSELFbits 000EB4                        sprintf@fmt 00004E  
                        ___xxtofl 000000            DCmotors_calibration@mL 000027  
          DCmotors_calibration@mR 000029                    _buggyLEDs_init 000000  
                __size_of_forward 000000                  __size_of_isdigit 000000  
                __size_of_isspace 000000                          __ptext10 000000  
                        __ptext11 000000                          __ptext20 000000  
                        __ptext12 000000                          __ptext21 000000  
                        __ptext13 000000                          __ptext30 000000  
                        __ptext22 000000                          __ptext14 000000  
                        __ptext31 000000                          __ptext23 000000  
                        __ptext15 000000                          __ptext40 000000  
                        __ptext32 000000                          __ptext24 000000  
                        __ptext16 000000                          __ptext41 000000  
                        __ptext33 000000                          __ptext25 000000  
                        __ptext17 000000                          __ptext50 000000  
                        __ptext42 000000                          __ptext34 000000  
                        __ptext26 000000                          __ptext18 000000  
                        __ptext51 000000                          __ptext43 000000  
                        __ptext35 000000                          __ptext27 000000  
                        __ptext19 000000                          __ptext60 000000  
                        __ptext52 000000                          __ptext44 000000  
                        __ptext36 000000                          __ptext28 000000  
                        __ptext61 000000                          __ptext53 000000  
                        __ptext45 000000                          __ptext37 000000  
                        __ptext29 000000                          __ptext70 000000  
                        __ptext62 000000                          __ptext54 000000  
                        __ptext46 000000                          __ptext38 000000  
                        __ptext71 000000                          __ptext63 000000  
                        __ptext55 000000                          __ptext47 000000  
                        __ptext39 000000                          __ptext72 000000  
                        __ptext64 000000                          __ptext56 000000  
                        __ptext48 000000                          __ptext73 000000  
                        __ptext65 000000                          __ptext57 000000  
                        __ptext49 000000                          __ptext74 000000  
                        __ptext66 000000                          __ptext58 000000  
                        __ptext67 000000                          __ptext59 000000  
                        __ptext68 000000                          __ptext69 000000  
                __size_of_isupper 000000                  __size_of_reverse 000000  
           ?_colourclickLEDs_init 000000                      _SSP2CON1bits 000ED9  
                    _SSP2CON2bits 000EDA                  __size_of_sprintf 000000  
                __size_of_tolower 000000                        ?_turnright 000021  
                      strcpy@dest 000000                  __size_of_strncmp 000000  
            ?_colourcards_testing 000000                     __size_of_atoi 000000  
                   __size_of_main 000000                     __size_of_dtoa 000000  
                   __size_of_left 000000                     __size_of_stop 000000  
             __end_of_USART4_init 000020                         reverse@mL 000019  
                       reverse@mR 00001B                  _interrupts_lower 00000A  
                        efgtoa@fp 00003B                          efgtoa@ne 000010  
                        efgtoa@pp 00000E                          efgtoa@ou 000014  
                _interrupts_upper 000000                          isa$xinst 000000  
                _DCmotors_testing 000000                        _RC4STAbits 000EE7  
                        _vfprintf 000000                 ?_colourclick_init 000000  
             DCmotors_adjustval@i 000002                ??_colourclick_init 000004  
      __size_of_I2C_2_Master_Idle 000000        __size_of_I2C_2_Master_Init 000000  
      __size_of_I2C_2_Master_Read 000000                  ___aomod@dividend 000000  
                DCmotors_setPWM@m 00000E              _clicker2buttons_init 000000  
      __size_of_I2C_2_Master_Stop 000000                          _turnleft 000000  
                      turnleft@mL 000021                        turnleft@mR 000023  
          __end_of_buggyLEDs_init 000016                    _vfpfcnvrt$2772 000042  
                  _vfpfcnvrt$2767 000040                        _INTCONbits 000FF2  
__size_of_colourclick_writetoaddr 000000    colourclick_writetoaddr@address 000003  
                        isdigit@c 000000                       _PWM6CONbits 000FA4  
      __size_of_sendStringSerial4 000000                       _PWM7CONbits 000FA1  
      __size_of_colourclickLEDs_C 000000                         sprintf@ap 000068  
           ??_colourcards_testing 000059                          isspace@c 000000  
                        right@deg 00001D                         strcpy@src 000002  
                        isupper@c 000000                         strncmp@_l 000000  
                       strncmp@_r 000002                   _interrupts_init 000000* 
                 _DCmotors_setPWM 000000                       ?_ADC_getval 000000  
                     efgtoa@nmode 000020        __size_of_colourclick_readB 000000  
      __size_of_colourclick_readC 000000        __size_of_colourclick_readG 000000  
      __size_of_colourclick_readR 000000                   ___aomod@divisor 000008  
                     ??_vfpfcnvrt 00004D                   ___aomod@counter 000010  
           ?_clicker2buttons_init 000000                          sprintf@f 00006A  
                        tolower@c 000006                          sprintf@s 00004C  
                 ?_buggyLEDs_init 000000            __size_of___fpclassifyf 000000  
                      _SSP2DATPPS 000E1D                        _SSP2CLKPPS 000E1C  
                        strncmp@l 000007                          strncmp@n 000004  
                        strncmp@r 000009                    _DCmotors_lower 000003  
          ??_colourclickLEDs_init 000001                    _DCmotors_upper 000002  
            _colourclick_readRGBC 000000                     ___fladd@signs 00000C  
                     _USART4_init 000000                        _TX4STAbits 000EE8  
                     ??_turnright 000027                      ___aodiv@sign 000011  
                 _sendCharSerial4 000000                      ___fladd@aexp 00000D  
                    ___fladd@bexp 00000E                      ___aomod@sign 000011  
