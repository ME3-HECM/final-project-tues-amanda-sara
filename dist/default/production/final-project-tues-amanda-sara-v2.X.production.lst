

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Dec 11 15:55:17 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    56  0000                     
    57                           ; Version 2.20
    58                           ; Generated 05/05/2020 GMT
    59                           ; 
    60                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F67K40 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     _INT1PPS	set	3569
    92  0000                     _PIE4bits	set	3629
    93  0000                     _TX4REG	set	3812
    94  0000                     _RC4REG	set	3811
    95  0000                     _PIR4bits	set	3639
    96  0000                     _RC4STAbits	set	3815
    97  0000                     _SP4BRGH	set	3814
    98  0000                     _SP4BRGL	set	3813
    99  0000                     _TX4STAbits	set	3816
   100  0000                     _BAUD4CONbits	set	3817
   101  0000                     _RX4PPS	set	3605
   102  0000                     _RC0PPS	set	3682
   103  0000                     _PIR0bits	set	3635
   104  0000                     _IPR0bits	set	3615
   105  0000                     _PIE0bits	set	3625
   106  0000                     _ANSELBbits	set	3738
   107  0000                     _ANSELFbits	set	3764
   108  0000                     _RC7PPS	set	3689
   109  0000                     _RE2PPS	set	3700
   110  0000                     _SSP2BUF	set	3797
   111  0000                     _SSP2CON2bits	set	3802
   112  0000                     _SSP2CON2	set	3802
   113  0000                     _SSP2STAT	set	3800
   114  0000                     _RD6PPS	set	3696
   115  0000                     _RD5PPS	set	3695
   116  0000                     _SSP2CLKPPS	set	3612
   117  0000                     _SSP2DATPPS	set	3613
   118  0000                     _ANSELDbits	set	3751
   119  0000                     _SSP2ADD	set	3798
   120  0000                     _SSP2CON1bits	set	3801
   121  0000                     _ADPCH	set	3935
   122  0000                     _ADREFbits	set	3928
   123  0000                     _LATAbits	set	3961
   124  0000                     _TRISAbits	set	3969
   125  0000                     _ADRESH	set	3940
   126  0000                     _ADCON0bits	set	3936
   127  0000                     _INTCONbits	set	4082
   128  0000                     _TRISBbits	set	3970
   129  0000                     _LATFbits	set	3966
   130  0000                     _LATHbits	set	3968
   131  0000                     _LATDbits	set	3964
   132  0000                     _TRISHbits	set	3976
   133  0000                     _TRISFbits	set	3974
   134  0000                     _PWM7CONbits	set	4001
   135  0000                     _PWM6CONbits	set	4004
   136  0000                     _LATGbits	set	3967
   137  0000                     _LATCbits	set	3963
   138  0000                     _LATEbits	set	3965
   139  0000                     _TRISGbits	set	3975
   140  0000                     _TRISCbits	set	3971
   141  0000                     _TRISEbits	set	3973
   142  0000                     _T2PR	set	4028
   143  0000                     _T2CLKCONbits	set	4031
   144  0000                     _T2HLTbits	set	4030
   145  0000                     _T2CONbits	set	4029
   146  0000                     _PORTFbits	set	3982
   147  0000                     _TRISDbits	set	3972
   148  0000                     _LATG	set	3967
   149  0000                     _PWM7DCH	set	4000
   150  0000                     _LATE	set	3965
   151  0000                     _PWM6DCH	set	4003
   152                           
   153                           ; #config settings
   154                           
   155                           	psect	cinit
   156  0015FC                     __pcinit:
   157                           	callstack 0
   158  0015FC                     start_initialization:
   159                           	callstack 0
   160  0015FC                     __initialization:
   161                           	callstack 0
   162                           
   163                           ; Clear objects allocated to BANK0 (84 bytes)
   164  0015FC  EE00  F060         	lfsr	0,__pbssBANK0
   165  001600  0E54               	movlw	84
   166  001602                     clear_0:
   167  001602  6AEE               	clrf	postinc0,c
   168  001604  06E8               	decf	wreg,f,c
   169  001606  E1FD               	bnz	clear_0
   170                           
   171                           ; Clear objects allocated to COMRAM (7 bytes)
   172  001608  EE00  F03D         	lfsr	0,__pbssCOMRAM
   173  00160C  0E07               	movlw	7
   174  00160E                     clear_1:
   175  00160E  6AEE               	clrf	postinc0,c
   176  001610  06E8               	decf	wreg,f,c
   177  001612  E1FD               	bnz	clear_1
   178  001614                     end_of_initialization:
   179                           	callstack 0
   180  001614                     __end_of__initialization:
   181                           	callstack 0
   182  001614  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   183  001616  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   184  001618  0100               	movlb	0
   185  00161A  EFC1  F007         	goto	_main	;jump to C main() function
   186                           
   187                           	psect	bssCOMRAM
   188  00003D                     __pbssCOMRAM:
   189                           	callstack 0
   190  00003D                     _TxBufReadCnt:
   191                           	callstack 0
   192  00003D                     	ds	1
   193  00003E                     _TxBufWriteCnt:
   194                           	callstack 0
   195  00003E                     	ds	1
   196  00003F                     _RxBufReadCnt:
   197                           	callstack 0
   198  00003F                     	ds	1
   199  000040                     _RxBufWriteCnt:
   200                           	callstack 0
   201  000040                     	ds	1
   202  000041                     _returnhome_flag:
   203                           	callstack 0
   204  000041                     	ds	1
   205  000042                     _battery_flag:
   206                           	callstack 0
   207  000042                     	ds	1
   208  000043                     _card_flag:
   209                           	callstack 0
   210  000043                     	ds	1
   211                           
   212                           	psect	bssBANK0
   213  000060                     __pbssBANK0:
   214                           	callstack 0
   215  000060                     _EUSART4TXbuf:
   216                           	callstack 0
   217  000060                     	ds	60
   218  00009C                     _EUSART4RXbuf:
   219                           	callstack 0
   220  00009C                     	ds	20
   221  0000B0                     _clear_upper:
   222                           	callstack 0
   223  0000B0                     	ds	2
   224  0000B2                     _clear_lower:
   225                           	callstack 0
   226  0000B2                     	ds	2
   227                           
   228                           	psect	cstackBANK0
   229  0000B4                     __pcstackBANK0:
   230                           	callstack 0
   231  0000B4                     main@current:
   232                           	callstack 0
   233                           
   234                           ; 8 bytes @ 0x0
   235  0000B4                     	ds	8
   236  0000BC                     main@motorL:
   237                           	callstack 0
   238                           
   239                           ; 9 bytes @ 0x8
   240  0000BC                     	ds	9
   241  0000C5                     main@motorR:
   242                           	callstack 0
   243                           
   244                           ; 9 bytes @ 0x11
   245  0000C5                     	ds	9
   246                           
   247                           	psect	cstackCOMRAM
   248  000001                     __pcstackCOMRAM:
   249                           	callstack 0
   250  000001                     ??i2_I2C_2_Master_Idle:
   251  000001                     
   252                           ; 1 bytes @ 0x0
   253  000001                     	ds	1
   254  000002                     i2I2C_2_Master_Write@data_byte:
   255                           	callstack 0
   256                           
   257                           ; 1 bytes @ 0x1
   258  000002                     	ds	1
   259  000003                     ??_HighISR:
   260                           
   261                           ; 1 bytes @ 0x2
   262  000003                     	ds	1
   263  000004                     ??_LowISR:
   264                           
   265                           ; 1 bytes @ 0x3
   266  000004                     	ds	1
   267  000005                     ??_I2C_2_Master_Idle:
   268  000005                     ?___wmul:
   269                           	callstack 0
   270  000005                     ?___lwdiv:
   271                           	callstack 0
   272  000005                     DCmotors_init@PWMperiod:
   273                           	callstack 0
   274  000005                     colorclick_toggleClearLED@toggle:
   275                           	callstack 0
   276  000005                     ___wmul@multiplier:
   277                           	callstack 0
   278  000005                     ___lwdiv@dividend:
   279                           	callstack 0
   280  000005                     ___flge@ff1:
   281                           	callstack 0
   282                           
   283                           ; 4 bytes @ 0x4
   284  000005                     	ds	1
   285  000006                     ??_I2C_2_Master_Read:
   286  000006                     I2C_2_Master_Write@data_byte:
   287                           	callstack 0
   288                           
   289                           ; 1 bytes @ 0x5
   290  000006                     	ds	1
   291  000007                     I2C_2_Master_Read@ack:
   292                           	callstack 0
   293  000007                     colorclick_writetoaddr@value:
   294                           	callstack 0
   295  000007                     ___wmul@multiplicand:
   296                           	callstack 0
   297  000007                     ___lwdiv@divisor:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x6
   301  000007                     	ds	1
   302  000008                     I2C_2_Master_Read@tmp:
   303                           	callstack 0
   304  000008                     colorclick_writetoaddr@address:
   305                           	callstack 0
   306                           
   307                           ; 1 bytes @ 0x7
   308  000008                     	ds	1
   309  000009                     ??_colorclick_init:
   310  000009                     ?_colorclick_readRed:
   311                           	callstack 0
   312  000009                     ?_colorclick_readGreen:
   313                           	callstack 0
   314  000009                     ?_colorclick_readBlue:
   315                           	callstack 0
   316  000009                     ?_colorclick_readClear:
   317                           	callstack 0
   318  000009                     ___lwdiv@counter:
   319                           	callstack 0
   320  000009                     ___wmul@product:
   321                           	callstack 0
   322  000009                     ___flge@ff2:
   323                           	callstack 0
   324                           
   325                           ; 4 bytes @ 0x8
   326  000009                     	ds	1
   327  00000A                     ___lwdiv@quotient:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x9
   331  00000A                     	ds	1
   332  00000B                     ??_colorclick_readRed:
   333  00000B                     ??_colorclick_readGreen:
   334  00000B                     ??_colorclick_readBlue:
   335  00000B                     ??_colorclick_readClear:
   336  00000B                     ?___awdiv:
   337                           	callstack 0
   338  00000B                     ___awdiv@dividend:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0xA
   342  00000B                     	ds	1
   343  00000C                     ?___xxtofl:
   344                           	callstack 0
   345  00000C                     ___xxtofl@val:
   346                           	callstack 0
   347                           
   348                           ; 4 bytes @ 0xB
   349  00000C                     	ds	1
   350  00000D                     ??___flge:
   351  00000D                     ___awdiv@divisor:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0xC
   355  00000D                     	ds	1
   356  00000E                     colorclick_readRed@tmp:
   357                           	callstack 0
   358  00000E                     colorclick_readGreen@tmp:
   359                           	callstack 0
   360  00000E                     colorclick_readBlue@tmp:
   361                           	callstack 0
   362  00000E                     colorclick_readClear@tmp:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0xD
   366  00000E                     	ds	1
   367  00000F                     ___awdiv@counter:
   368                           	callstack 0
   369                           
   370                           ; 1 bytes @ 0xE
   371  00000F                     	ds	1
   372  000010                     ??___xxtofl:
   373  000010                     ?_colorclick_readColour:
   374                           	callstack 0
   375  000010                     ___awdiv@sign:
   376                           	callstack 0
   377  000010                     colorclick_readColour@current:
   378                           	callstack 0
   379                           
   380                           ; 8 bytes @ 0xF
   381  000010                     	ds	1
   382  000011                     ___awdiv@quotient:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0x10
   386  000011                     	ds	2
   387  000013                     setMotorPWM@m:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x12
   391  000013                     	ds	1
   392  000014                     ___xxtofl@sign:
   393                           	callstack 0
   394                           
   395                           ; 1 bytes @ 0x13
   396  000014                     	ds	1
   397  000015                     ??_setMotorPWM:
   398  000015                     ___xxtofl@exp:
   399                           	callstack 0
   400                           
   401                           ; 1 bytes @ 0x14
   402  000015                     	ds	1
   403  000016                     ___xxtofl@arg:
   404                           	callstack 0
   405                           
   406                           ; 4 bytes @ 0x15
   407  000016                     	ds	2
   408  000018                     
   409                           ; 1 bytes @ 0x17
   410  000018                     	ds	4
   411  00001C                     setMotorPWM@PWMduty:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x1B
   415  00001C                     	ds	2
   416  00001E                     reverse@mL:
   417                           	callstack 0
   418  00001E                     stop@mL:
   419                           	callstack 0
   420  00001E                     turnLeft@mL:
   421                           	callstack 0
   422  00001E                     turnRight@mL:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x1D
   426  00001E                     	ds	2
   427  000020                     reverse@mR:
   428                           	callstack 0
   429  000020                     stop@mR:
   430                           	callstack 0
   431  000020                     turnLeft@mR:
   432                           	callstack 0
   433  000020                     turnRight@mR:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x1F
   437  000020                     	ds	2
   438  000022                     ??_reverse:
   439  000022                     ??_stop:
   440  000022                     turnLeft@deg:
   441                           	callstack 0
   442  000022                     turnRight@deg:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x21
   446  000022                     	ds	1
   447  000023                     ??_turnLeft:
   448  000023                     ??_turnRight:
   449                           
   450                           ; 1 bytes @ 0x22
   451  000023                     	ds	2
   452  000025                     read_card_RGB@current:
   453                           	callstack 0
   454                           
   455                           ; 8 bytes @ 0x24
   456  000025                     	ds	8
   457  00002D                     read_card_RGB@mL:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x2C
   461  00002D                     	ds	2
   462  00002F                     read_card_RGB@mR:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x2E
   466  00002F                     	ds	2
   467  000031                     read_card_RGB@R_rel:
   468                           	callstack 0
   469                           
   470                           ; 4 bytes @ 0x30
   471  000031                     	ds	4
   472  000035                     read_card_RGB@G_rel:
   473                           	callstack 0
   474                           
   475                           ; 4 bytes @ 0x34
   476  000035                     	ds	4
   477  000039                     read_card_RGB@B_rel:
   478                           	callstack 0
   479                           
   480                           ; 4 bytes @ 0x38
   481  000039                     	ds	4
   482  00003D                     
   483                           ; 1 bytes @ 0x3C
   484 ;;
   485 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   486 ;;
   487 ;; *************** function _main *****************
   488 ;; Defined at:
   489 ;;		line 7 in file "main.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;  motorR          9   17[BANK0 ] struct .
   494 ;;  motorL          9    8[BANK0 ] struct .
   495 ;;  current         8    0[BANK0 ] struct .
   496 ;;  PWMperiod       1    0        unsigned char 
   497 ;; Return value:  Size  Location     Type
   498 ;;                  1    wreg      void 
   499 ;; Registers used:
   500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   501 ;; Tracked objects:
   502 ;;		On entry : 0/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   507 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   509 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   510 ;;Total ram usage:       26 bytes
   511 ;; Hardware stack levels required when called: 9
   512 ;; This function calls:
   513 ;;		_ADC_init
   514 ;;		_DCmotors_init
   515 ;;		_USART4_init
   516 ;;		_colorclick_init
   517 ;;		_colorclick_readColour
   518 ;;		_read_card_RGB
   519 ;; This function is called by:
   520 ;;		Startup code after reset
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           	psect	text0
   525  000F82                     __ptext0:
   526                           	callstack 0
   527  000F82                     _main:
   528                           	callstack 22
   529  000F82                     
   530                           ;main.c: 12:     card_flag = 0;
   531  000F82  0E00               	movlw	0
   532  000F84  6E43               	movwf	_card_flag^0,c	;volatile
   533                           
   534                           ;main.c: 13:     battery_flag = 0;
   535  000F86  0E00               	movlw	0
   536  000F88  6E42               	movwf	_battery_flag^0,c	;volatile
   537                           
   538                           ;main.c: 14:     returnhome_flag = 0;
   539  000F8A  0E00               	movlw	0
   540  000F8C  6E41               	movwf	_returnhome_flag^0,c	;volatile
   541  000F8E                     
   542                           ;main.c: 15:     ADC_init();
   543  000F8E  EC40  F00B         	call	_ADC_init	;wreg free
   544  000F92                     
   545                           ;main.c: 16:     colorclick_init();
   546  000F92  EC8E  F00A         	call	_colorclick_init	;wreg free
   547  000F96                     
   548                           ;main.c: 18:     DCmotors_init(PWMperiod);
   549  000F96  0E63               	movlw	99
   550  000F98  EC02  F00A         	call	_DCmotors_init
   551  000F9C                     
   552                           ;main.c: 19:     USART4_init();
   553  000F9C  EC30  F00B         	call	_USART4_init	;wreg free
   554  000FA0                     
   555                           ;main.c: 24:     DC_motor motorL;;main.c: 25:     motorL.power=0;
   556  000FA0  0E00               	movlw	0
   557  000FA2  0100               	movlb	0	; () banked
   558  000FA4  6FBC               	movwf	main@motorL& (0+255),b
   559  000FA6                     
   560                           ; BSR set to: 0
   561                           ;main.c: 26:     motorL.direction=1;
   562  000FA6  0E01               	movlw	1
   563  000FA8  6FBD               	movwf	(main@motorL+1)& (0+255),b
   564                           
   565                           ;main.c: 27:     motorL.dutyHighByte=(unsigned char *)(&PWM6DCH);
   566  000FAA  0EA3               	movlw	163
   567  000FAC  6FBE               	movwf	(main@motorL+2)& (0+255),b
   568  000FAE  0E0F               	movlw	15
   569  000FB0  6FBF               	movwf	(main@motorL+3)& (0+255),b
   570                           
   571                           ;main.c: 28:     motorL.dir_LAT=(unsigned char *)(&LATE);
   572  000FB2  0E7D               	movlw	125
   573  000FB4  6FC0               	movwf	(main@motorL+4)& (0+255),b
   574  000FB6  0E0F               	movlw	15
   575  000FB8  6FC1               	movwf	(main@motorL+5)& (0+255),b
   576  000FBA                     
   577                           ; BSR set to: 0
   578                           ;main.c: 29:     motorL.dir_pin=4;
   579  000FBA  0E04               	movlw	4
   580  000FBC  6FC2               	movwf	(main@motorL+6)& (0+255),b
   581  000FBE                     
   582                           ; BSR set to: 0
   583                           ;main.c: 30:     motorL.PWMperiod=PWMperiod;
   584  000FBE  0E00               	movlw	0
   585  000FC0  6FC4               	movwf	(main@motorL+8)& (0+255),b
   586  000FC2  0E63               	movlw	99
   587  000FC4  6FC3               	movwf	(main@motorL+7)& (0+255),b
   588  000FC6                     
   589                           ; BSR set to: 0
   590                           ;main.c: 33:     DC_motor motorR;;main.c: 34:     motorR.power=0;
   591  000FC6  0E00               	movlw	0
   592  000FC8  6FC5               	movwf	main@motorR& (0+255),b
   593  000FCA                     
   594                           ; BSR set to: 0
   595                           ;main.c: 35:     motorR.direction=1;
   596  000FCA  0E01               	movlw	1
   597  000FCC  6FC6               	movwf	(main@motorR+1)& (0+255),b
   598  000FCE                     
   599                           ; BSR set to: 0
   600                           ;main.c: 36:     motorR.dutyHighByte=(unsigned char *)(&PWM7DCH);
   601  000FCE  0EA0               	movlw	160
   602  000FD0  6FC7               	movwf	(main@motorR+2)& (0+255),b
   603  000FD2  0E0F               	movlw	15
   604  000FD4  6FC8               	movwf	(main@motorR+3)& (0+255),b
   605  000FD6                     
   606                           ; BSR set to: 0
   607                           ;main.c: 37:     motorR.dir_LAT=(unsigned char *)(&LATG);
   608  000FD6  0E7F               	movlw	127
   609  000FD8  6FC9               	movwf	(main@motorR+4)& (0+255),b
   610  000FDA  0E0F               	movlw	15
   611  000FDC  6FCA               	movwf	(main@motorR+5)& (0+255),b
   612  000FDE                     
   613                           ; BSR set to: 0
   614                           ;main.c: 38:     motorR.dir_pin=6;
   615  000FDE  0E06               	movlw	6
   616  000FE0  6FCB               	movwf	(main@motorR+6)& (0+255),b
   617  000FE2                     
   618                           ; BSR set to: 0
   619                           ;main.c: 39:     motorR.PWMperiod=PWMperiod;
   620  000FE2  0E00               	movlw	0
   621  000FE4  6FCD               	movwf	(main@motorR+8)& (0+255),b
   622  000FE6  0E63               	movlw	99
   623  000FE8  6FCC               	movwf	(main@motorR+7)& (0+255),b
   624  000FEA                     l96:
   625  000FEA  A48E               	btfss	142,2,c	;volatile
   626  000FEC  EFFA  F007         	goto	u3101
   627  000FF0  EFFC  F007         	goto	u3100
   628  000FF4                     u3101:
   629  000FF4  EF03  F008         	goto	l3078
   630  000FF8                     u3100:
   631  000FF8  B68E               	btfsc	142,3,c	;volatile
   632  000FFA  EF01  F008         	goto	u3111
   633  000FFE  EF03  F008         	goto	u3110
   634  001002                     u3111:
   635  001002  EFF5  F007         	goto	l96
   636  001006                     u3110:
   637  001006                     l3078:
   638                           
   639                           ;main.c: 135:         current = colorclick_readColour(current);
   640  001006  EE20  F0B4         	lfsr	2,main@current
   641  00100A  EE00  F010         	lfsr	0,colorclick_readColour@current
   642  00100E  0E07               	movlw	7
   643  001010                     u3121:
   644  001010  CFDB FFEB          	movff	plusw2,plusw0
   645  001014  06E8               	decf	wreg,f,c
   646  001016  E2FC               	bc	u3121
   647  001018  EC2A  F00A         	call	_colorclick_readColour	;wreg free
   648  00101C  EE20  F0B4         	lfsr	2,main@current
   649  001020  0E07               	movlw	7
   650  001022                     u3131:
   651  001022  CFEB FFDB          	movff	plusw0,plusw2
   652  001026  06E8               	decf	wreg,f,c
   653  001028  E2FC               	bc	u3131
   654  00102A                     
   655                           ;main.c: 136:         read_card_RGB(current, &motorL, &motorR);
   656  00102A  EE20  F0B4         	lfsr	2,main@current
   657  00102E  EE00  F025         	lfsr	0,read_card_RGB@current
   658  001032  0E07               	movlw	7
   659  001034                     u3141:
   660  001034  CFDB FFEB          	movff	plusw2,plusw0
   661  001038  06E8               	decf	wreg,f,c
   662  00103A  E2FC               	bc	u3141
   663  00103C  0EBC               	movlw	low main@motorL
   664  00103E  6E2D               	movwf	read_card_RGB@mL^0,c
   665  001040  0E00               	movlw	high main@motorL
   666  001042  6E2E               	movwf	(read_card_RGB@mL+1)^0,c
   667  001044  0EC5               	movlw	low main@motorR
   668  001046  6E2F               	movwf	read_card_RGB@mR^0,c
   669  001048  0E00               	movlw	high main@motorR
   670  00104A  6E30               	movwf	(read_card_RGB@mR+1)^0,c
   671  00104C  EC15  F000         	call	_read_card_RGB	;wreg free
   672  001050  EFF5  F007         	goto	l96
   673  001054  EF13  F000         	goto	start
   674  001058                     __end_of_main:
   675                           	callstack 0
   676                           
   677 ;; *************** function _read_card_RGB *****************
   678 ;; Defined at:
   679 ;;		line 6 in file "color_card.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  current         8   36[COMRAM] struct .
   682 ;;  mL              2   44[COMRAM] PTR struct .
   683 ;;		 -> main@motorL(9), 
   684 ;;  mR              2   46[COMRAM] PTR struct .
   685 ;;		 -> main@motorR(9), 
   686 ;; Auto vars:     Size  Location     Type
   687 ;;  B_rel           4   56[COMRAM] float 
   688 ;;  G_rel           4   52[COMRAM] float 
   689 ;;  R_rel           4   48[COMRAM] float 
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   699 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   700 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   702 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   703 ;;Total ram usage:       24 bytes
   704 ;; Hardware stack levels used: 1
   705 ;; Hardware stack levels required when called: 8
   706 ;; This function calls:
   707 ;;		___flge
   708 ;;		___lwdiv
   709 ;;		___xxtofl
   710 ;;		_reverse
   711 ;;		_stop
   712 ;;		_turnLeft
   713 ;;		_turnRight
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text1
   720  00002A                     __ptext1:
   721                           	callstack 0
   722  00002A                     _read_card_RGB:
   723                           	callstack 22
   724  00002A                     
   725                           ;color_card.c: 8:     float R_rel = current.R/current.C;
   726  00002A  C02B  F007         	movff	read_card_RGB@current+6,___lwdiv@divisor
   727  00002E  C02C  F008         	movff	read_card_RGB@current+7,___lwdiv@divisor+1
   728  000032  C025  F005         	movff	read_card_RGB@current,___lwdiv@dividend
   729  000036  C026  F006         	movff	read_card_RGB@current+1,___lwdiv@dividend+1
   730  00003A  EC28  F009         	call	___lwdiv	;wreg free
   731  00003E  C005  F00C         	movff	?___lwdiv,___xxtofl@val
   732  000042  C006  F00D         	movff	?___lwdiv+1,___xxtofl@val+1
   733  000046  6A0E               	clrf	(___xxtofl@val+2)^0,c
   734  000048  6A0F               	clrf	(___xxtofl@val+3)^0,c
   735  00004A  0E00               	movlw	0
   736  00004C  EC65  F006         	call	___xxtofl
   737  000050  C00C  F031         	movff	?___xxtofl,read_card_RGB@R_rel
   738  000054  C00D  F032         	movff	?___xxtofl+1,read_card_RGB@R_rel+1
   739  000058  C00E  F033         	movff	?___xxtofl+2,read_card_RGB@R_rel+2
   740  00005C  C00F  F034         	movff	?___xxtofl+3,read_card_RGB@R_rel+3
   741                           
   742                           ;color_card.c: 9:     float G_rel = current.G/current.C;
   743  000060  C02B  F007         	movff	read_card_RGB@current+6,___lwdiv@divisor
   744  000064  C02C  F008         	movff	read_card_RGB@current+7,___lwdiv@divisor+1
   745  000068  C027  F005         	movff	read_card_RGB@current+2,___lwdiv@dividend
   746  00006C  C028  F006         	movff	read_card_RGB@current+3,___lwdiv@dividend+1
   747  000070  EC28  F009         	call	___lwdiv	;wreg free
   748  000074  C005  F00C         	movff	?___lwdiv,___xxtofl@val
   749  000078  C006  F00D         	movff	?___lwdiv+1,___xxtofl@val+1
   750  00007C  6A0E               	clrf	(___xxtofl@val+2)^0,c
   751  00007E  6A0F               	clrf	(___xxtofl@val+3)^0,c
   752  000080  0E00               	movlw	0
   753  000082  EC65  F006         	call	___xxtofl
   754  000086  C00C  F035         	movff	?___xxtofl,read_card_RGB@G_rel
   755  00008A  C00D  F036         	movff	?___xxtofl+1,read_card_RGB@G_rel+1
   756  00008E  C00E  F037         	movff	?___xxtofl+2,read_card_RGB@G_rel+2
   757  000092  C00F  F038         	movff	?___xxtofl+3,read_card_RGB@G_rel+3
   758                           
   759                           ;color_card.c: 10:     float B_rel = current.B/current.C;
   760  000096  C02B  F007         	movff	read_card_RGB@current+6,___lwdiv@divisor
   761  00009A  C02C  F008         	movff	read_card_RGB@current+7,___lwdiv@divisor+1
   762  00009E  C029  F005         	movff	read_card_RGB@current+4,___lwdiv@dividend
   763  0000A2  C02A  F006         	movff	read_card_RGB@current+5,___lwdiv@dividend+1
   764  0000A6  EC28  F009         	call	___lwdiv	;wreg free
   765  0000AA  C005  F00C         	movff	?___lwdiv,___xxtofl@val
   766  0000AE  C006  F00D         	movff	?___lwdiv+1,___xxtofl@val+1
   767  0000B2  6A0E               	clrf	(___xxtofl@val+2)^0,c
   768  0000B4  6A0F               	clrf	(___xxtofl@val+3)^0,c
   769  0000B6  0E00               	movlw	0
   770  0000B8  EC65  F006         	call	___xxtofl
   771  0000BC  C00C  F039         	movff	?___xxtofl,read_card_RGB@B_rel
   772  0000C0  C00D  F03A         	movff	?___xxtofl+1,read_card_RGB@B_rel+1
   773  0000C4  C00E  F03B         	movff	?___xxtofl+2,read_card_RGB@B_rel+2
   774  0000C8  C00F  F03C         	movff	?___xxtofl+3,read_card_RGB@B_rel+3
   775                           
   776                           ;color_card.c: 12:     if ((R_rel>0.54) && (G_rel<0.245) && (B_rel<0.18)) {
   777  0000CC  0E71               	movlw	113
   778  0000CE  6E05               	movwf	___flge@ff1^0,c
   779  0000D0  0E3D               	movlw	61
   780  0000D2  6E06               	movwf	(___flge@ff1+1)^0,c
   781  0000D4  0E0A               	movlw	10
   782  0000D6  6E07               	movwf	(___flge@ff1+2)^0,c
   783  0000D8  0E3F               	movlw	63
   784  0000DA  6E08               	movwf	(___flge@ff1+3)^0,c
   785  0000DC  C031  F009         	movff	read_card_RGB@R_rel,___flge@ff2
   786  0000E0  C032  F00A         	movff	read_card_RGB@R_rel+1,___flge@ff2+1
   787  0000E4  C033  F00B         	movff	read_card_RGB@R_rel+2,___flge@ff2+2
   788  0000E8  C034  F00C         	movff	read_card_RGB@R_rel+3,___flge@ff2+3
   789  0000EC  EC3F  F007         	call	___flge	;wreg free
   790  0000F0  B0D8               	btfsc	status,0,c
   791  0000F2  EF7D  F000         	goto	u2861
   792  0000F6  EF7F  F000         	goto	u2860
   793  0000FA                     u2861:
   794  0000FA  EFC9  F000         	goto	l2984
   795  0000FE                     u2860:
   796  0000FE  C035  F005         	movff	read_card_RGB@G_rel,___flge@ff1
   797  000102  C036  F006         	movff	read_card_RGB@G_rel+1,___flge@ff1+1
   798  000106  C037  F007         	movff	read_card_RGB@G_rel+2,___flge@ff1+2
   799  00010A  C038  F008         	movff	read_card_RGB@G_rel+3,___flge@ff1+3
   800  00010E  0E48               	movlw	72
   801  000110  6E09               	movwf	___flge@ff2^0,c
   802  000112  0EE1               	movlw	225
   803  000114  6E0A               	movwf	(___flge@ff2+1)^0,c
   804  000116  0E7A               	movlw	122
   805  000118  6E0B               	movwf	(___flge@ff2+2)^0,c
   806  00011A  0E3E               	movlw	62
   807  00011C  6E0C               	movwf	(___flge@ff2+3)^0,c
   808  00011E  EC3F  F007         	call	___flge	;wreg free
   809  000122  B0D8               	btfsc	status,0,c
   810  000124  EF96  F000         	goto	u2871
   811  000128  EF98  F000         	goto	u2870
   812  00012C                     u2871:
   813  00012C  EFC9  F000         	goto	l2984
   814  000130                     u2870:
   815  000130  C039  F005         	movff	read_card_RGB@B_rel,___flge@ff1
   816  000134  C03A  F006         	movff	read_card_RGB@B_rel+1,___flge@ff1+1
   817  000138  C03B  F007         	movff	read_card_RGB@B_rel+2,___flge@ff1+2
   818  00013C  C03C  F008         	movff	read_card_RGB@B_rel+3,___flge@ff1+3
   819  000140  0EEC               	movlw	236
   820  000142  6E09               	movwf	___flge@ff2^0,c
   821  000144  0E51               	movlw	81
   822  000146  6E0A               	movwf	(___flge@ff2+1)^0,c
   823  000148  0E38               	movlw	56
   824  00014A  6E0B               	movwf	(___flge@ff2+2)^0,c
   825  00014C  0E3E               	movlw	62
   826  00014E  6E0C               	movwf	(___flge@ff2+3)^0,c
   827  000150  EC3F  F007         	call	___flge	;wreg free
   828  000154  B0D8               	btfsc	status,0,c
   829  000156  EFAF  F000         	goto	u2881
   830  00015A  EFB1  F000         	goto	u2880
   831  00015E                     u2881:
   832  00015E  EFC9  F000         	goto	l2984
   833  000162                     u2880:
   834  000162                     
   835                           ;color_card.c: 14:         turnRight(mL, mR, 90);
   836  000162  C02D  F01E         	movff	read_card_RGB@mL,turnRight@mL
   837  000166  C02E  F01F         	movff	read_card_RGB@mL+1,turnRight@mL+1
   838  00016A  C02F  F020         	movff	read_card_RGB@mR,turnRight@mR
   839  00016E  C030  F021         	movff	read_card_RGB@mR+1,turnRight@mR+1
   840  000172  0E5A               	movlw	90
   841  000174  6E22               	movwf	turnRight@deg^0,c
   842  000176  EC95  F003         	call	_turnRight	;wreg free
   843                           
   844                           ;color_card.c: 15:         stop(mL, mR);
   845  00017A  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
   846  00017E  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
   847  000182  C02F  F020         	movff	read_card_RGB@mR,stop@mR
   848  000186  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
   849  00018A  EC8E  F008         	call	_stop	;wreg free
   850                           
   851                           ;color_card.c: 17:     } else if ((R_rel<0.435) && (G_rel>0.31) && (B_rel>0.195)) {
   852  00018E  EF94  F003         	goto	l484
   853  000192                     l2984:
   854  000192  C031  F005         	movff	read_card_RGB@R_rel,___flge@ff1
   855  000196  C032  F006         	movff	read_card_RGB@R_rel+1,___flge@ff1+1
   856  00019A  C033  F007         	movff	read_card_RGB@R_rel+2,___flge@ff1+2
   857  00019E  C034  F008         	movff	read_card_RGB@R_rel+3,___flge@ff1+3
   858  0001A2  0E52               	movlw	82
   859  0001A4  6E09               	movwf	___flge@ff2^0,c
   860  0001A6  0EB8               	movlw	184
   861  0001A8  6E0A               	movwf	(___flge@ff2+1)^0,c
   862  0001AA  0EDE               	movlw	222
   863  0001AC  6E0B               	movwf	(___flge@ff2+2)^0,c
   864  0001AE  0E3E               	movlw	62
   865  0001B0  6E0C               	movwf	(___flge@ff2+3)^0,c
   866  0001B2  EC3F  F007         	call	___flge	;wreg free
   867  0001B6  B0D8               	btfsc	status,0,c
   868  0001B8  EFE0  F000         	goto	u2891
   869  0001BC  EFE2  F000         	goto	u2890
   870  0001C0                     u2891:
   871  0001C0  EF2C  F001         	goto	l2992
   872  0001C4                     u2890:
   873  0001C4  0E52               	movlw	82
   874  0001C6  6E05               	movwf	___flge@ff1^0,c
   875  0001C8  0EB8               	movlw	184
   876  0001CA  6E06               	movwf	(___flge@ff1+1)^0,c
   877  0001CC  0E9E               	movlw	158
   878  0001CE  6E07               	movwf	(___flge@ff1+2)^0,c
   879  0001D0  0E3E               	movlw	62
   880  0001D2  6E08               	movwf	(___flge@ff1+3)^0,c
   881  0001D4  C035  F009         	movff	read_card_RGB@G_rel,___flge@ff2
   882  0001D8  C036  F00A         	movff	read_card_RGB@G_rel+1,___flge@ff2+1
   883  0001DC  C037  F00B         	movff	read_card_RGB@G_rel+2,___flge@ff2+2
   884  0001E0  C038  F00C         	movff	read_card_RGB@G_rel+3,___flge@ff2+3
   885  0001E4  EC3F  F007         	call	___flge	;wreg free
   886  0001E8  B0D8               	btfsc	status,0,c
   887  0001EA  EFF9  F000         	goto	u2901
   888  0001EE  EFFB  F000         	goto	u2900
   889  0001F2                     u2901:
   890  0001F2  EF2C  F001         	goto	l2992
   891  0001F6                     u2900:
   892  0001F6  0E14               	movlw	20
   893  0001F8  6E05               	movwf	___flge@ff1^0,c
   894  0001FA  0EAE               	movlw	174
   895  0001FC  6E06               	movwf	(___flge@ff1+1)^0,c
   896  0001FE  0E47               	movlw	71
   897  000200  6E07               	movwf	(___flge@ff1+2)^0,c
   898  000202  0E3E               	movlw	62
   899  000204  6E08               	movwf	(___flge@ff1+3)^0,c
   900  000206  C039  F009         	movff	read_card_RGB@B_rel,___flge@ff2
   901  00020A  C03A  F00A         	movff	read_card_RGB@B_rel+1,___flge@ff2+1
   902  00020E  C03B  F00B         	movff	read_card_RGB@B_rel+2,___flge@ff2+2
   903  000212  C03C  F00C         	movff	read_card_RGB@B_rel+3,___flge@ff2+3
   904  000216  EC3F  F007         	call	___flge	;wreg free
   905  00021A  B0D8               	btfsc	status,0,c
   906  00021C  EF12  F001         	goto	u2911
   907  000220  EF14  F001         	goto	u2910
   908  000224                     u2911:
   909  000224  EF2C  F001         	goto	l2992
   910  000228                     u2910:
   911  000228                     
   912                           ;color_card.c: 19:         turnLeft(mL, mR, 90);
   913  000228  C02D  F01E         	movff	read_card_RGB@mL,turnLeft@mL
   914  00022C  C02E  F01F         	movff	read_card_RGB@mL+1,turnLeft@mL+1
   915  000230  C02F  F020         	movff	read_card_RGB@mR,turnLeft@mR
   916  000234  C030  F021         	movff	read_card_RGB@mR+1,turnLeft@mR+1
   917  000238  0E5A               	movlw	90
   918  00023A  6E22               	movwf	turnLeft@deg^0,c
   919  00023C  EC88  F004         	call	_turnLeft	;wreg free
   920                           
   921                           ;color_card.c: 20:         stop(mL, mR);
   922  000240  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
   923  000244  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
   924  000248  C02F  F020         	movff	read_card_RGB@mR,stop@mR
   925  00024C  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
   926  000250  EC8E  F008         	call	_stop	;wreg free
   927                           
   928                           ;color_card.c: 22:     } else if ((R_rel<0.43) && (G_rel>0.30) && (B_rel>0.21)) {
   929  000254  EF94  F003         	goto	l484
   930  000258                     l2992:
   931  000258  C031  F005         	movff	read_card_RGB@R_rel,___flge@ff1
   932  00025C  C032  F006         	movff	read_card_RGB@R_rel+1,___flge@ff1+1
   933  000260  C033  F007         	movff	read_card_RGB@R_rel+2,___flge@ff1+2
   934  000264  C034  F008         	movff	read_card_RGB@R_rel+3,___flge@ff1+3
   935  000268  0EF6               	movlw	246
   936  00026A  6E09               	movwf	___flge@ff2^0,c
   937  00026C  0E28               	movlw	40
   938  00026E  6E0A               	movwf	(___flge@ff2+1)^0,c
   939  000270  0EDC               	movlw	220
   940  000272  6E0B               	movwf	(___flge@ff2+2)^0,c
   941  000274  0E3E               	movlw	62
   942  000276  6E0C               	movwf	(___flge@ff2+3)^0,c
   943  000278  EC3F  F007         	call	___flge	;wreg free
   944  00027C  B0D8               	btfsc	status,0,c
   945  00027E  EF43  F001         	goto	u2921
   946  000282  EF45  F001         	goto	u2920
   947  000286                     u2921:
   948  000286  EF8F  F001         	goto	l3000
   949  00028A                     u2920:
   950  00028A  0E9A               	movlw	154
   951  00028C  6E05               	movwf	___flge@ff1^0,c
   952  00028E  0E99               	movlw	153
   953  000290  6E06               	movwf	(___flge@ff1+1)^0,c
   954  000292  0E99               	movlw	153
   955  000294  6E07               	movwf	(___flge@ff1+2)^0,c
   956  000296  0E3E               	movlw	62
   957  000298  6E08               	movwf	(___flge@ff1+3)^0,c
   958  00029A  C035  F009         	movff	read_card_RGB@G_rel,___flge@ff2
   959  00029E  C036  F00A         	movff	read_card_RGB@G_rel+1,___flge@ff2+1
   960  0002A2  C037  F00B         	movff	read_card_RGB@G_rel+2,___flge@ff2+2
   961  0002A6  C038  F00C         	movff	read_card_RGB@G_rel+3,___flge@ff2+3
   962  0002AA  EC3F  F007         	call	___flge	;wreg free
   963  0002AE  B0D8               	btfsc	status,0,c
   964  0002B0  EF5C  F001         	goto	u2931
   965  0002B4  EF5E  F001         	goto	u2930
   966  0002B8                     u2931:
   967  0002B8  EF8F  F001         	goto	l3000
   968  0002BC                     u2930:
   969  0002BC  0E3D               	movlw	61
   970  0002BE  6E05               	movwf	___flge@ff1^0,c
   971  0002C0  0E0A               	movlw	10
   972  0002C2  6E06               	movwf	(___flge@ff1+1)^0,c
   973  0002C4  0E57               	movlw	87
   974  0002C6  6E07               	movwf	(___flge@ff1+2)^0,c
   975  0002C8  0E3E               	movlw	62
   976  0002CA  6E08               	movwf	(___flge@ff1+3)^0,c
   977  0002CC  C039  F009         	movff	read_card_RGB@B_rel,___flge@ff2
   978  0002D0  C03A  F00A         	movff	read_card_RGB@B_rel+1,___flge@ff2+1
   979  0002D4  C03B  F00B         	movff	read_card_RGB@B_rel+2,___flge@ff2+2
   980  0002D8  C03C  F00C         	movff	read_card_RGB@B_rel+3,___flge@ff2+3
   981  0002DC  EC3F  F007         	call	___flge	;wreg free
   982  0002E0  B0D8               	btfsc	status,0,c
   983  0002E2  EF75  F001         	goto	u2941
   984  0002E6  EF77  F001         	goto	u2940
   985  0002EA                     u2941:
   986  0002EA  EF8F  F001         	goto	l3000
   987  0002EE                     u2940:
   988  0002EE                     l2998:
   989                           
   990                           ;color_card.c: 24:         turnRight(mL, mR, 180);
   991  0002EE  C02D  F01E         	movff	read_card_RGB@mL,turnRight@mL
   992  0002F2  C02E  F01F         	movff	read_card_RGB@mL+1,turnRight@mL+1
   993  0002F6  C02F  F020         	movff	read_card_RGB@mR,turnRight@mR
   994  0002FA  C030  F021         	movff	read_card_RGB@mR+1,turnRight@mR+1
   995  0002FE  0EB4               	movlw	180
   996  000300  6E22               	movwf	turnRight@deg^0,c
   997  000302  EC95  F003         	call	_turnRight	;wreg free
   998                           
   999                           ;color_card.c: 25:         stop(mL, mR);
  1000  000306  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
  1001  00030A  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
  1002  00030E  C02F  F020         	movff	read_card_RGB@mR,stop@mR
  1003  000312  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
  1004  000316  EC8E  F008         	call	_stop	;wreg free
  1005                           
  1006                           ;color_card.c: 27:     } else if ((R_rel>0.49) && (G_rel>0.285) && (B_rel>0.18)) {
  1007  00031A  EF94  F003         	goto	l484
  1008  00031E                     l3000:
  1009  00031E  0E48               	movlw	72
  1010  000320  6E05               	movwf	___flge@ff1^0,c
  1011  000322  0EE1               	movlw	225
  1012  000324  6E06               	movwf	(___flge@ff1+1)^0,c
  1013  000326  0EFA               	movlw	250
  1014  000328  6E07               	movwf	(___flge@ff1+2)^0,c
  1015  00032A  0E3E               	movlw	62
  1016  00032C  6E08               	movwf	(___flge@ff1+3)^0,c
  1017  00032E  C031  F009         	movff	read_card_RGB@R_rel,___flge@ff2
  1018  000332  C032  F00A         	movff	read_card_RGB@R_rel+1,___flge@ff2+1
  1019  000336  C033  F00B         	movff	read_card_RGB@R_rel+2,___flge@ff2+2
  1020  00033A  C034  F00C         	movff	read_card_RGB@R_rel+3,___flge@ff2+3
  1021  00033E  EC3F  F007         	call	___flge	;wreg free
  1022  000342  B0D8               	btfsc	status,0,c
  1023  000344  EFA6  F001         	goto	u2951
  1024  000348  EFA8  F001         	goto	u2950
  1025  00034C                     u2951:
  1026  00034C  EFFC  F001         	goto	l3008
  1027  000350                     u2950:
  1028  000350  0E85               	movlw	133
  1029  000352  6E05               	movwf	___flge@ff1^0,c
  1030  000354  0EEB               	movlw	235
  1031  000356  6E06               	movwf	(___flge@ff1+1)^0,c
  1032  000358  0E91               	movlw	145
  1033  00035A  6E07               	movwf	(___flge@ff1+2)^0,c
  1034  00035C  0E3E               	movlw	62
  1035  00035E  6E08               	movwf	(___flge@ff1+3)^0,c
  1036  000360  C035  F009         	movff	read_card_RGB@G_rel,___flge@ff2
  1037  000364  C036  F00A         	movff	read_card_RGB@G_rel+1,___flge@ff2+1
  1038  000368  C037  F00B         	movff	read_card_RGB@G_rel+2,___flge@ff2+2
  1039  00036C  C038  F00C         	movff	read_card_RGB@G_rel+3,___flge@ff2+3
  1040  000370  EC3F  F007         	call	___flge	;wreg free
  1041  000374  B0D8               	btfsc	status,0,c
  1042  000376  EFBF  F001         	goto	u2961
  1043  00037A  EFC1  F001         	goto	u2960
  1044  00037E                     u2961:
  1045  00037E  EFFC  F001         	goto	l3008
  1046  000382                     u2960:
  1047  000382  0EEC               	movlw	236
  1048  000384  6E05               	movwf	___flge@ff1^0,c
  1049  000386  0E51               	movlw	81
  1050  000388  6E06               	movwf	(___flge@ff1+1)^0,c
  1051  00038A  0E38               	movlw	56
  1052  00038C  6E07               	movwf	(___flge@ff1+2)^0,c
  1053  00038E  0E3E               	movlw	62
  1054  000390  6E08               	movwf	(___flge@ff1+3)^0,c
  1055  000392  C039  F009         	movff	read_card_RGB@B_rel,___flge@ff2
  1056  000396  C03A  F00A         	movff	read_card_RGB@B_rel+1,___flge@ff2+1
  1057  00039A  C03B  F00B         	movff	read_card_RGB@B_rel+2,___flge@ff2+2
  1058  00039E  C03C  F00C         	movff	read_card_RGB@B_rel+3,___flge@ff2+3
  1059  0003A2  EC3F  F007         	call	___flge	;wreg free
  1060  0003A6  B0D8               	btfsc	status,0,c
  1061  0003A8  EFD8  F001         	goto	u2971
  1062  0003AC  EFDA  F001         	goto	u2970
  1063  0003B0                     u2971:
  1064  0003B0  EFFC  F001         	goto	l3008
  1065  0003B4                     u2970:
  1066  0003B4                     
  1067                           ;color_card.c: 29:         reverse(mL, mR);
  1068  0003B4  C02D  F01E         	movff	read_card_RGB@mL,reverse@mL
  1069  0003B8  C02E  F01F         	movff	read_card_RGB@mL+1,reverse@mL+1
  1070  0003BC  C02F  F020         	movff	read_card_RGB@mR,reverse@mR
  1071  0003C0  C030  F021         	movff	read_card_RGB@mR+1,reverse@mR+1
  1072  0003C4  ECDB  F008         	call	_reverse	;wreg free
  1073                           
  1074                           ;color_card.c: 30:         turnRight(mL, mR, 90);
  1075  0003C8  C02D  F01E         	movff	read_card_RGB@mL,turnRight@mL
  1076  0003CC  C02E  F01F         	movff	read_card_RGB@mL+1,turnRight@mL+1
  1077  0003D0  C02F  F020         	movff	read_card_RGB@mR,turnRight@mR
  1078  0003D4  C030  F021         	movff	read_card_RGB@mR+1,turnRight@mR+1
  1079  0003D8  0E5A               	movlw	90
  1080  0003DA  6E22               	movwf	turnRight@deg^0,c
  1081  0003DC  EC95  F003         	call	_turnRight	;wreg free
  1082                           
  1083                           ;color_card.c: 31:         stop(mL, mR);
  1084  0003E0  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
  1085  0003E4  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
  1086  0003E8  C02F  F020         	movff	read_card_RGB@mR,stop@mR
  1087  0003EC  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
  1088  0003F0  EC8E  F008         	call	_stop	;wreg free
  1089                           
  1090                           ;color_card.c: 33:     } else if ((R_rel>0.49) && (G_rel<0.275) && (B_rel>0.195)) {
  1091  0003F4  EF94  F003         	goto	l484
  1092  0003F8                     l3008:
  1093  0003F8  0E48               	movlw	72
  1094  0003FA  6E05               	movwf	___flge@ff1^0,c
  1095  0003FC  0EE1               	movlw	225
  1096  0003FE  6E06               	movwf	(___flge@ff1+1)^0,c
  1097  000400  0EFA               	movlw	250
  1098  000402  6E07               	movwf	(___flge@ff1+2)^0,c
  1099  000404  0E3E               	movlw	62
  1100  000406  6E08               	movwf	(___flge@ff1+3)^0,c
  1101  000408  C031  F009         	movff	read_card_RGB@R_rel,___flge@ff2
  1102  00040C  C032  F00A         	movff	read_card_RGB@R_rel+1,___flge@ff2+1
  1103  000410  C033  F00B         	movff	read_card_RGB@R_rel+2,___flge@ff2+2
  1104  000414  C034  F00C         	movff	read_card_RGB@R_rel+3,___flge@ff2+3
  1105  000418  EC3F  F007         	call	___flge	;wreg free
  1106  00041C  B0D8               	btfsc	status,0,c
  1107  00041E  EF13  F002         	goto	u2981
  1108  000422  EF15  F002         	goto	u2980
  1109  000426                     u2981:
  1110  000426  EF69  F002         	goto	l3016
  1111  00042A                     u2980:
  1112  00042A  C035  F005         	movff	read_card_RGB@G_rel,___flge@ff1
  1113  00042E  C036  F006         	movff	read_card_RGB@G_rel+1,___flge@ff1+1
  1114  000432  C037  F007         	movff	read_card_RGB@G_rel+2,___flge@ff1+2
  1115  000436  C038  F008         	movff	read_card_RGB@G_rel+3,___flge@ff1+3
  1116  00043A  0ECD               	movlw	205
  1117  00043C  6E09               	movwf	___flge@ff2^0,c
  1118  00043E  0ECC               	movlw	204
  1119  000440  6E0A               	movwf	(___flge@ff2+1)^0,c
  1120  000442  0E8C               	movlw	140
  1121  000444  6E0B               	movwf	(___flge@ff2+2)^0,c
  1122  000446  0E3E               	movlw	62
  1123  000448  6E0C               	movwf	(___flge@ff2+3)^0,c
  1124  00044A  EC3F  F007         	call	___flge	;wreg free
  1125  00044E  B0D8               	btfsc	status,0,c
  1126  000450  EF2C  F002         	goto	u2991
  1127  000454  EF2E  F002         	goto	u2990
  1128  000458                     u2991:
  1129  000458  EF69  F002         	goto	l3016
  1130  00045C                     u2990:
  1131  00045C  0E14               	movlw	20
  1132  00045E  6E05               	movwf	___flge@ff1^0,c
  1133  000460  0EAE               	movlw	174
  1134  000462  6E06               	movwf	(___flge@ff1+1)^0,c
  1135  000464  0E47               	movlw	71
  1136  000466  6E07               	movwf	(___flge@ff1+2)^0,c
  1137  000468  0E3E               	movlw	62
  1138  00046A  6E08               	movwf	(___flge@ff1+3)^0,c
  1139  00046C  C039  F009         	movff	read_card_RGB@B_rel,___flge@ff2
  1140  000470  C03A  F00A         	movff	read_card_RGB@B_rel+1,___flge@ff2+1
  1141  000474  C03B  F00B         	movff	read_card_RGB@B_rel+2,___flge@ff2+2
  1142  000478  C03C  F00C         	movff	read_card_RGB@B_rel+3,___flge@ff2+3
  1143  00047C  EC3F  F007         	call	___flge	;wreg free
  1144  000480  B0D8               	btfsc	status,0,c
  1145  000482  EF45  F002         	goto	u3001
  1146  000486  EF47  F002         	goto	u3000
  1147  00048A                     u3001:
  1148  00048A  EF69  F002         	goto	l3016
  1149  00048E                     u3000:
  1150  00048E                     
  1151                           ;color_card.c: 35:         reverse(mL, mR);
  1152  00048E  C02D  F01E         	movff	read_card_RGB@mL,reverse@mL
  1153  000492  C02E  F01F         	movff	read_card_RGB@mL+1,reverse@mL+1
  1154  000496  C02F  F020         	movff	read_card_RGB@mR,reverse@mR
  1155  00049A  C030  F021         	movff	read_card_RGB@mR+1,reverse@mR+1
  1156  00049E  ECDB  F008         	call	_reverse	;wreg free
  1157                           
  1158                           ;color_card.c: 36:         turnLeft(mL, mR, 90);
  1159  0004A2  C02D  F01E         	movff	read_card_RGB@mL,turnLeft@mL
  1160  0004A6  C02E  F01F         	movff	read_card_RGB@mL+1,turnLeft@mL+1
  1161  0004AA  C02F  F020         	movff	read_card_RGB@mR,turnLeft@mR
  1162  0004AE  C030  F021         	movff	read_card_RGB@mR+1,turnLeft@mR+1
  1163  0004B2  0E5A               	movlw	90
  1164  0004B4  6E22               	movwf	turnLeft@deg^0,c
  1165  0004B6  EC88  F004         	call	_turnLeft	;wreg free
  1166                           
  1167                           ;color_card.c: 37:         stop(mL, mR);
  1168  0004BA  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
  1169  0004BE  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
  1170  0004C2  C02F  F020         	movff	read_card_RGB@mR,stop@mR
  1171  0004C6  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
  1172  0004CA  EC8E  F008         	call	_stop	;wreg free
  1173                           
  1174                           ;color_card.c: 39:     } else if ((R_rel>0.54) && (G_rel<0.24) && (B_rel<0.18)) {
  1175  0004CE  EF94  F003         	goto	l484
  1176  0004D2                     l3016:
  1177  0004D2  0E71               	movlw	113
  1178  0004D4  6E05               	movwf	___flge@ff1^0,c
  1179  0004D6  0E3D               	movlw	61
  1180  0004D8  6E06               	movwf	(___flge@ff1+1)^0,c
  1181  0004DA  0E0A               	movlw	10
  1182  0004DC  6E07               	movwf	(___flge@ff1+2)^0,c
  1183  0004DE  0E3F               	movlw	63
  1184  0004E0  6E08               	movwf	(___flge@ff1+3)^0,c
  1185  0004E2  C031  F009         	movff	read_card_RGB@R_rel,___flge@ff2
  1186  0004E6  C032  F00A         	movff	read_card_RGB@R_rel+1,___flge@ff2+1
  1187  0004EA  C033  F00B         	movff	read_card_RGB@R_rel+2,___flge@ff2+2
  1188  0004EE  C034  F00C         	movff	read_card_RGB@R_rel+3,___flge@ff2+3
  1189  0004F2  EC3F  F007         	call	___flge	;wreg free
  1190  0004F6  B0D8               	btfsc	status,0,c
  1191  0004F8  EF80  F002         	goto	u3011
  1192  0004FC  EF82  F002         	goto	u3010
  1193  000500                     u3011:
  1194  000500  EFCC  F002         	goto	l3024
  1195  000504                     u3010:
  1196  000504  C035  F005         	movff	read_card_RGB@G_rel,___flge@ff1
  1197  000508  C036  F006         	movff	read_card_RGB@G_rel+1,___flge@ff1+1
  1198  00050C  C037  F007         	movff	read_card_RGB@G_rel+2,___flge@ff1+2
  1199  000510  C038  F008         	movff	read_card_RGB@G_rel+3,___flge@ff1+3
  1200  000514  0E8F               	movlw	143
  1201  000516  6E09               	movwf	___flge@ff2^0,c
  1202  000518  0EC2               	movlw	194
  1203  00051A  6E0A               	movwf	(___flge@ff2+1)^0,c
  1204  00051C  0E75               	movlw	117
  1205  00051E  6E0B               	movwf	(___flge@ff2+2)^0,c
  1206  000520  0E3E               	movlw	62
  1207  000522  6E0C               	movwf	(___flge@ff2+3)^0,c
  1208  000524  EC3F  F007         	call	___flge	;wreg free
  1209  000528  B0D8               	btfsc	status,0,c
  1210  00052A  EF99  F002         	goto	u3021
  1211  00052E  EF9B  F002         	goto	u3020
  1212  000532                     u3021:
  1213  000532  EFCC  F002         	goto	l3024
  1214  000536                     u3020:
  1215  000536  C039  F005         	movff	read_card_RGB@B_rel,___flge@ff1
  1216  00053A  C03A  F006         	movff	read_card_RGB@B_rel+1,___flge@ff1+1
  1217  00053E  C03B  F007         	movff	read_card_RGB@B_rel+2,___flge@ff1+2
  1218  000542  C03C  F008         	movff	read_card_RGB@B_rel+3,___flge@ff1+3
  1219  000546  0EEC               	movlw	236
  1220  000548  6E09               	movwf	___flge@ff2^0,c
  1221  00054A  0E51               	movlw	81
  1222  00054C  6E0A               	movwf	(___flge@ff2+1)^0,c
  1223  00054E  0E38               	movlw	56
  1224  000550  6E0B               	movwf	(___flge@ff2+2)^0,c
  1225  000552  0E3E               	movlw	62
  1226  000554  6E0C               	movwf	(___flge@ff2+3)^0,c
  1227  000556  EC3F  F007         	call	___flge	;wreg free
  1228  00055A  B0D8               	btfsc	status,0,c
  1229  00055C  EFB2  F002         	goto	u3031
  1230  000560  EFB4  F002         	goto	u3030
  1231  000564                     u3031:
  1232  000564  EFCC  F002         	goto	l3024
  1233  000568                     u3030:
  1234  000568                     
  1235                           ;color_card.c: 41:         turnRight(mL, mR, 135);
  1236  000568  C02D  F01E         	movff	read_card_RGB@mL,turnRight@mL
  1237  00056C  C02E  F01F         	movff	read_card_RGB@mL+1,turnRight@mL+1
  1238  000570  C02F  F020         	movff	read_card_RGB@mR,turnRight@mR
  1239  000574  C030  F021         	movff	read_card_RGB@mR+1,turnRight@mR+1
  1240  000578  0E87               	movlw	135
  1241  00057A  6E22               	movwf	turnRight@deg^0,c
  1242  00057C  EC95  F003         	call	_turnRight	;wreg free
  1243                           
  1244                           ;color_card.c: 42:         stop(mL, mR);
  1245  000580  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
  1246  000584  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
  1247  000588  C02F  F020         	movff	read_card_RGB@mR,stop@mR
  1248  00058C  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
  1249  000590  EC8E  F008         	call	_stop	;wreg free
  1250                           
  1251                           ;color_card.c: 44:     } else if ((R_rel<0.44) && (G_rel>0.305) && (B_rel>0.21)) {
  1252  000594  EF94  F003         	goto	l484
  1253  000598                     l3024:
  1254  000598  C031  F005         	movff	read_card_RGB@R_rel,___flge@ff1
  1255  00059C  C032  F006         	movff	read_card_RGB@R_rel+1,___flge@ff1+1
  1256  0005A0  C033  F007         	movff	read_card_RGB@R_rel+2,___flge@ff1+2
  1257  0005A4  C034  F008         	movff	read_card_RGB@R_rel+3,___flge@ff1+3
  1258  0005A8  0EAE               	movlw	174
  1259  0005AA  6E09               	movwf	___flge@ff2^0,c
  1260  0005AC  0E47               	movlw	71
  1261  0005AE  6E0A               	movwf	(___flge@ff2+1)^0,c
  1262  0005B0  0EE1               	movlw	225
  1263  0005B2  6E0B               	movwf	(___flge@ff2+2)^0,c
  1264  0005B4  0E3E               	movlw	62
  1265  0005B6  6E0C               	movwf	(___flge@ff2+3)^0,c
  1266  0005B8  EC3F  F007         	call	___flge	;wreg free
  1267  0005BC  B0D8               	btfsc	status,0,c
  1268  0005BE  EFE3  F002         	goto	u3041
  1269  0005C2  EFE5  F002         	goto	u3040
  1270  0005C6                     u3041:
  1271  0005C6  EF2F  F003         	goto	l3032
  1272  0005CA                     u3040:
  1273  0005CA  0EF6               	movlw	246
  1274  0005CC  6E05               	movwf	___flge@ff1^0,c
  1275  0005CE  0E28               	movlw	40
  1276  0005D0  6E06               	movwf	(___flge@ff1+1)^0,c
  1277  0005D2  0E9C               	movlw	156
  1278  0005D4  6E07               	movwf	(___flge@ff1+2)^0,c
  1279  0005D6  0E3E               	movlw	62
  1280  0005D8  6E08               	movwf	(___flge@ff1+3)^0,c
  1281  0005DA  C035  F009         	movff	read_card_RGB@G_rel,___flge@ff2
  1282  0005DE  C036  F00A         	movff	read_card_RGB@G_rel+1,___flge@ff2+1
  1283  0005E2  C037  F00B         	movff	read_card_RGB@G_rel+2,___flge@ff2+2
  1284  0005E6  C038  F00C         	movff	read_card_RGB@G_rel+3,___flge@ff2+3
  1285  0005EA  EC3F  F007         	call	___flge	;wreg free
  1286  0005EE  B0D8               	btfsc	status,0,c
  1287  0005F0  EFFC  F002         	goto	u3051
  1288  0005F4  EFFE  F002         	goto	u3050
  1289  0005F8                     u3051:
  1290  0005F8  EF2F  F003         	goto	l3032
  1291  0005FC                     u3050:
  1292  0005FC  0E3D               	movlw	61
  1293  0005FE  6E05               	movwf	___flge@ff1^0,c
  1294  000600  0E0A               	movlw	10
  1295  000602  6E06               	movwf	(___flge@ff1+1)^0,c
  1296  000604  0E57               	movlw	87
  1297  000606  6E07               	movwf	(___flge@ff1+2)^0,c
  1298  000608  0E3E               	movlw	62
  1299  00060A  6E08               	movwf	(___flge@ff1+3)^0,c
  1300  00060C  C039  F009         	movff	read_card_RGB@B_rel,___flge@ff2
  1301  000610  C03A  F00A         	movff	read_card_RGB@B_rel+1,___flge@ff2+1
  1302  000614  C03B  F00B         	movff	read_card_RGB@B_rel+2,___flge@ff2+2
  1303  000618  C03C  F00C         	movff	read_card_RGB@B_rel+3,___flge@ff2+3
  1304  00061C  EC3F  F007         	call	___flge	;wreg free
  1305  000620  B0D8               	btfsc	status,0,c
  1306  000622  EF15  F003         	goto	u3061
  1307  000626  EF17  F003         	goto	u3060
  1308  00062A                     u3061:
  1309  00062A  EF2F  F003         	goto	l3032
  1310  00062E                     u3060:
  1311  00062E                     
  1312                           ;color_card.c: 46:         turnLeft(mL, mR, 135);
  1313  00062E  C02D  F01E         	movff	read_card_RGB@mL,turnLeft@mL
  1314  000632  C02E  F01F         	movff	read_card_RGB@mL+1,turnLeft@mL+1
  1315  000636  C02F  F020         	movff	read_card_RGB@mR,turnLeft@mR
  1316  00063A  C030  F021         	movff	read_card_RGB@mR+1,turnLeft@mR+1
  1317  00063E  0E87               	movlw	135
  1318  000640  6E22               	movwf	turnLeft@deg^0,c
  1319  000642  EC88  F004         	call	_turnLeft	;wreg free
  1320                           
  1321                           ;color_card.c: 47:         stop(mL, mR);
  1322  000646  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
  1323  00064A  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
  1324  00064E  C02F  F020         	movff	read_card_RGB@mR,stop@mR
  1325  000652  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
  1326  000656  EC8E  F008         	call	_stop	;wreg free
  1327                           
  1328                           ;color_card.c: 49:     } else if ((R_rel<0.46) && (G_rel>0.295) && (B_rel>0.21)) {
  1329  00065A  EF94  F003         	goto	l484
  1330  00065E                     l3032:
  1331  00065E  C031  F005         	movff	read_card_RGB@R_rel,___flge@ff1
  1332  000662  C032  F006         	movff	read_card_RGB@R_rel+1,___flge@ff1+1
  1333  000666  C033  F007         	movff	read_card_RGB@R_rel+2,___flge@ff1+2
  1334  00066A  C034  F008         	movff	read_card_RGB@R_rel+3,___flge@ff1+3
  1335  00066E  0E1F               	movlw	31
  1336  000670  6E09               	movwf	___flge@ff2^0,c
  1337  000672  0E85               	movlw	133
  1338  000674  6E0A               	movwf	(___flge@ff2+1)^0,c
  1339  000676  0EEB               	movlw	235
  1340  000678  6E0B               	movwf	(___flge@ff2+2)^0,c
  1341  00067A  0E3E               	movlw	62
  1342  00067C  6E0C               	movwf	(___flge@ff2+3)^0,c
  1343  00067E  EC3F  F007         	call	___flge	;wreg free
  1344  000682  B0D8               	btfsc	status,0,c
  1345  000684  EF46  F003         	goto	u3071
  1346  000688  EF48  F003         	goto	u3070
  1347  00068C                     u3071:
  1348  00068C  EF7C  F003         	goto	l3040
  1349  000690                     u3070:
  1350  000690  0E3D               	movlw	61
  1351  000692  6E05               	movwf	___flge@ff1^0,c
  1352  000694  0E0A               	movlw	10
  1353  000696  6E06               	movwf	(___flge@ff1+1)^0,c
  1354  000698  0E97               	movlw	151
  1355  00069A  6E07               	movwf	(___flge@ff1+2)^0,c
  1356  00069C  0E3E               	movlw	62
  1357  00069E  6E08               	movwf	(___flge@ff1+3)^0,c
  1358  0006A0  C035  F009         	movff	read_card_RGB@G_rel,___flge@ff2
  1359  0006A4  C036  F00A         	movff	read_card_RGB@G_rel+1,___flge@ff2+1
  1360  0006A8  C037  F00B         	movff	read_card_RGB@G_rel+2,___flge@ff2+2
  1361  0006AC  C038  F00C         	movff	read_card_RGB@G_rel+3,___flge@ff2+3
  1362  0006B0  EC3F  F007         	call	___flge	;wreg free
  1363  0006B4  B0D8               	btfsc	status,0,c
  1364  0006B6  EF5F  F003         	goto	u3081
  1365  0006BA  EF61  F003         	goto	u3080
  1366  0006BE                     u3081:
  1367  0006BE  EF7C  F003         	goto	l3040
  1368  0006C2                     u3080:
  1369  0006C2  0E3D               	movlw	61
  1370  0006C4  6E05               	movwf	___flge@ff1^0,c
  1371  0006C6  0E0A               	movlw	10
  1372  0006C8  6E06               	movwf	(___flge@ff1+1)^0,c
  1373  0006CA  0E57               	movlw	87
  1374  0006CC  6E07               	movwf	(___flge@ff1+2)^0,c
  1375  0006CE  0E3E               	movlw	62
  1376  0006D0  6E08               	movwf	(___flge@ff1+3)^0,c
  1377  0006D2  C039  F009         	movff	read_card_RGB@B_rel,___flge@ff2
  1378  0006D6  C03A  F00A         	movff	read_card_RGB@B_rel+1,___flge@ff2+1
  1379  0006DA  C03B  F00B         	movff	read_card_RGB@B_rel+2,___flge@ff2+2
  1380  0006DE  C03C  F00C         	movff	read_card_RGB@B_rel+3,___flge@ff2+3
  1381  0006E2  EC3F  F007         	call	___flge	;wreg free
  1382  0006E6  B0D8               	btfsc	status,0,c
  1383  0006E8  EF78  F003         	goto	u3091
  1384  0006EC  EF7A  F003         	goto	u3090
  1385  0006F0                     u3091:
  1386  0006F0  EF7C  F003         	goto	l3040
  1387  0006F4                     u3090:
  1388  0006F4  EF77  F001         	goto	l2998
  1389  0006F8                     l3040:
  1390                           
  1391                           ;color_card.c: 56:         returnhome_flag = 1;
  1392  0006F8  0E01               	movlw	1
  1393  0006FA  6E41               	movwf	_returnhome_flag^0,c	;volatile
  1394  0006FC                     
  1395                           ;color_card.c: 57:         turnRight(mL, mR, 180);
  1396  0006FC  C02D  F01E         	movff	read_card_RGB@mL,turnRight@mL
  1397  000700  C02E  F01F         	movff	read_card_RGB@mL+1,turnRight@mL+1
  1398  000704  C02F  F020         	movff	read_card_RGB@mR,turnRight@mR
  1399  000708  C030  F021         	movff	read_card_RGB@mR+1,turnRight@mR+1
  1400  00070C  0EB4               	movlw	180
  1401  00070E  6E22               	movwf	turnRight@deg^0,c
  1402  000710  EC95  F003         	call	_turnRight	;wreg free
  1403  000714                     
  1404                           ;color_card.c: 58:         stop(mL, mR);
  1405  000714  C02D  F01E         	movff	read_card_RGB@mL,stop@mL
  1406  000718  C02E  F01F         	movff	read_card_RGB@mL+1,stop@mL+1
  1407  00071C  C02F  F020         	movff	read_card_RGB@mR,stop@mR
  1408  000720  C030  F021         	movff	read_card_RGB@mR+1,stop@mR+1
  1409  000724  EC8E  F008         	call	_stop	;wreg free
  1410  000728                     l484:
  1411  000728  0012               	return		;funcret
  1412  00072A                     __end_of_read_card_RGB:
  1413                           	callstack 0
  1414                           
  1415 ;; *************** function _turnRight *****************
  1416 ;; Defined at:
  1417 ;;		line 246 in file "dc_motor.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  mL              2   29[COMRAM] PTR struct .
  1420 ;;		 -> main@motorL(9), 
  1421 ;;  mR              2   31[COMRAM] PTR struct .
  1422 ;;		 -> main@motorR(9), 
  1423 ;;  deg             1   33[COMRAM] unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1435 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1438 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1439 ;;Total ram usage:        7 bytes
  1440 ;; Hardware stack levels used: 1
  1441 ;; Hardware stack levels required when called: 7
  1442 ;; This function calls:
  1443 ;;		_setMotorPWM
  1444 ;; This function is called by:
  1445 ;;		_read_card_RGB
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text2
  1450  00072A                     __ptext2:
  1451                           	callstack 0
  1452  00072A                     _turnRight:
  1453                           	callstack 22
  1454  00072A                     
  1455                           ;dc_motor.c: 246: void turnRight(DC_motor *mL, DC_motor *mR, unsigned char deg);dc_motor
      +                          .c: 247: {;dc_motor.c: 248:     if (returnhome_flag==0) {
  1456  00072A  5041               	movf	_returnhome_flag^0,w,c	;volatile
  1457  00072C  A4D8               	btfss	status,2,c
  1458  00072E  EF9B  F003         	goto	u2511
  1459  000732  EF9D  F003         	goto	u2510
  1460  000736                     u2511:
  1461  000736  EF13  F004         	goto	l2758
  1462  00073A                     u2510:
  1463  00073A                     
  1464                           ;dc_motor.c: 250:         mL->direction = 1;
  1465  00073A  EE20 F001          	lfsr	2,1
  1466  00073E  501E               	movf	turnRight@mL^0,w,c
  1467  000740  26D9               	addwf	fsr2l,f,c
  1468  000742  501F               	movf	(turnRight@mL+1)^0,w,c
  1469  000744  22DA               	addwfc	fsr2h,f,c
  1470  000746  0E01               	movlw	1
  1471  000748  6EDF               	movwf	indf2,c
  1472                           
  1473                           ;dc_motor.c: 251:         mR->direction = 0;
  1474  00074A  EE20 F001          	lfsr	2,1
  1475  00074E  5020               	movf	turnRight@mR^0,w,c
  1476  000750  26D9               	addwf	fsr2l,f,c
  1477  000752  5021               	movf	(turnRight@mR+1)^0,w,c
  1478  000754  22DA               	addwfc	fsr2h,f,c
  1479  000756  0E00               	movlw	0
  1480  000758  6EDF               	movwf	indf2,c
  1481                           
  1482                           ;dc_motor.c: 254:         while(((mL->power)<50) || ((mR->power)<50)){
  1483  00075A  EFF8  F003         	goto	l224
  1484  00075E                     l2740:
  1485                           
  1486                           ;dc_motor.c: 256:             LATHbits.LATH0 = !LATHbits.LATH0;
  1487  00075E  A080               	btfss	128,0,c	;volatile
  1488  000760  EFB4  F003         	goto	u2521
  1489  000764  EFB8  F003         	goto	u2520
  1490  000768                     u2521:
  1491  000768  6A23               	clrf	??_turnRight^0,c
  1492  00076A  2A23               	incf	??_turnRight^0,f,c
  1493  00076C  EFB9  F003         	goto	u2538
  1494  000770                     u2520:
  1495  000770  6A23               	clrf	??_turnRight^0,c
  1496  000772                     u2538:
  1497  000772  5080               	movf	128,w,c	;volatile
  1498  000774  1823               	xorwf	??_turnRight^0,w,c
  1499  000776  0BFE               	andlw	-2
  1500  000778  1823               	xorwf	??_turnRight^0,w,c
  1501  00077A  6E80               	movwf	128,c	;volatile
  1502  00077C                     
  1503                           ;dc_motor.c: 259:             if (mL->power<50) {mL->power+=1;}
  1504  00077C  C01E  FFD9         	movff	turnRight@mL,fsr2l
  1505  000780  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  1506  000784  0E32               	movlw	50
  1507  000786  60DF               	cpfslt	indf2,c
  1508  000788  EFC8  F003         	goto	u2541
  1509  00078C  EFCA  F003         	goto	u2540
  1510  000790                     u2541:
  1511  000790  EFCF  F003         	goto	l2746
  1512  000794                     u2540:
  1513  000794  C01E  FFD9         	movff	turnRight@mL,fsr2l
  1514  000798  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  1515  00079C  2ADF               	incf	indf2,f,c
  1516  00079E                     l2746:
  1517                           
  1518                           ;dc_motor.c: 260:             if (mR->power<50) {mR->power+=1;}
  1519  00079E  C020  FFD9         	movff	turnRight@mR,fsr2l
  1520  0007A2  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  1521  0007A6  0E32               	movlw	50
  1522  0007A8  60DF               	cpfslt	indf2,c
  1523  0007AA  EFD9  F003         	goto	u2551
  1524  0007AE  EFDB  F003         	goto	u2550
  1525  0007B2                     u2551:
  1526  0007B2  EFE0  F003         	goto	l2750
  1527  0007B6                     u2550:
  1528  0007B6  C020  FFD9         	movff	turnRight@mR,fsr2l
  1529  0007BA  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  1530  0007BE  2ADF               	incf	indf2,f,c
  1531  0007C0                     l2750:
  1532                           
  1533                           ;dc_motor.c: 263:             setMotorPWM(mL);
  1534  0007C0  C01E  F013         	movff	turnRight@mL,setMotorPWM@m
  1535  0007C4  C01F  F014         	movff	turnRight@mL+1,setMotorPWM@m+1
  1536  0007C8  EC7B  F005         	call	_setMotorPWM	;wreg free
  1537  0007CC                     
  1538                           ;dc_motor.c: 264:             setMotorPWM(mR);
  1539  0007CC  C020  F013         	movff	turnRight@mR,setMotorPWM@m
  1540  0007D0  C021  F014         	movff	turnRight@mR+1,setMotorPWM@m+1
  1541  0007D4  EC7B  F005         	call	_setMotorPWM	;wreg free
  1542  0007D8                     
  1543                           ;dc_motor.c: 265:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1544  0007D8  0E09               	movlw	9
  1545  0007DA  6E24               	movwf	(??_turnRight+1)^0,c
  1546  0007DC  0E1E               	movlw	30
  1547  0007DE  6E23               	movwf	??_turnRight^0,c
  1548  0007E0  0EE4               	movlw	228
  1549  0007E2                     u3177:
  1550  0007E2  2EE8               	decfsz	wreg,f,c
  1551  0007E4  D7FE               	bra	u3177
  1552  0007E6  2E23               	decfsz	??_turnRight^0,f,c
  1553  0007E8  D7FC               	bra	u3177
  1554  0007EA  2E24               	decfsz	(??_turnRight+1)^0,f,c
  1555  0007EC  D7FA               	bra	u3177
  1556  0007EE  D000               	nop2	
  1557  0007F0                     l224:
  1558                           
  1559                           ;dc_motor.c: 254:         while(((mL->power)<50) || ((mR->power)<50)){
  1560  0007F0  C01E  FFD9         	movff	turnRight@mL,fsr2l
  1561  0007F4  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  1562  0007F8  0E31               	movlw	49
  1563  0007FA  64DF               	cpfsgt	indf2,c
  1564  0007FC  EF02  F004         	goto	u2561
  1565  000800  EF04  F004         	goto	u2560
  1566  000804                     u2561:
  1567  000804  EFAF  F003         	goto	l2740
  1568  000808                     u2560:
  1569  000808  C020  FFD9         	movff	turnRight@mR,fsr2l
  1570  00080C  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  1571  000810  0E31               	movlw	49
  1572  000812  64DF               	cpfsgt	indf2,c
  1573  000814  EF0E  F004         	goto	u2571
  1574  000818  EF10  F004         	goto	u2570
  1575  00081C                     u2571:
  1576  00081C  EFAF  F003         	goto	l2740
  1577  000820                     u2570:
  1578  000820                     
  1579                           ;dc_motor.c: 268:         LATHbits.LATH0 = 0;
  1580  000820  9080               	bcf	128,0,c	;volatile
  1581                           
  1582                           ;dc_motor.c: 270:     } else {
  1583  000822  EF87  F004         	goto	l235
  1584  000826                     l2758:
  1585                           
  1586                           ;dc_motor.c: 272:         mL->direction = 0;
  1587  000826  EE20 F001          	lfsr	2,1
  1588  00082A  501E               	movf	turnRight@mL^0,w,c
  1589  00082C  26D9               	addwf	fsr2l,f,c
  1590  00082E  501F               	movf	(turnRight@mL+1)^0,w,c
  1591  000830  22DA               	addwfc	fsr2h,f,c
  1592  000832  0E00               	movlw	0
  1593  000834  6EDF               	movwf	indf2,c
  1594                           
  1595                           ;dc_motor.c: 273:         mR->direction = 1;
  1596  000836  EE20 F001          	lfsr	2,1
  1597  00083A  5020               	movf	turnRight@mR^0,w,c
  1598  00083C  26D9               	addwf	fsr2l,f,c
  1599  00083E  5021               	movf	(turnRight@mR+1)^0,w,c
  1600  000840  22DA               	addwfc	fsr2h,f,c
  1601  000842  0E01               	movlw	1
  1602  000844  6EDF               	movwf	indf2,c
  1603                           
  1604                           ;dc_motor.c: 276:         while(((mL->power)<50) || ((mR->power)<50)){
  1605  000846  EF6E  F004         	goto	l230
  1606  00084A                     l2760:
  1607                           
  1608                           ;dc_motor.c: 278:             LATFbits.LATF0 = !LATFbits.LATF0;
  1609  00084A  A07E               	btfss	126,0,c	;volatile
  1610  00084C  EF2A  F004         	goto	u2581
  1611  000850  EF2E  F004         	goto	u2580
  1612  000854                     u2581:
  1613  000854  6A23               	clrf	??_turnRight^0,c
  1614  000856  2A23               	incf	??_turnRight^0,f,c
  1615  000858  EF2F  F004         	goto	u2598
  1616  00085C                     u2580:
  1617  00085C  6A23               	clrf	??_turnRight^0,c
  1618  00085E                     u2598:
  1619  00085E  507E               	movf	126,w,c	;volatile
  1620  000860  1823               	xorwf	??_turnRight^0,w,c
  1621  000862  0BFE               	andlw	-2
  1622  000864  1823               	xorwf	??_turnRight^0,w,c
  1623  000866  6E7E               	movwf	126,c	;volatile
  1624  000868                     
  1625                           ;dc_motor.c: 281:             if (mL->power<50) {mL->power+=1;}
  1626  000868  C01E  FFD9         	movff	turnRight@mL,fsr2l
  1627  00086C  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  1628  000870  0E32               	movlw	50
  1629  000872  60DF               	cpfslt	indf2,c
  1630  000874  EF3E  F004         	goto	u2601
  1631  000878  EF40  F004         	goto	u2600
  1632  00087C                     u2601:
  1633  00087C  EF45  F004         	goto	l2766
  1634  000880                     u2600:
  1635  000880  C01E  FFD9         	movff	turnRight@mL,fsr2l
  1636  000884  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  1637  000888  2ADF               	incf	indf2,f,c
  1638  00088A                     l2766:
  1639                           
  1640                           ;dc_motor.c: 282:             if (mR->power<50) {mR->power+=1;}
  1641  00088A  C020  FFD9         	movff	turnRight@mR,fsr2l
  1642  00088E  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  1643  000892  0E32               	movlw	50
  1644  000894  60DF               	cpfslt	indf2,c
  1645  000896  EF4F  F004         	goto	u2611
  1646  00089A  EF51  F004         	goto	u2610
  1647  00089E                     u2611:
  1648  00089E  EF56  F004         	goto	l2770
  1649  0008A2                     u2610:
  1650  0008A2  C020  FFD9         	movff	turnRight@mR,fsr2l
  1651  0008A6  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  1652  0008AA  2ADF               	incf	indf2,f,c
  1653  0008AC                     l2770:
  1654                           
  1655                           ;dc_motor.c: 285:             setMotorPWM(mL);
  1656  0008AC  C01E  F013         	movff	turnRight@mL,setMotorPWM@m
  1657  0008B0  C01F  F014         	movff	turnRight@mL+1,setMotorPWM@m+1
  1658  0008B4  EC7B  F005         	call	_setMotorPWM	;wreg free
  1659  0008B8                     
  1660                           ;dc_motor.c: 286:             setMotorPWM(mR);
  1661  0008B8  C020  F013         	movff	turnRight@mR,setMotorPWM@m
  1662  0008BC  C021  F014         	movff	turnRight@mR+1,setMotorPWM@m+1
  1663  0008C0  EC7B  F005         	call	_setMotorPWM	;wreg free
  1664  0008C4                     
  1665                           ;dc_motor.c: 287:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1666  0008C4  0E09               	movlw	9
  1667  0008C6  6E24               	movwf	(??_turnRight+1)^0,c
  1668  0008C8  0E1E               	movlw	30
  1669  0008CA  6E23               	movwf	??_turnRight^0,c
  1670  0008CC  0EE4               	movlw	228
  1671  0008CE                     u3187:
  1672  0008CE  2EE8               	decfsz	wreg,f,c
  1673  0008D0  D7FE               	bra	u3187
  1674  0008D2  2E23               	decfsz	??_turnRight^0,f,c
  1675  0008D4  D7FC               	bra	u3187
  1676  0008D6  2E24               	decfsz	(??_turnRight+1)^0,f,c
  1677  0008D8  D7FA               	bra	u3187
  1678  0008DA  D000               	nop2	
  1679  0008DC                     l230:
  1680                           
  1681                           ;dc_motor.c: 276:         while(((mL->power)<50) || ((mR->power)<50)){
  1682  0008DC  C01E  FFD9         	movff	turnRight@mL,fsr2l
  1683  0008E0  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  1684  0008E4  0E31               	movlw	49
  1685  0008E6  64DF               	cpfsgt	indf2,c
  1686  0008E8  EF78  F004         	goto	u2621
  1687  0008EC  EF7A  F004         	goto	u2620
  1688  0008F0                     u2621:
  1689  0008F0  EF25  F004         	goto	l2760
  1690  0008F4                     u2620:
  1691  0008F4  C020  FFD9         	movff	turnRight@mR,fsr2l
  1692  0008F8  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  1693  0008FC  0E31               	movlw	49
  1694  0008FE  64DF               	cpfsgt	indf2,c
  1695  000900  EF84  F004         	goto	u2631
  1696  000904  EF86  F004         	goto	u2630
  1697  000908                     u2631:
  1698  000908  EF25  F004         	goto	l2760
  1699  00090C                     u2630:
  1700  00090C                     
  1701                           ;dc_motor.c: 290:         LATFbits.LATF0 = 0;
  1702  00090C  907E               	bcf	126,0,c	;volatile
  1703  00090E                     l235:
  1704  00090E  0012               	return		;funcret
  1705  000910                     __end_of_turnRight:
  1706                           	callstack 0
  1707                           
  1708 ;; *************** function _turnLeft *****************
  1709 ;; Defined at:
  1710 ;;		line 194 in file "dc_motor.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  mL              2   29[COMRAM] PTR struct .
  1713 ;;		 -> main@motorL(9), 
  1714 ;;  mR              2   31[COMRAM] PTR struct .
  1715 ;;		 -> main@motorR(9), 
  1716 ;;  deg             1   33[COMRAM] unsigned char 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;		None
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1728 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1731 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1732 ;;Total ram usage:        7 bytes
  1733 ;; Hardware stack levels used: 1
  1734 ;; Hardware stack levels required when called: 7
  1735 ;; This function calls:
  1736 ;;		_setMotorPWM
  1737 ;; This function is called by:
  1738 ;;		_read_card_RGB
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           	psect	text3
  1743  000910                     __ptext3:
  1744                           	callstack 0
  1745  000910                     _turnLeft:
  1746                           	callstack 22
  1747  000910                     
  1748                           ;dc_motor.c: 194: void turnLeft(DC_motor *mL, DC_motor *mR, unsigned char deg);dc_motor.
      +                          c: 195: {;dc_motor.c: 196:     if (returnhome_flag==0) {
  1749  000910  5041               	movf	_returnhome_flag^0,w,c	;volatile
  1750  000912  A4D8               	btfss	status,2,c
  1751  000914  EF8E  F004         	goto	u2381
  1752  000918  EF90  F004         	goto	u2380
  1753  00091C                     u2381:
  1754  00091C  EF06  F005         	goto	l2716
  1755  000920                     u2380:
  1756  000920                     
  1757                           ;dc_motor.c: 198:         mL->direction = 0;
  1758  000920  EE20 F001          	lfsr	2,1
  1759  000924  501E               	movf	turnLeft@mL^0,w,c
  1760  000926  26D9               	addwf	fsr2l,f,c
  1761  000928  501F               	movf	(turnLeft@mL+1)^0,w,c
  1762  00092A  22DA               	addwfc	fsr2h,f,c
  1763  00092C  0E00               	movlw	0
  1764  00092E  6EDF               	movwf	indf2,c
  1765                           
  1766                           ;dc_motor.c: 199:         mR->direction = 1;
  1767  000930  EE20 F001          	lfsr	2,1
  1768  000934  5020               	movf	turnLeft@mR^0,w,c
  1769  000936  26D9               	addwf	fsr2l,f,c
  1770  000938  5021               	movf	(turnLeft@mR+1)^0,w,c
  1771  00093A  22DA               	addwfc	fsr2h,f,c
  1772  00093C  0E01               	movlw	1
  1773  00093E  6EDF               	movwf	indf2,c
  1774                           
  1775                           ;dc_motor.c: 202:         while(((mL->power)<50) || ((mR->power)<50)){
  1776  000940  EFEB  F004         	goto	l209
  1777  000944                     l2698:
  1778                           
  1779                           ;dc_motor.c: 204:             LATFbits.LATF0 = !LATFbits.LATF0;
  1780  000944  A07E               	btfss	126,0,c	;volatile
  1781  000946  EFA7  F004         	goto	u2391
  1782  00094A  EFAB  F004         	goto	u2390
  1783  00094E                     u2391:
  1784  00094E  6A23               	clrf	??_turnLeft^0,c
  1785  000950  2A23               	incf	??_turnLeft^0,f,c
  1786  000952  EFAC  F004         	goto	u2408
  1787  000956                     u2390:
  1788  000956  6A23               	clrf	??_turnLeft^0,c
  1789  000958                     u2408:
  1790  000958  507E               	movf	126,w,c	;volatile
  1791  00095A  1823               	xorwf	??_turnLeft^0,w,c
  1792  00095C  0BFE               	andlw	-2
  1793  00095E  1823               	xorwf	??_turnLeft^0,w,c
  1794  000960  6E7E               	movwf	126,c	;volatile
  1795  000962                     
  1796                           ;dc_motor.c: 207:             if (mL->power<50) {mL->power+=1;}
  1797  000962  C01E  FFD9         	movff	turnLeft@mL,fsr2l
  1798  000966  C01F  FFDA         	movff	turnLeft@mL+1,fsr2h
  1799  00096A  0E32               	movlw	50
  1800  00096C  60DF               	cpfslt	indf2,c
  1801  00096E  EFBB  F004         	goto	u2411
  1802  000972  EFBD  F004         	goto	u2410
  1803  000976                     u2411:
  1804  000976  EFC2  F004         	goto	l2704
  1805  00097A                     u2410:
  1806  00097A  C01E  FFD9         	movff	turnLeft@mL,fsr2l
  1807  00097E  C01F  FFDA         	movff	turnLeft@mL+1,fsr2h
  1808  000982  2ADF               	incf	indf2,f,c
  1809  000984                     l2704:
  1810                           
  1811                           ;dc_motor.c: 208:             if (mR->power<50) {mR->power+=1;}
  1812  000984  C020  FFD9         	movff	turnLeft@mR,fsr2l
  1813  000988  C021  FFDA         	movff	turnLeft@mR+1,fsr2h
  1814  00098C  0E32               	movlw	50
  1815  00098E  60DF               	cpfslt	indf2,c
  1816  000990  EFCC  F004         	goto	u2421
  1817  000994  EFCE  F004         	goto	u2420
  1818  000998                     u2421:
  1819  000998  EFD3  F004         	goto	l2708
  1820  00099C                     u2420:
  1821  00099C  C020  FFD9         	movff	turnLeft@mR,fsr2l
  1822  0009A0  C021  FFDA         	movff	turnLeft@mR+1,fsr2h
  1823  0009A4  2ADF               	incf	indf2,f,c
  1824  0009A6                     l2708:
  1825                           
  1826                           ;dc_motor.c: 211:             setMotorPWM(mL);
  1827  0009A6  C01E  F013         	movff	turnLeft@mL,setMotorPWM@m
  1828  0009AA  C01F  F014         	movff	turnLeft@mL+1,setMotorPWM@m+1
  1829  0009AE  EC7B  F005         	call	_setMotorPWM	;wreg free
  1830  0009B2                     
  1831                           ;dc_motor.c: 212:             setMotorPWM(mR);
  1832  0009B2  C020  F013         	movff	turnLeft@mR,setMotorPWM@m
  1833  0009B6  C021  F014         	movff	turnLeft@mR+1,setMotorPWM@m+1
  1834  0009BA  EC7B  F005         	call	_setMotorPWM	;wreg free
  1835  0009BE                     
  1836                           ;dc_motor.c: 213:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1837  0009BE  0E09               	movlw	9
  1838  0009C0  6E24               	movwf	(??_turnLeft+1)^0,c
  1839  0009C2  0E1E               	movlw	30
  1840  0009C4  6E23               	movwf	??_turnLeft^0,c
  1841  0009C6  0EE4               	movlw	228
  1842  0009C8                     u3197:
  1843  0009C8  2EE8               	decfsz	wreg,f,c
  1844  0009CA  D7FE               	bra	u3197
  1845  0009CC  2E23               	decfsz	??_turnLeft^0,f,c
  1846  0009CE  D7FC               	bra	u3197
  1847  0009D0  2E24               	decfsz	(??_turnLeft+1)^0,f,c
  1848  0009D2  D7FA               	bra	u3197
  1849  0009D4  D000               	nop2	
  1850  0009D6                     l209:
  1851                           
  1852                           ;dc_motor.c: 202:         while(((mL->power)<50) || ((mR->power)<50)){
  1853  0009D6  C01E  FFD9         	movff	turnLeft@mL,fsr2l
  1854  0009DA  C01F  FFDA         	movff	turnLeft@mL+1,fsr2h
  1855  0009DE  0E31               	movlw	49
  1856  0009E0  64DF               	cpfsgt	indf2,c
  1857  0009E2  EFF5  F004         	goto	u2431
  1858  0009E6  EFF7  F004         	goto	u2430
  1859  0009EA                     u2431:
  1860  0009EA  EFA2  F004         	goto	l2698
  1861  0009EE                     u2430:
  1862  0009EE  C020  FFD9         	movff	turnLeft@mR,fsr2l
  1863  0009F2  C021  FFDA         	movff	turnLeft@mR+1,fsr2h
  1864  0009F6  0E31               	movlw	49
  1865  0009F8  64DF               	cpfsgt	indf2,c
  1866  0009FA  EF01  F005         	goto	u2441
  1867  0009FE  EF03  F005         	goto	u2440
  1868  000A02                     u2441:
  1869  000A02  EFA2  F004         	goto	l2698
  1870  000A06                     u2440:
  1871  000A06                     
  1872                           ;dc_motor.c: 216:         LATFbits.LATF0 = 0;
  1873  000A06  907E               	bcf	126,0,c	;volatile
  1874                           
  1875                           ;dc_motor.c: 218:     } else {
  1876  000A08  EF7A  F005         	goto	l220
  1877  000A0C                     l2716:
  1878                           
  1879                           ;dc_motor.c: 220:         mL->direction = 1;
  1880  000A0C  EE20 F001          	lfsr	2,1
  1881  000A10  501E               	movf	turnLeft@mL^0,w,c
  1882  000A12  26D9               	addwf	fsr2l,f,c
  1883  000A14  501F               	movf	(turnLeft@mL+1)^0,w,c
  1884  000A16  22DA               	addwfc	fsr2h,f,c
  1885  000A18  0E01               	movlw	1
  1886  000A1A  6EDF               	movwf	indf2,c
  1887                           
  1888                           ;dc_motor.c: 221:         mR->direction = 0;
  1889  000A1C  EE20 F001          	lfsr	2,1
  1890  000A20  5020               	movf	turnLeft@mR^0,w,c
  1891  000A22  26D9               	addwf	fsr2l,f,c
  1892  000A24  5021               	movf	(turnLeft@mR+1)^0,w,c
  1893  000A26  22DA               	addwfc	fsr2h,f,c
  1894  000A28  0E00               	movlw	0
  1895  000A2A  6EDF               	movwf	indf2,c
  1896                           
  1897                           ;dc_motor.c: 224:         while(((mL->power)<50) || ((mR->power)<50)){
  1898  000A2C  EF61  F005         	goto	l215
  1899  000A30                     l2718:
  1900                           
  1901                           ;dc_motor.c: 226:             LATHbits.LATH0 = !LATHbits.LATH0;
  1902  000A30  A080               	btfss	128,0,c	;volatile
  1903  000A32  EF1D  F005         	goto	u2451
  1904  000A36  EF21  F005         	goto	u2450
  1905  000A3A                     u2451:
  1906  000A3A  6A23               	clrf	??_turnLeft^0,c
  1907  000A3C  2A23               	incf	??_turnLeft^0,f,c
  1908  000A3E  EF22  F005         	goto	u2468
  1909  000A42                     u2450:
  1910  000A42  6A23               	clrf	??_turnLeft^0,c
  1911  000A44                     u2468:
  1912  000A44  5080               	movf	128,w,c	;volatile
  1913  000A46  1823               	xorwf	??_turnLeft^0,w,c
  1914  000A48  0BFE               	andlw	-2
  1915  000A4A  1823               	xorwf	??_turnLeft^0,w,c
  1916  000A4C  6E80               	movwf	128,c	;volatile
  1917  000A4E                     
  1918                           ;dc_motor.c: 229:             if (mL->power<50) {mL->power+=1;}
  1919  000A4E  C01E  FFD9         	movff	turnLeft@mL,fsr2l
  1920  000A52  C01F  FFDA         	movff	turnLeft@mL+1,fsr2h
  1921  000A56  0E32               	movlw	50
  1922  000A58  60DF               	cpfslt	indf2,c
  1923  000A5A  EF31  F005         	goto	u2471
  1924  000A5E  EF33  F005         	goto	u2470
  1925  000A62                     u2471:
  1926  000A62  EF38  F005         	goto	l2724
  1927  000A66                     u2470:
  1928  000A66  C01E  FFD9         	movff	turnLeft@mL,fsr2l
  1929  000A6A  C01F  FFDA         	movff	turnLeft@mL+1,fsr2h
  1930  000A6E  2ADF               	incf	indf2,f,c
  1931  000A70                     l2724:
  1932                           
  1933                           ;dc_motor.c: 230:             if (mR->power<50) {mR->power+=1;}
  1934  000A70  C020  FFD9         	movff	turnLeft@mR,fsr2l
  1935  000A74  C021  FFDA         	movff	turnLeft@mR+1,fsr2h
  1936  000A78  0E32               	movlw	50
  1937  000A7A  60DF               	cpfslt	indf2,c
  1938  000A7C  EF42  F005         	goto	u2481
  1939  000A80  EF44  F005         	goto	u2480
  1940  000A84                     u2481:
  1941  000A84  EF49  F005         	goto	l2728
  1942  000A88                     u2480:
  1943  000A88  C020  FFD9         	movff	turnLeft@mR,fsr2l
  1944  000A8C  C021  FFDA         	movff	turnLeft@mR+1,fsr2h
  1945  000A90  2ADF               	incf	indf2,f,c
  1946  000A92                     l2728:
  1947                           
  1948                           ;dc_motor.c: 233:             setMotorPWM(mL);
  1949  000A92  C01E  F013         	movff	turnLeft@mL,setMotorPWM@m
  1950  000A96  C01F  F014         	movff	turnLeft@mL+1,setMotorPWM@m+1
  1951  000A9A  EC7B  F005         	call	_setMotorPWM	;wreg free
  1952  000A9E                     
  1953                           ;dc_motor.c: 234:             setMotorPWM(mR);
  1954  000A9E  C020  F013         	movff	turnLeft@mR,setMotorPWM@m
  1955  000AA2  C021  F014         	movff	turnLeft@mR+1,setMotorPWM@m+1
  1956  000AA6  EC7B  F005         	call	_setMotorPWM	;wreg free
  1957  000AAA                     
  1958                           ;dc_motor.c: 235:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1959  000AAA  0E09               	movlw	9
  1960  000AAC  6E24               	movwf	(??_turnLeft+1)^0,c
  1961  000AAE  0E1E               	movlw	30
  1962  000AB0  6E23               	movwf	??_turnLeft^0,c
  1963  000AB2  0EE4               	movlw	228
  1964  000AB4                     u3207:
  1965  000AB4  2EE8               	decfsz	wreg,f,c
  1966  000AB6  D7FE               	bra	u3207
  1967  000AB8  2E23               	decfsz	??_turnLeft^0,f,c
  1968  000ABA  D7FC               	bra	u3207
  1969  000ABC  2E24               	decfsz	(??_turnLeft+1)^0,f,c
  1970  000ABE  D7FA               	bra	u3207
  1971  000AC0  D000               	nop2	
  1972  000AC2                     l215:
  1973                           
  1974                           ;dc_motor.c: 224:         while(((mL->power)<50) || ((mR->power)<50)){
  1975  000AC2  C01E  FFD9         	movff	turnLeft@mL,fsr2l
  1976  000AC6  C01F  FFDA         	movff	turnLeft@mL+1,fsr2h
  1977  000ACA  0E31               	movlw	49
  1978  000ACC  64DF               	cpfsgt	indf2,c
  1979  000ACE  EF6B  F005         	goto	u2491
  1980  000AD2  EF6D  F005         	goto	u2490
  1981  000AD6                     u2491:
  1982  000AD6  EF18  F005         	goto	l2718
  1983  000ADA                     u2490:
  1984  000ADA  C020  FFD9         	movff	turnLeft@mR,fsr2l
  1985  000ADE  C021  FFDA         	movff	turnLeft@mR+1,fsr2h
  1986  000AE2  0E31               	movlw	49
  1987  000AE4  64DF               	cpfsgt	indf2,c
  1988  000AE6  EF77  F005         	goto	u2501
  1989  000AEA  EF79  F005         	goto	u2500
  1990  000AEE                     u2501:
  1991  000AEE  EF18  F005         	goto	l2718
  1992  000AF2                     u2500:
  1993  000AF2                     
  1994                           ;dc_motor.c: 238:         LATHbits.LATH0 = 0;
  1995  000AF2  9080               	bcf	128,0,c	;volatile
  1996  000AF4                     l220:
  1997  000AF4  0012               	return		;funcret
  1998  000AF6                     __end_of_turnLeft:
  1999                           	callstack 0
  2000                           
  2001 ;; *************** function _stop *****************
  2002 ;; Defined at:
  2003 ;;		line 172 in file "dc_motor.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  mL              2   29[COMRAM] PTR struct .
  2006 ;;		 -> main@motorL(9), 
  2007 ;;  mR              2   31[COMRAM] PTR struct .
  2008 ;;		 -> main@motorR(9), 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;		None
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      void 
  2013 ;; Registers used:
  2014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2020 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2022 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2023 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2024 ;;Total ram usage:        6 bytes
  2025 ;; Hardware stack levels used: 1
  2026 ;; Hardware stack levels required when called: 7
  2027 ;; This function calls:
  2028 ;;		_setMotorPWM
  2029 ;; This function is called by:
  2030 ;;		_read_card_RGB
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text4
  2035  00111C                     __ptext4:
  2036                           	callstack 0
  2037  00111C                     _stop:
  2038                           	callstack 22
  2039  00111C                     
  2040                           ;dc_motor.c: 172: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 173: {;dc_motor.c: 1
      +                          74:     LATDbits.LATD4 = 1;
  2041  00111C  887C               	bsf	124,4,c	;volatile
  2042                           
  2043                           ;dc_motor.c: 177:     while(((mL->power)>0) && ((mR->power)>0)){
  2044  00111E  EFC1  F008         	goto	l2690
  2045  001122                     l2682:
  2046                           
  2047                           ;dc_motor.c: 178:         mL->power = mL->power - 1;
  2048  001122  C01E  FFD9         	movff	stop@mL,fsr2l
  2049  001126  C01F  FFDA         	movff	stop@mL+1,fsr2h
  2050  00112A  50DF               	movf	indf2,w,c
  2051  00112C  6E22               	movwf	??_stop^0,c
  2052  00112E  0422               	decf	??_stop^0,w,c
  2053  001130  C01E  FFD9         	movff	stop@mL,fsr2l
  2054  001134  C01F  FFDA         	movff	stop@mL+1,fsr2h
  2055  001138  6EDF               	movwf	indf2,c
  2056                           
  2057                           ;dc_motor.c: 179:         mR->power = mR->power - 1;
  2058  00113A  C020  FFD9         	movff	stop@mR,fsr2l
  2059  00113E  C021  FFDA         	movff	stop@mR+1,fsr2h
  2060  001142  50DF               	movf	indf2,w,c
  2061  001144  6E22               	movwf	??_stop^0,c
  2062  001146  0422               	decf	??_stop^0,w,c
  2063  001148  C020  FFD9         	movff	stop@mR,fsr2l
  2064  00114C  C021  FFDA         	movff	stop@mR+1,fsr2h
  2065  001150  6EDF               	movwf	indf2,c
  2066  001152                     
  2067                           ;dc_motor.c: 182:         setMotorPWM(mL);
  2068  001152  C01E  F013         	movff	stop@mL,setMotorPWM@m
  2069  001156  C01F  F014         	movff	stop@mL+1,setMotorPWM@m+1
  2070  00115A  EC7B  F005         	call	_setMotorPWM	;wreg free
  2071  00115E                     
  2072                           ;dc_motor.c: 183:         setMotorPWM(mR);
  2073  00115E  C020  F013         	movff	stop@mR,setMotorPWM@m
  2074  001162  C021  F014         	movff	stop@mR+1,setMotorPWM@m+1
  2075  001166  EC7B  F005         	call	_setMotorPWM	;wreg free
  2076  00116A                     
  2077                           ;dc_motor.c: 184:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2078  00116A  0E09               	movlw	9
  2079  00116C  6E23               	movwf	(??_stop+1)^0,c
  2080  00116E  0E1E               	movlw	30
  2081  001170  6E22               	movwf	??_stop^0,c
  2082  001172  0EE4               	movlw	228
  2083  001174                     u3217:
  2084  001174  2EE8               	decfsz	wreg,f,c
  2085  001176  D7FE               	bra	u3217
  2086  001178  2E22               	decfsz	??_stop^0,f,c
  2087  00117A  D7FC               	bra	u3217
  2088  00117C  2E23               	decfsz	(??_stop+1)^0,f,c
  2089  00117E  D7FA               	bra	u3217
  2090  001180  D000               	nop2	
  2091  001182                     l2690:
  2092                           
  2093                           ;dc_motor.c: 177:     while(((mL->power)>0) && ((mR->power)>0)){
  2094  001182  C01E  FFD9         	movff	stop@mL,fsr2l
  2095  001186  C01F  FFDA         	movff	stop@mL+1,fsr2h
  2096  00118A  50DF               	movf	indf2,w,c
  2097  00118C  B4D8               	btfsc	status,2,c
  2098  00118E  EFCB  F008         	goto	u2361
  2099  001192  EFCD  F008         	goto	u2360
  2100  001196                     u2361:
  2101  001196  EFD9  F008         	goto	l204
  2102  00119A                     u2360:
  2103  00119A  C020  FFD9         	movff	stop@mR,fsr2l
  2104  00119E  C021  FFDA         	movff	stop@mR+1,fsr2h
  2105  0011A2  50DF               	movf	indf2,w,c
  2106  0011A4  A4D8               	btfss	status,2,c
  2107  0011A6  EFD7  F008         	goto	u2371
  2108  0011AA  EFD9  F008         	goto	u2370
  2109  0011AE                     u2371:
  2110  0011AE  EF91  F008         	goto	l2682
  2111  0011B2                     u2370:
  2112  0011B2                     l204:
  2113                           
  2114                           ;dc_motor.c: 187:     LATDbits.LATD4 = 0;
  2115  0011B2  987C               	bcf	124,4,c	;volatile
  2116  0011B4  0012               	return		;funcret
  2117  0011B6                     __end_of_stop:
  2118                           	callstack 0
  2119                           
  2120 ;; *************** function _reverse *****************
  2121 ;; Defined at:
  2122 ;;		line 151 in file "dc_motor.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  mL              2   29[COMRAM] PTR struct .
  2125 ;;		 -> main@motorL(9), 
  2126 ;;  mR              2   31[COMRAM] PTR struct .
  2127 ;;		 -> main@motorR(9), 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;		None
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1    wreg      void 
  2132 ;; Registers used:
  2133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2141 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2142 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2143 ;;Total ram usage:        6 bytes
  2144 ;; Hardware stack levels used: 1
  2145 ;; Hardware stack levels required when called: 7
  2146 ;; This function calls:
  2147 ;;		_setMotorPWM
  2148 ;; This function is called by:
  2149 ;;		_read_card_RGB
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text5
  2154  0011B6                     __ptext5:
  2155                           	callstack 0
  2156  0011B6                     _reverse:
  2157                           	callstack 22
  2158  0011B6                     
  2159                           ;dc_motor.c: 151: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 152: {;dc_motor.c
      +                          : 154:     mL->direction = 0;
  2160  0011B6  EE20 F001          	lfsr	2,1
  2161  0011BA  501E               	movf	reverse@mL^0,w,c
  2162  0011BC  26D9               	addwf	fsr2l,f,c
  2163  0011BE  501F               	movf	(reverse@mL+1)^0,w,c
  2164  0011C0  22DA               	addwfc	fsr2h,f,c
  2165  0011C2  0E00               	movlw	0
  2166  0011C4  6EDF               	movwf	indf2,c
  2167                           
  2168                           ;dc_motor.c: 155:     mR->direction = 0;
  2169  0011C6  EE20 F001          	lfsr	2,1
  2170  0011CA  5020               	movf	reverse@mR^0,w,c
  2171  0011CC  26D9               	addwf	fsr2l,f,c
  2172  0011CE  5021               	movf	(reverse@mR+1)^0,w,c
  2173  0011D0  22DA               	addwfc	fsr2h,f,c
  2174  0011D2  0E00               	movlw	0
  2175  0011D4  6EDF               	movwf	indf2,c
  2176                           
  2177                           ;dc_motor.c: 158:     while(((mL->power)<100) && ((mR->power)<100)){
  2178  0011D6  EF0F  F009         	goto	l192
  2179  0011DA                     l2670:
  2180                           
  2181                           ;dc_motor.c: 159:         mL->power+=1;
  2182  0011DA  C01E  FFD9         	movff	reverse@mL,fsr2l
  2183  0011DE  C01F  FFDA         	movff	reverse@mL+1,fsr2h
  2184  0011E2  2ADF               	incf	indf2,f,c
  2185                           
  2186                           ;dc_motor.c: 160:         mR->power+=1;
  2187  0011E4  C020  FFD9         	movff	reverse@mR,fsr2l
  2188  0011E8  C021  FFDA         	movff	reverse@mR+1,fsr2h
  2189  0011EC  2ADF               	incf	indf2,f,c
  2190  0011EE                     
  2191                           ;dc_motor.c: 162:         setMotorPWM(mL);
  2192  0011EE  C01E  F013         	movff	reverse@mL,setMotorPWM@m
  2193  0011F2  C01F  F014         	movff	reverse@mL+1,setMotorPWM@m+1
  2194  0011F6  EC7B  F005         	call	_setMotorPWM	;wreg free
  2195  0011FA                     
  2196                           ;dc_motor.c: 163:         setMotorPWM(mR);
  2197  0011FA  C020  F013         	movff	reverse@mR,setMotorPWM@m
  2198  0011FE  C021  F014         	movff	reverse@mR+1,setMotorPWM@m+1
  2199  001202  EC7B  F005         	call	_setMotorPWM	;wreg free
  2200  001206                     
  2201                           ;dc_motor.c: 164:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2202  001206  0E09               	movlw	9
  2203  001208  6E23               	movwf	(??_reverse+1)^0,c
  2204  00120A  0E1E               	movlw	30
  2205  00120C  6E22               	movwf	??_reverse^0,c
  2206  00120E  0EE4               	movlw	228
  2207  001210                     u3227:
  2208  001210  2EE8               	decfsz	wreg,f,c
  2209  001212  D7FE               	bra	u3227
  2210  001214  2E22               	decfsz	??_reverse^0,f,c
  2211  001216  D7FC               	bra	u3227
  2212  001218  2E23               	decfsz	(??_reverse+1)^0,f,c
  2213  00121A  D7FA               	bra	u3227
  2214  00121C  D000               	nop2	
  2215  00121E                     l192:
  2216                           
  2217                           ;dc_motor.c: 158:     while(((mL->power)<100) && ((mR->power)<100)){
  2218  00121E  C01E  FFD9         	movff	reverse@mL,fsr2l
  2219  001222  C01F  FFDA         	movff	reverse@mL+1,fsr2h
  2220  001226  0E64               	movlw	100
  2221  001228  60DF               	cpfslt	indf2,c
  2222  00122A  EF19  F009         	goto	u2341
  2223  00122E  EF1B  F009         	goto	u2340
  2224  001232                     u2341:
  2225  001232  EF27  F009         	goto	l197
  2226  001236                     u2340:
  2227  001236  C020  FFD9         	movff	reverse@mR,fsr2l
  2228  00123A  C021  FFDA         	movff	reverse@mR+1,fsr2h
  2229  00123E  0E63               	movlw	99
  2230  001240  64DF               	cpfsgt	indf2,c
  2231  001242  EF25  F009         	goto	u2351
  2232  001246  EF27  F009         	goto	u2350
  2233  00124A                     u2351:
  2234  00124A  EFED  F008         	goto	l2670
  2235  00124E                     u2350:
  2236  00124E                     l197:
  2237  00124E  0012               	return		;funcret
  2238  001250                     __end_of_reverse:
  2239                           	callstack 0
  2240                           
  2241 ;; *************** function _setMotorPWM *****************
  2242 ;; Defined at:
  2243 ;;		line 52 in file "dc_motor.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;  m               2   18[COMRAM] PTR struct .
  2246 ;;		 -> main@motorR(9), main@motorL(9), 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  PWMduty         2   27[COMRAM] int 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2260 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2261 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2262 ;;Total ram usage:       11 bytes
  2263 ;; Hardware stack levels used: 1
  2264 ;; Hardware stack levels required when called: 6
  2265 ;; This function calls:
  2266 ;;		___awdiv
  2267 ;;		___wmul
  2268 ;; This function is called by:
  2269 ;;		_reverse
  2270 ;;		_stop
  2271 ;;		_turnLeft
  2272 ;;		_turnRight
  2273 ;;		_forward
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text6
  2278  000AF6                     __ptext6:
  2279                           	callstack 0
  2280  000AF6                     _setMotorPWM:
  2281                           	callstack 22
  2282  000AF6                     
  2283                           ;dc_motor.c: 52: void setMotorPWM(DC_motor *m);dc_motor.c: 53: {;dc_motor.c: 54:  int PW
      +                          Mduty;;dc_motor.c: 56:  if (m->direction){
  2284  000AF6  EE20 F001          	lfsr	2,1
  2285  000AFA  5013               	movf	setMotorPWM@m^0,w,c
  2286  000AFC  26D9               	addwf	fsr2l,f,c
  2287  000AFE  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2288  000B00  22DA               	addwfc	fsr2h,f,c
  2289  000B02  50DF               	movf	indf2,w,c
  2290  000B04  B4D8               	btfsc	status,2,c
  2291  000B06  EF87  F005         	goto	u2301
  2292  000B0A  EF89  F005         	goto	u2300
  2293  000B0E                     u2301:
  2294  000B0E  EFBA  F005         	goto	l2640
  2295  000B12                     u2300:
  2296  000B12                     
  2297                           ;dc_motor.c: 57:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  2298  000B12  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  2299  000B16  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2300  000B1A  50DF               	movf	indf2,w,c
  2301  000B1C  6E15               	movwf	??_setMotorPWM^0,c
  2302  000B1E  5015               	movf	??_setMotorPWM^0,w,c
  2303  000B20  6E05               	movwf	___wmul@multiplier^0,c
  2304  000B22  6A06               	clrf	(___wmul@multiplier+1)^0,c
  2305  000B24  EE20 F007          	lfsr	2,7
  2306  000B28  5013               	movf	setMotorPWM@m^0,w,c
  2307  000B2A  26D9               	addwf	fsr2l,f,c
  2308  000B2C  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2309  000B2E  22DA               	addwfc	fsr2h,f,c
  2310  000B30  CFDE F007          	movff	postinc2,___wmul@multiplicand
  2311  000B34  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  2312  000B38  ECEB  F00A         	call	___wmul	;wreg free
  2313  000B3C  C005  F00B         	movff	?___wmul,___awdiv@dividend
  2314  000B40  C006  F00C         	movff	?___wmul+1,___awdiv@dividend+1
  2315  000B44  0E00               	movlw	0
  2316  000B46  6E0E               	movwf	(___awdiv@divisor+1)^0,c
  2317  000B48  0E64               	movlw	100
  2318  000B4A  6E0D               	movwf	___awdiv@divisor^0,c
  2319  000B4C  EC2C  F008         	call	___awdiv	;wreg free
  2320  000B50  EE20 F007          	lfsr	2,7
  2321  000B54  5013               	movf	setMotorPWM@m^0,w,c
  2322  000B56  26D9               	addwf	fsr2l,f,c
  2323  000B58  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2324  000B5A  22DA               	addwfc	fsr2h,f,c
  2325  000B5C  CFDE F016          	movff	postinc2,??_setMotorPWM+1
  2326  000B60  CFDD F017          	movff	postdec2,??_setMotorPWM+2
  2327  000B64  500B               	movf	?___awdiv^0,w,c
  2328  000B66  5C16               	subwf	(??_setMotorPWM+1)^0,w,c
  2329  000B68  6E1C               	movwf	setMotorPWM@PWMduty^0,c
  2330  000B6A  500C               	movf	(?___awdiv+1)^0,w,c
  2331  000B6C  5817               	subwfb	(??_setMotorPWM+2)^0,w,c
  2332  000B6E  6E1D               	movwf	(setMotorPWM@PWMduty+1)^0,c
  2333                           
  2334                           ;dc_motor.c: 58:  } else {
  2335  000B70  EFDD  F005         	goto	l2642
  2336  000B74                     l2640:
  2337                           
  2338                           ;dc_motor.c: 59:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  2339  000B74  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  2340  000B78  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2341  000B7C  50DF               	movf	indf2,w,c
  2342  000B7E  6E15               	movwf	??_setMotorPWM^0,c
  2343  000B80  5015               	movf	??_setMotorPWM^0,w,c
  2344  000B82  6E05               	movwf	___wmul@multiplier^0,c
  2345  000B84  6A06               	clrf	(___wmul@multiplier+1)^0,c
  2346  000B86  EE20 F007          	lfsr	2,7
  2347  000B8A  5013               	movf	setMotorPWM@m^0,w,c
  2348  000B8C  26D9               	addwf	fsr2l,f,c
  2349  000B8E  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2350  000B90  22DA               	addwfc	fsr2h,f,c
  2351  000B92  CFDE F007          	movff	postinc2,___wmul@multiplicand
  2352  000B96  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  2353  000B9A  ECEB  F00A         	call	___wmul	;wreg free
  2354  000B9E  C005  F00B         	movff	?___wmul,___awdiv@dividend
  2355  000BA2  C006  F00C         	movff	?___wmul+1,___awdiv@dividend+1
  2356  000BA6  0E00               	movlw	0
  2357  000BA8  6E0E               	movwf	(___awdiv@divisor+1)^0,c
  2358  000BAA  0E64               	movlw	100
  2359  000BAC  6E0D               	movwf	___awdiv@divisor^0,c
  2360  000BAE  EC2C  F008         	call	___awdiv	;wreg free
  2361  000BB2  C00B  F01C         	movff	?___awdiv,setMotorPWM@PWMduty
  2362  000BB6  C00C  F01D         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2363  000BBA                     l2642:
  2364                           
  2365                           ;dc_motor.c: 62:  *(m->dutyHighByte) = (unsigned char)(PWMduty);
  2366  000BBA  EE20 F002          	lfsr	2,2
  2367  000BBE  5013               	movf	setMotorPWM@m^0,w,c
  2368  000BC0  26D9               	addwf	fsr2l,f,c
  2369  000BC2  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2370  000BC4  22DA               	addwfc	fsr2h,f,c
  2371  000BC6  CFDE F015          	movff	postinc2,??_setMotorPWM
  2372  000BCA  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2373  000BCE  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2374  000BD2  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2375  000BD6  C01C  FFDF         	movff	setMotorPWM@PWMduty,indf2
  2376  000BDA                     
  2377                           ;dc_motor.c: 64:  if (m->direction){
  2378  000BDA  EE20 F001          	lfsr	2,1
  2379  000BDE  5013               	movf	setMotorPWM@m^0,w,c
  2380  000BE0  26D9               	addwf	fsr2l,f,c
  2381  000BE2  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2382  000BE4  22DA               	addwfc	fsr2h,f,c
  2383  000BE6  50DF               	movf	indf2,w,c
  2384  000BE8  B4D8               	btfsc	status,2,c
  2385  000BEA  EFF9  F005         	goto	u2311
  2386  000BEE  EFFB  F005         	goto	u2310
  2387  000BF2                     u2311:
  2388  000BF2  EF30  F006         	goto	l2648
  2389  000BF6                     u2310:
  2390  000BF6                     
  2391                           ;dc_motor.c: 65:   *(m->dir_LAT) = (unsigned char)(*(m->dir_LAT) | (1<<(m->dir_pin)));
  2392  000BF6  EE20 F004          	lfsr	2,4
  2393  000BFA  5013               	movf	setMotorPWM@m^0,w,c
  2394  000BFC  26D9               	addwf	fsr2l,f,c
  2395  000BFE  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2396  000C00  22DA               	addwfc	fsr2h,f,c
  2397  000C02  CFDE F015          	movff	postinc2,??_setMotorPWM
  2398  000C06  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2399  000C0A  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2400  000C0E  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2401  000C12  EE10 F004          	lfsr	1,4
  2402  000C16  5013               	movf	setMotorPWM@m^0,w,c
  2403  000C18  26E1               	addwf	fsr1l,f,c
  2404  000C1A  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2405  000C1C  22E2               	addwfc	fsr1h,f,c
  2406  000C1E  CFE6 F017          	movff	postinc1,??_setMotorPWM+2
  2407  000C22  CFE5 F018          	movff	postdec1,??_setMotorPWM+3
  2408  000C26  C017  FFE1         	movff	??_setMotorPWM+2,fsr1l
  2409  000C2A  C018  FFE2         	movff	??_setMotorPWM+3,fsr1h
  2410  000C2E  50E7               	movf	indf1,w,c
  2411  000C30  6E19               	movwf	(??_setMotorPWM+4)^0,c
  2412  000C32  EE10 F006          	lfsr	1,6
  2413  000C36  5013               	movf	setMotorPWM@m^0,w,c
  2414  000C38  26E1               	addwf	fsr1l,f,c
  2415  000C3A  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2416  000C3C  22E2               	addwfc	fsr1h,f,c
  2417  000C3E  50E7               	movf	indf1,w,c
  2418  000C40  6E1A               	movwf	(??_setMotorPWM+5)^0,c
  2419  000C42  0E01               	movlw	1
  2420  000C44  6E1B               	movwf	(??_setMotorPWM+6)^0,c
  2421  000C46  2A1A               	incf	(??_setMotorPWM+5)^0,f,c
  2422  000C48  EF28  F006         	goto	u2324
  2423  000C4C                     u2325:
  2424  000C4C  90D8               	bcf	status,0,c
  2425  000C4E  361B               	rlcf	(??_setMotorPWM+6)^0,f,c
  2426  000C50                     u2324:
  2427  000C50  2E1A               	decfsz	(??_setMotorPWM+5)^0,f,c
  2428  000C52  EF26  F006         	goto	u2325
  2429  000C56  501B               	movf	(??_setMotorPWM+6)^0,w,c
  2430  000C58  1019               	iorwf	(??_setMotorPWM+4)^0,w,c
  2431  000C5A  6EDF               	movwf	indf2,c
  2432                           
  2433                           ;dc_motor.c: 66:  } else {
  2434  000C5C  EF64  F006         	goto	l169
  2435  000C60                     l2648:
  2436                           
  2437                           ;dc_motor.c: 67:   *(m->dir_LAT) = (unsigned char)(*(m->dir_LAT) & (~(1<<(m->dir_pin))))
      +                          ;
  2438  000C60  EE20 F004          	lfsr	2,4
  2439  000C64  5013               	movf	setMotorPWM@m^0,w,c
  2440  000C66  26D9               	addwf	fsr2l,f,c
  2441  000C68  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2442  000C6A  22DA               	addwfc	fsr2h,f,c
  2443  000C6C  CFDE F015          	movff	postinc2,??_setMotorPWM
  2444  000C70  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2445  000C74  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2446  000C78  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2447  000C7C  EE10 F004          	lfsr	1,4
  2448  000C80  5013               	movf	setMotorPWM@m^0,w,c
  2449  000C82  26E1               	addwf	fsr1l,f,c
  2450  000C84  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2451  000C86  22E2               	addwfc	fsr1h,f,c
  2452  000C88  CFE6 F017          	movff	postinc1,??_setMotorPWM+2
  2453  000C8C  CFE5 F018          	movff	postdec1,??_setMotorPWM+3
  2454  000C90  C017  FFE1         	movff	??_setMotorPWM+2,fsr1l
  2455  000C94  C018  FFE2         	movff	??_setMotorPWM+3,fsr1h
  2456  000C98  50E7               	movf	indf1,w,c
  2457  000C9A  6E19               	movwf	(??_setMotorPWM+4)^0,c
  2458  000C9C  EE10 F006          	lfsr	1,6
  2459  000CA0  5013               	movf	setMotorPWM@m^0,w,c
  2460  000CA2  26E1               	addwf	fsr1l,f,c
  2461  000CA4  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2462  000CA6  22E2               	addwfc	fsr1h,f,c
  2463  000CA8  50E7               	movf	indf1,w,c
  2464  000CAA  6E1A               	movwf	(??_setMotorPWM+5)^0,c
  2465  000CAC  0E01               	movlw	1
  2466  000CAE  6E1B               	movwf	(??_setMotorPWM+6)^0,c
  2467  000CB0  2A1A               	incf	(??_setMotorPWM+5)^0,f,c
  2468  000CB2  EF5D  F006         	goto	u2334
  2469  000CB6                     u2335:
  2470  000CB6  90D8               	bcf	status,0,c
  2471  000CB8  361B               	rlcf	(??_setMotorPWM+6)^0,f,c
  2472  000CBA                     u2334:
  2473  000CBA  2E1A               	decfsz	(??_setMotorPWM+5)^0,f,c
  2474  000CBC  EF5B  F006         	goto	u2335
  2475  000CC0  501B               	movf	(??_setMotorPWM+6)^0,w,c
  2476  000CC2  0AFF               	xorlw	255
  2477  000CC4  1419               	andwf	(??_setMotorPWM+4)^0,w,c
  2478  000CC6  6EDF               	movwf	indf2,c
  2479  000CC8                     l169:
  2480  000CC8  0012               	return		;funcret
  2481  000CCA                     __end_of_setMotorPWM:
  2482                           	callstack 0
  2483                           
  2484 ;; *************** function ___wmul *****************
  2485 ;; Defined at:
  2486 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  multiplier      2    4[COMRAM] unsigned int 
  2489 ;;  multiplicand    2    6[COMRAM] unsigned int 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  product         2    8[COMRAM] unsigned int 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  2    4[COMRAM] unsigned int 
  2494 ;; Registers used:
  2495 ;;		wreg, status,2, status,0, prodl, prodh
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2504 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2505 ;;Total ram usage:        6 bytes
  2506 ;; Hardware stack levels used: 1
  2507 ;; Hardware stack levels required when called: 5
  2508 ;; This function calls:
  2509 ;;		Nothing
  2510 ;; This function is called by:
  2511 ;;		_setMotorPWM
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           	psect	text7
  2516  0015D6                     __ptext7:
  2517                           	callstack 0
  2518  0015D6                     ___wmul:
  2519                           	callstack 22
  2520  0015D6  5005               	movf	___wmul@multiplier^0,w,c
  2521  0015D8  0207               	mulwf	___wmul@multiplicand^0,c
  2522  0015DA  CFF3 F009          	movff	prodl,___wmul@product
  2523  0015DE  CFF4 F00A          	movff	prodh,___wmul@product+1
  2524  0015E2  5005               	movf	___wmul@multiplier^0,w,c
  2525  0015E4  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  2526  0015E6  50F3               	movf	243,w,c
  2527  0015E8  260A               	addwf	(___wmul@product+1)^0,f,c
  2528  0015EA  5006               	movf	(___wmul@multiplier+1)^0,w,c
  2529  0015EC  0207               	mulwf	___wmul@multiplicand^0,c
  2530  0015EE  50F3               	movf	243,w,c
  2531  0015F0  260A               	addwf	(___wmul@product+1)^0,f,c
  2532  0015F2  C009  F005         	movff	___wmul@product,?___wmul
  2533  0015F6  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  2534  0015FA  0012               	return		;funcret
  2535  0015FC                     __end_of___wmul:
  2536                           	callstack 0
  2537                           
  2538 ;; *************** function ___awdiv *****************
  2539 ;; Defined at:
  2540 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  dividend        2   10[COMRAM] int 
  2543 ;;  divisor         2   12[COMRAM] int 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  quotient        2   16[COMRAM] int 
  2546 ;;  sign            1   15[COMRAM] unsigned char 
  2547 ;;  counter         1   14[COMRAM] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  2   10[COMRAM] int 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2558 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;Total ram usage:        8 bytes
  2562 ;; Hardware stack levels used: 1
  2563 ;; Hardware stack levels required when called: 5
  2564 ;; This function calls:
  2565 ;;		Nothing
  2566 ;; This function is called by:
  2567 ;;		_setMotorPWM
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text8
  2572  001058                     __ptext8:
  2573                           	callstack 0
  2574  001058                     ___awdiv:
  2575                           	callstack 22
  2576  001058  0E00               	movlw	0
  2577  00105A  6E10               	movwf	___awdiv@sign^0,c
  2578  00105C  BE0E               	btfsc	(___awdiv@divisor+1)^0,7,c
  2579  00105E  EF35  F008         	goto	u2220
  2580  001062  EF33  F008         	goto	u2221
  2581  001066                     u2221:
  2582  001066  EF3B  F008         	goto	l2570
  2583  00106A                     u2220:
  2584  00106A  6C0D               	negf	___awdiv@divisor^0,c
  2585  00106C  1E0E               	comf	(___awdiv@divisor+1)^0,f,c
  2586  00106E  B0D8               	btfsc	status,0,c
  2587  001070  2A0E               	incf	(___awdiv@divisor+1)^0,f,c
  2588  001072  0E01               	movlw	1
  2589  001074  6E10               	movwf	___awdiv@sign^0,c
  2590  001076                     l2570:
  2591  001076  BE0C               	btfsc	(___awdiv@dividend+1)^0,7,c
  2592  001078  EF42  F008         	goto	u2230
  2593  00107C  EF40  F008         	goto	u2231
  2594  001080                     u2231:
  2595  001080  EF48  F008         	goto	l2576
  2596  001084                     u2230:
  2597  001084  6C0B               	negf	___awdiv@dividend^0,c
  2598  001086  1E0C               	comf	(___awdiv@dividend+1)^0,f,c
  2599  001088  B0D8               	btfsc	status,0,c
  2600  00108A  2A0C               	incf	(___awdiv@dividend+1)^0,f,c
  2601  00108C  0E01               	movlw	1
  2602  00108E  1A10               	xorwf	___awdiv@sign^0,f,c
  2603  001090                     l2576:
  2604  001090  0E00               	movlw	0
  2605  001092  6E12               	movwf	(___awdiv@quotient+1)^0,c
  2606  001094  0E00               	movlw	0
  2607  001096  6E11               	movwf	___awdiv@quotient^0,c
  2608  001098  500D               	movf	___awdiv@divisor^0,w,c
  2609  00109A  100E               	iorwf	(___awdiv@divisor+1)^0,w,c
  2610  00109C  B4D8               	btfsc	status,2,c
  2611  00109E  EF53  F008         	goto	u2241
  2612  0010A2  EF55  F008         	goto	u2240
  2613  0010A6                     u2241:
  2614  0010A6  EF7D  F008         	goto	l2598
  2615  0010AA                     u2240:
  2616  0010AA  0E01               	movlw	1
  2617  0010AC  6E0F               	movwf	___awdiv@counter^0,c
  2618  0010AE  EF5D  F008         	goto	l2584
  2619  0010B2                     l2582:
  2620  0010B2  90D8               	bcf	status,0,c
  2621  0010B4  360D               	rlcf	___awdiv@divisor^0,f,c
  2622  0010B6  360E               	rlcf	(___awdiv@divisor+1)^0,f,c
  2623  0010B8  2A0F               	incf	___awdiv@counter^0,f,c
  2624  0010BA                     l2584:
  2625  0010BA  AE0E               	btfss	(___awdiv@divisor+1)^0,7,c
  2626  0010BC  EF62  F008         	goto	u2251
  2627  0010C0  EF64  F008         	goto	u2250
  2628  0010C4                     u2251:
  2629  0010C4  EF59  F008         	goto	l2582
  2630  0010C8                     u2250:
  2631  0010C8                     l2586:
  2632  0010C8  90D8               	bcf	status,0,c
  2633  0010CA  3611               	rlcf	___awdiv@quotient^0,f,c
  2634  0010CC  3612               	rlcf	(___awdiv@quotient+1)^0,f,c
  2635  0010CE  500D               	movf	___awdiv@divisor^0,w,c
  2636  0010D0  5C0B               	subwf	___awdiv@dividend^0,w,c
  2637  0010D2  500E               	movf	(___awdiv@divisor+1)^0,w,c
  2638  0010D4  580C               	subwfb	(___awdiv@dividend+1)^0,w,c
  2639  0010D6  A0D8               	btfss	status,0,c
  2640  0010D8  EF70  F008         	goto	u2261
  2641  0010DC  EF72  F008         	goto	u2260
  2642  0010E0                     u2261:
  2643  0010E0  EF77  F008         	goto	l2594
  2644  0010E4                     u2260:
  2645  0010E4  500D               	movf	___awdiv@divisor^0,w,c
  2646  0010E6  5E0B               	subwf	___awdiv@dividend^0,f,c
  2647  0010E8  500E               	movf	(___awdiv@divisor+1)^0,w,c
  2648  0010EA  5A0C               	subwfb	(___awdiv@dividend+1)^0,f,c
  2649  0010EC  8011               	bsf	___awdiv@quotient^0,0,c
  2650  0010EE                     l2594:
  2651  0010EE  90D8               	bcf	status,0,c
  2652  0010F0  320E               	rrcf	(___awdiv@divisor+1)^0,f,c
  2653  0010F2  320D               	rrcf	___awdiv@divisor^0,f,c
  2654  0010F4  2E0F               	decfsz	___awdiv@counter^0,f,c
  2655  0010F6  EF64  F008         	goto	l2586
  2656  0010FA                     l2598:
  2657  0010FA  5010               	movf	___awdiv@sign^0,w,c
  2658  0010FC  B4D8               	btfsc	status,2,c
  2659  0010FE  EF83  F008         	goto	u2271
  2660  001102  EF85  F008         	goto	u2270
  2661  001106                     u2271:
  2662  001106  EF89  F008         	goto	l2602
  2663  00110A                     u2270:
  2664  00110A  6C11               	negf	___awdiv@quotient^0,c
  2665  00110C  1E12               	comf	(___awdiv@quotient+1)^0,f,c
  2666  00110E  B0D8               	btfsc	status,0,c
  2667  001110  2A12               	incf	(___awdiv@quotient+1)^0,f,c
  2668  001112                     l2602:
  2669  001112  C011  F00B         	movff	___awdiv@quotient,?___awdiv
  2670  001116  C012  F00C         	movff	___awdiv@quotient+1,?___awdiv+1
  2671  00111A  0012               	return		;funcret
  2672  00111C                     __end_of___awdiv:
  2673                           	callstack 0
  2674                           
  2675 ;; *************** function ___xxtofl *****************
  2676 ;; Defined at:
  2677 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  sign            1    wreg     unsigned char 
  2680 ;;  val             4   11[COMRAM] long 
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;  sign            1   19[COMRAM] unsigned char 
  2683 ;;  arg             4   21[COMRAM] unsigned long 
  2684 ;;  exp             1   20[COMRAM] unsigned char 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  4   11[COMRAM] unsigned char 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, status,0
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2694 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2695 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2696 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2697 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2698 ;;Total ram usage:       14 bytes
  2699 ;; Hardware stack levels used: 1
  2700 ;; Hardware stack levels required when called: 5
  2701 ;; This function calls:
  2702 ;;		Nothing
  2703 ;; This function is called by:
  2704 ;;		_read_card_RGB
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text9
  2709  000CCA                     __ptext9:
  2710                           	callstack 0
  2711  000CCA                     ___xxtofl:
  2712                           	callstack 24
  2713                           
  2714                           ;incstack = 0
  2715                           ;___xxtofl@sign stored from wreg
  2716  000CCA  6E14               	movwf	___xxtofl@sign^0,c
  2717  000CCC  5014               	movf	___xxtofl@sign^0,w,c
  2718  000CCE  B4D8               	btfsc	status,2,c
  2719  000CD0  EF6C  F006         	goto	u2751
  2720  000CD4  EF6E  F006         	goto	u2750
  2721  000CD8                     u2751:
  2722  000CD8  EF90  F006         	goto	l1142
  2723  000CDC                     u2750:
  2724  000CDC  BE0F               	btfsc	(___xxtofl@val+3)^0,7,c
  2725  000CDE  EF75  F006         	goto	u2760
  2726  000CE2  EF73  F006         	goto	u2761
  2727  000CE6                     u2761:
  2728  000CE6  EF90  F006         	goto	l1142
  2729  000CEA                     u2760:
  2730  000CEA  C00C  F010         	movff	___xxtofl@val,??___xxtofl
  2731  000CEE  C00D  F011         	movff	___xxtofl@val+1,??___xxtofl+1
  2732  000CF2  C00E  F012         	movff	___xxtofl@val+2,??___xxtofl+2
  2733  000CF6  C00F  F013         	movff	___xxtofl@val+3,??___xxtofl+3
  2734  000CFA  1E10               	comf	??___xxtofl^0,f,c
  2735  000CFC  1E11               	comf	(??___xxtofl+1)^0,f,c
  2736  000CFE  1E12               	comf	(??___xxtofl+2)^0,f,c
  2737  000D00  1E13               	comf	(??___xxtofl+3)^0,f,c
  2738  000D02  2A10               	incf	??___xxtofl^0,f,c
  2739  000D04  0E00               	movlw	0
  2740  000D06  2211               	addwfc	(??___xxtofl+1)^0,f,c
  2741  000D08  2212               	addwfc	(??___xxtofl+2)^0,f,c
  2742  000D0A  2213               	addwfc	(??___xxtofl+3)^0,f,c
  2743  000D0C  C010  F016         	movff	??___xxtofl,___xxtofl@arg
  2744  000D10  C011  F017         	movff	??___xxtofl+1,___xxtofl@arg+1
  2745  000D14  C012  F018         	movff	??___xxtofl+2,___xxtofl@arg+2
  2746  000D18  C013  F019         	movff	??___xxtofl+3,___xxtofl@arg+3
  2747  000D1C  EF98  F006         	goto	l2856
  2748  000D20                     l1142:
  2749  000D20  C00C  F016         	movff	___xxtofl@val,___xxtofl@arg
  2750  000D24  C00D  F017         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2751  000D28  C00E  F018         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2752  000D2C  C00F  F019         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2753  000D30                     l2856:
  2754  000D30  500C               	movf	___xxtofl@val^0,w,c
  2755  000D32  100D               	iorwf	(___xxtofl@val+1)^0,w,c
  2756  000D34  100E               	iorwf	(___xxtofl@val+2)^0,w,c
  2757  000D36  100F               	iorwf	(___xxtofl@val+3)^0,w,c
  2758  000D38  A4D8               	btfss	status,2,c
  2759  000D3A  EFA1  F006         	goto	u2771
  2760  000D3E  EFA3  F006         	goto	u2770
  2761  000D42                     u2771:
  2762  000D42  EFAD  F006         	goto	l2862
  2763  000D46                     u2770:
  2764  000D46  0E00               	movlw	0
  2765  000D48  6E0C               	movwf	?___xxtofl^0,c
  2766  000D4A  0E00               	movlw	0
  2767  000D4C  6E0D               	movwf	(?___xxtofl+1)^0,c
  2768  000D4E  0E00               	movlw	0
  2769  000D50  6E0E               	movwf	(?___xxtofl+2)^0,c
  2770  000D52  0E00               	movlw	0
  2771  000D54  6E0F               	movwf	(?___xxtofl+3)^0,c
  2772  000D56  EF3E  F007         	goto	l1145
  2773  000D5A                     l2862:
  2774  000D5A  0E96               	movlw	150
  2775  000D5C  6E15               	movwf	___xxtofl@exp^0,c
  2776  000D5E  EFB7  F006         	goto	l2866
  2777  000D62                     l2864:
  2778  000D62  2A15               	incf	___xxtofl@exp^0,f,c
  2779  000D64  90D8               	bcf	status,0,c
  2780  000D66  3219               	rrcf	(___xxtofl@arg+3)^0,f,c
  2781  000D68  3218               	rrcf	(___xxtofl@arg+2)^0,f,c
  2782  000D6A  3217               	rrcf	(___xxtofl@arg+1)^0,f,c
  2783  000D6C  3216               	rrcf	___xxtofl@arg^0,f,c
  2784  000D6E                     l2866:
  2785  000D6E  0E00               	movlw	0
  2786  000D70  1416               	andwf	___xxtofl@arg^0,w,c
  2787  000D72  6E10               	movwf	??___xxtofl^0,c
  2788  000D74  0E00               	movlw	0
  2789  000D76  1417               	andwf	(___xxtofl@arg+1)^0,w,c
  2790  000D78  6E11               	movwf	(??___xxtofl+1)^0,c
  2791  000D7A  0E00               	movlw	0
  2792  000D7C  1418               	andwf	(___xxtofl@arg+2)^0,w,c
  2793  000D7E  6E12               	movwf	(??___xxtofl+2)^0,c
  2794  000D80  0EFE               	movlw	254
  2795  000D82  1419               	andwf	(___xxtofl@arg+3)^0,w,c
  2796  000D84  6E13               	movwf	(??___xxtofl+3)^0,c
  2797  000D86  5010               	movf	??___xxtofl^0,w,c
  2798  000D88  1011               	iorwf	(??___xxtofl+1)^0,w,c
  2799  000D8A  1012               	iorwf	(??___xxtofl+2)^0,w,c
  2800  000D8C  1013               	iorwf	(??___xxtofl+3)^0,w,c
  2801  000D8E  A4D8               	btfss	status,2,c
  2802  000D90  EFCC  F006         	goto	u2781
  2803  000D94  EFCE  F006         	goto	u2780
  2804  000D98                     u2781:
  2805  000D98  EFB1  F006         	goto	l2864
  2806  000D9C                     u2780:
  2807  000D9C  EFDC  F006         	goto	l1149
  2808  000DA0                     l2868:
  2809  000DA0  2A15               	incf	___xxtofl@exp^0,f,c
  2810  000DA2  0E01               	movlw	1
  2811  000DA4  2616               	addwf	___xxtofl@arg^0,f,c
  2812  000DA6  0E00               	movlw	0
  2813  000DA8  2217               	addwfc	(___xxtofl@arg+1)^0,f,c
  2814  000DAA  2218               	addwfc	(___xxtofl@arg+2)^0,f,c
  2815  000DAC  2219               	addwfc	(___xxtofl@arg+3)^0,f,c
  2816  000DAE  90D8               	bcf	status,0,c
  2817  000DB0  3219               	rrcf	(___xxtofl@arg+3)^0,f,c
  2818  000DB2  3218               	rrcf	(___xxtofl@arg+2)^0,f,c
  2819  000DB4  3217               	rrcf	(___xxtofl@arg+1)^0,f,c
  2820  000DB6  3216               	rrcf	___xxtofl@arg^0,f,c
  2821  000DB8                     l1149:
  2822  000DB8  0E00               	movlw	0
  2823  000DBA  1416               	andwf	___xxtofl@arg^0,w,c
  2824  000DBC  6E10               	movwf	??___xxtofl^0,c
  2825  000DBE  0E00               	movlw	0
  2826  000DC0  1417               	andwf	(___xxtofl@arg+1)^0,w,c
  2827  000DC2  6E11               	movwf	(??___xxtofl+1)^0,c
  2828  000DC4  0E00               	movlw	0
  2829  000DC6  1418               	andwf	(___xxtofl@arg+2)^0,w,c
  2830  000DC8  6E12               	movwf	(??___xxtofl+2)^0,c
  2831  000DCA  0EFF               	movlw	255
  2832  000DCC  1419               	andwf	(___xxtofl@arg+3)^0,w,c
  2833  000DCE  6E13               	movwf	(??___xxtofl+3)^0,c
  2834  000DD0  5010               	movf	??___xxtofl^0,w,c
  2835  000DD2  1011               	iorwf	(??___xxtofl+1)^0,w,c
  2836  000DD4  1012               	iorwf	(??___xxtofl+2)^0,w,c
  2837  000DD6  1013               	iorwf	(??___xxtofl+3)^0,w,c
  2838  000DD8  A4D8               	btfss	status,2,c
  2839  000DDA  EFF1  F006         	goto	u2791
  2840  000DDE  EFF3  F006         	goto	u2790
  2841  000DE2                     u2791:
  2842  000DE2  EFD0  F006         	goto	l2868
  2843  000DE6                     u2790:
  2844  000DE6  EFFB  F006         	goto	l2876
  2845  000DEA                     l2874:
  2846  000DEA  0615               	decf	___xxtofl@exp^0,f,c
  2847  000DEC  90D8               	bcf	status,0,c
  2848  000DEE  3616               	rlcf	___xxtofl@arg^0,f,c
  2849  000DF0  3617               	rlcf	(___xxtofl@arg+1)^0,f,c
  2850  000DF2  3618               	rlcf	(___xxtofl@arg+2)^0,f,c
  2851  000DF4  3619               	rlcf	(___xxtofl@arg+3)^0,f,c
  2852  000DF6                     l2876:
  2853  000DF6  BE18               	btfsc	(___xxtofl@arg+2)^0,7,c
  2854  000DF8  EF00  F007         	goto	u2801
  2855  000DFC  EF02  F007         	goto	u2800
  2856  000E00                     u2801:
  2857  000E00  EF0A  F007         	goto	l1156
  2858  000E04                     u2800:
  2859  000E04  0E02               	movlw	2
  2860  000E06  6015               	cpfslt	___xxtofl@exp^0,c
  2861  000E08  EF08  F007         	goto	u2811
  2862  000E0C  EF0A  F007         	goto	u2810
  2863  000E10                     u2811:
  2864  000E10  EFF5  F006         	goto	l2874
  2865  000E14                     u2810:
  2866  000E14                     l1156:
  2867  000E14  B015               	btfsc	___xxtofl@exp^0,0,c
  2868  000E16  EF0F  F007         	goto	u2821
  2869  000E1A  EF11  F007         	goto	u2820
  2870  000E1E                     u2821:
  2871  000E1E  EF12  F007         	goto	l2882
  2872  000E22                     u2820:
  2873  000E22  9E18               	bcf	(___xxtofl@arg+2)^0,7,c
  2874  000E24                     l2882:
  2875  000E24  90D8               	bcf	status,0,c
  2876  000E26  3215               	rrcf	___xxtofl@exp^0,f,c
  2877  000E28  C015  F010         	movff	___xxtofl@exp,??___xxtofl
  2878  000E2C  6A11               	clrf	(??___xxtofl+1)^0,c
  2879  000E2E  6A12               	clrf	(??___xxtofl+2)^0,c
  2880  000E30  6A13               	clrf	(??___xxtofl+3)^0,c
  2881  000E32  C010  F013         	movff	??___xxtofl,??___xxtofl+3
  2882  000E36  6A12               	clrf	(??___xxtofl+2)^0,c
  2883  000E38  6A11               	clrf	(??___xxtofl+1)^0,c
  2884  000E3A  6A10               	clrf	??___xxtofl^0,c
  2885  000E3C  5010               	movf	??___xxtofl^0,w,c
  2886  000E3E  1216               	iorwf	___xxtofl@arg^0,f,c
  2887  000E40  5011               	movf	(??___xxtofl+1)^0,w,c
  2888  000E42  1217               	iorwf	(___xxtofl@arg+1)^0,f,c
  2889  000E44  5012               	movf	(??___xxtofl+2)^0,w,c
  2890  000E46  1218               	iorwf	(___xxtofl@arg+2)^0,f,c
  2891  000E48  5013               	movf	(??___xxtofl+3)^0,w,c
  2892  000E4A  1219               	iorwf	(___xxtofl@arg+3)^0,f,c
  2893  000E4C  5014               	movf	___xxtofl@sign^0,w,c
  2894  000E4E  B4D8               	btfsc	status,2,c
  2895  000E50  EF2C  F007         	goto	u2831
  2896  000E54  EF2E  F007         	goto	u2830
  2897  000E58                     u2831:
  2898  000E58  EF36  F007         	goto	l2892
  2899  000E5C                     u2830:
  2900  000E5C  BE0F               	btfsc	(___xxtofl@val+3)^0,7,c
  2901  000E5E  EF35  F007         	goto	u2840
  2902  000E62  EF33  F007         	goto	u2841
  2903  000E66                     u2841:
  2904  000E66  EF36  F007         	goto	l2892
  2905  000E6A                     u2840:
  2906  000E6A  8E19               	bsf	(___xxtofl@arg+3)^0,7,c
  2907  000E6C                     l2892:
  2908  000E6C  C016  F00C         	movff	___xxtofl@arg,?___xxtofl
  2909  000E70  C017  F00D         	movff	___xxtofl@arg+1,?___xxtofl+1
  2910  000E74  C018  F00E         	movff	___xxtofl@arg+2,?___xxtofl+2
  2911  000E78  C019  F00F         	movff	___xxtofl@arg+3,?___xxtofl+3
  2912  000E7C                     l1145:
  2913  000E7C  0012               	return		;funcret
  2914  000E7E                     __end_of___xxtofl:
  2915                           	callstack 0
  2916                           
  2917 ;; *************** function ___lwdiv *****************
  2918 ;; Defined at:
  2919 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  dividend        2    4[COMRAM] unsigned int 
  2922 ;;  divisor         2    6[COMRAM] unsigned int 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;  quotient        2    9[COMRAM] unsigned int 
  2925 ;;  counter         1    8[COMRAM] unsigned char 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  2    4[COMRAM] unsigned int 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2936 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2938 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2939 ;;Total ram usage:        7 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; Hardware stack levels required when called: 5
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_read_card_RGB
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           	psect	text10
  2950  001250                     __ptext10:
  2951                           	callstack 0
  2952  001250                     ___lwdiv:
  2953                           	callstack 24
  2954  001250  0E00               	movlw	0
  2955  001252  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
  2956  001254  0E00               	movlw	0
  2957  001256  6E0A               	movwf	___lwdiv@quotient^0,c
  2958  001258  5007               	movf	___lwdiv@divisor^0,w,c
  2959  00125A  1008               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2960  00125C  B4D8               	btfsc	status,2,c
  2961  00125E  EF33  F009         	goto	u2721
  2962  001262  EF35  F009         	goto	u2720
  2963  001266                     u2721:
  2964  001266  EF5D  F009         	goto	l978
  2965  00126A                     u2720:
  2966  00126A  0E01               	movlw	1
  2967  00126C  6E09               	movwf	___lwdiv@counter^0,c
  2968  00126E  EF3D  F009         	goto	l2836
  2969  001272                     l2834:
  2970  001272  90D8               	bcf	status,0,c
  2971  001274  3607               	rlcf	___lwdiv@divisor^0,f,c
  2972  001276  3608               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2973  001278  2A09               	incf	___lwdiv@counter^0,f,c
  2974  00127A                     l2836:
  2975  00127A  AE08               	btfss	(___lwdiv@divisor+1)^0,7,c
  2976  00127C  EF42  F009         	goto	u2731
  2977  001280  EF44  F009         	goto	u2730
  2978  001284                     u2731:
  2979  001284  EF39  F009         	goto	l2834
  2980  001288                     u2730:
  2981  001288                     l2838:
  2982  001288  90D8               	bcf	status,0,c
  2983  00128A  360A               	rlcf	___lwdiv@quotient^0,f,c
  2984  00128C  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2985  00128E  5007               	movf	___lwdiv@divisor^0,w,c
  2986  001290  5C05               	subwf	___lwdiv@dividend^0,w,c
  2987  001292  5008               	movf	(___lwdiv@divisor+1)^0,w,c
  2988  001294  5806               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2989  001296  A0D8               	btfss	status,0,c
  2990  001298  EF50  F009         	goto	u2741
  2991  00129C  EF52  F009         	goto	u2740
  2992  0012A0                     u2741:
  2993  0012A0  EF57  F009         	goto	l2846
  2994  0012A4                     u2740:
  2995  0012A4  5007               	movf	___lwdiv@divisor^0,w,c
  2996  0012A6  5E05               	subwf	___lwdiv@dividend^0,f,c
  2997  0012A8  5008               	movf	(___lwdiv@divisor+1)^0,w,c
  2998  0012AA  5A06               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2999  0012AC  800A               	bsf	___lwdiv@quotient^0,0,c
  3000  0012AE                     l2846:
  3001  0012AE  90D8               	bcf	status,0,c
  3002  0012B0  3208               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3003  0012B2  3207               	rrcf	___lwdiv@divisor^0,f,c
  3004  0012B4  2E09               	decfsz	___lwdiv@counter^0,f,c
  3005  0012B6  EF44  F009         	goto	l2838
  3006  0012BA                     l978:
  3007  0012BA  C00A  F005         	movff	___lwdiv@quotient,?___lwdiv
  3008  0012BE  C00B  F006         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3009  0012C2  0012               	return		;funcret
  3010  0012C4                     __end_of___lwdiv:
  3011                           	callstack 0
  3012                           
  3013 ;; *************** function ___flge *****************
  3014 ;; Defined at:
  3015 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\flge.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  ff1             4    4[COMRAM] unsigned int 
  3018 ;;  ff2             4    8[COMRAM] unsigned int 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;		None               void
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3030 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3032 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3033 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3034 ;;Total ram usage:       12 bytes
  3035 ;; Hardware stack levels used: 1
  3036 ;; Hardware stack levels required when called: 5
  3037 ;; This function calls:
  3038 ;;		Nothing
  3039 ;; This function is called by:
  3040 ;;		_read_card_RGB
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text11
  3045  000E7E                     __ptext11:
  3046                           	callstack 0
  3047  000E7E                     ___flge:
  3048                           	callstack 24
  3049  000E7E  0E00               	movlw	0
  3050  000E80  1405               	andwf	___flge@ff1^0,w,c
  3051  000E82  6E0D               	movwf	??___flge^0,c
  3052  000E84  0E00               	movlw	0
  3053  000E86  1406               	andwf	(___flge@ff1+1)^0,w,c
  3054  000E88  6E0E               	movwf	(??___flge+1)^0,c
  3055  000E8A  0E80               	movlw	128
  3056  000E8C  1407               	andwf	(___flge@ff1+2)^0,w,c
  3057  000E8E  6E0F               	movwf	(??___flge+2)^0,c
  3058  000E90  0E7F               	movlw	127
  3059  000E92  1408               	andwf	(___flge@ff1+3)^0,w,c
  3060  000E94  6E10               	movwf	(??___flge+3)^0,c
  3061  000E96  500D               	movf	??___flge^0,w,c
  3062  000E98  100E               	iorwf	(??___flge+1)^0,w,c
  3063  000E9A  100F               	iorwf	(??___flge+2)^0,w,c
  3064  000E9C  1010               	iorwf	(??___flge+3)^0,w,c
  3065  000E9E  A4D8               	btfss	status,2,c
  3066  000EA0  EF54  F007         	goto	u2671
  3067  000EA4  EF56  F007         	goto	u2670
  3068  000EA8                     u2671:
  3069  000EA8  EF5E  F007         	goto	l2810
  3070  000EAC                     u2670:
  3071  000EAC  0E00               	movlw	0
  3072  000EAE  6E05               	movwf	___flge@ff1^0,c
  3073  000EB0  0E00               	movlw	0
  3074  000EB2  6E06               	movwf	(___flge@ff1+1)^0,c
  3075  000EB4  0E00               	movlw	0
  3076  000EB6  6E07               	movwf	(___flge@ff1+2)^0,c
  3077  000EB8  0E00               	movlw	0
  3078  000EBA  6E08               	movwf	(___flge@ff1+3)^0,c
  3079  000EBC                     l2810:
  3080  000EBC  0E00               	movlw	0
  3081  000EBE  1409               	andwf	___flge@ff2^0,w,c
  3082  000EC0  6E0D               	movwf	??___flge^0,c
  3083  000EC2  0E00               	movlw	0
  3084  000EC4  140A               	andwf	(___flge@ff2+1)^0,w,c
  3085  000EC6  6E0E               	movwf	(??___flge+1)^0,c
  3086  000EC8  0E80               	movlw	128
  3087  000ECA  140B               	andwf	(___flge@ff2+2)^0,w,c
  3088  000ECC  6E0F               	movwf	(??___flge+2)^0,c
  3089  000ECE  0E7F               	movlw	127
  3090  000ED0  140C               	andwf	(___flge@ff2+3)^0,w,c
  3091  000ED2  6E10               	movwf	(??___flge+3)^0,c
  3092  000ED4  500D               	movf	??___flge^0,w,c
  3093  000ED6  100E               	iorwf	(??___flge+1)^0,w,c
  3094  000ED8  100F               	iorwf	(??___flge+2)^0,w,c
  3095  000EDA  1010               	iorwf	(??___flge+3)^0,w,c
  3096  000EDC  A4D8               	btfss	status,2,c
  3097  000EDE  EF73  F007         	goto	u2681
  3098  000EE2  EF75  F007         	goto	u2680
  3099  000EE6                     u2681:
  3100  000EE6  EF7D  F007         	goto	l2814
  3101  000EEA                     u2680:
  3102  000EEA  0E00               	movlw	0
  3103  000EEC  6E09               	movwf	___flge@ff2^0,c
  3104  000EEE  0E00               	movlw	0
  3105  000EF0  6E0A               	movwf	(___flge@ff2+1)^0,c
  3106  000EF2  0E00               	movlw	0
  3107  000EF4  6E0B               	movwf	(___flge@ff2+2)^0,c
  3108  000EF6  0E00               	movlw	0
  3109  000EF8  6E0C               	movwf	(___flge@ff2+3)^0,c
  3110  000EFA                     l2814:
  3111  000EFA  AE08               	btfss	(___flge@ff1+3)^0,7,c
  3112  000EFC  EF82  F007         	goto	u2691
  3113  000F00  EF84  F007         	goto	u2690
  3114  000F04                     u2691:
  3115  000F04  EF8D  F007         	goto	l2818
  3116  000F08                     u2690:
  3117  000F08  6C05               	negf	___flge@ff1^0,c
  3118  000F0A  1E06               	comf	(___flge@ff1+1)^0,f,c
  3119  000F0C  B0D8               	btfsc	status,0,c
  3120  000F0E  2A06               	incf	(___flge@ff1+1)^0,f,c
  3121  000F10  1E07               	comf	(___flge@ff1+2)^0,f,c
  3122  000F12  B0D8               	btfsc	status,0,c
  3123  000F14  2A07               	incf	(___flge@ff1+2)^0,f,c
  3124  000F16  0E80               	movlw	128
  3125  000F18  5608               	subfwb	(___flge@ff1+3)^0,f,c
  3126  000F1A                     l2818:
  3127  000F1A  AE0C               	btfss	(___flge@ff2+3)^0,7,c
  3128  000F1C  EF92  F007         	goto	u2701
  3129  000F20  EF94  F007         	goto	u2700
  3130  000F24                     u2701:
  3131  000F24  EF9D  F007         	goto	l752
  3132  000F28                     u2700:
  3133  000F28  6C09               	negf	___flge@ff2^0,c
  3134  000F2A  1E0A               	comf	(___flge@ff2+1)^0,f,c
  3135  000F2C  B0D8               	btfsc	status,0,c
  3136  000F2E  2A0A               	incf	(___flge@ff2+1)^0,f,c
  3137  000F30  1E0B               	comf	(___flge@ff2+2)^0,f,c
  3138  000F32  B0D8               	btfsc	status,0,c
  3139  000F34  2A0B               	incf	(___flge@ff2+2)^0,f,c
  3140  000F36  0E80               	movlw	128
  3141  000F38  560C               	subfwb	(___flge@ff2+3)^0,f,c
  3142  000F3A                     l752:
  3143  000F3A  0E00               	movlw	0
  3144  000F3C  1A05               	xorwf	___flge@ff1^0,f,c
  3145  000F3E  0E00               	movlw	0
  3146  000F40  1A06               	xorwf	(___flge@ff1+1)^0,f,c
  3147  000F42  0E00               	movlw	0
  3148  000F44  1A07               	xorwf	(___flge@ff1+2)^0,f,c
  3149  000F46  0E80               	movlw	128
  3150  000F48  1A08               	xorwf	(___flge@ff1+3)^0,f,c
  3151  000F4A  0E00               	movlw	0
  3152  000F4C  1A09               	xorwf	___flge@ff2^0,f,c
  3153  000F4E  0E00               	movlw	0
  3154  000F50  1A0A               	xorwf	(___flge@ff2+1)^0,f,c
  3155  000F52  0E00               	movlw	0
  3156  000F54  1A0B               	xorwf	(___flge@ff2+2)^0,f,c
  3157  000F56  0E80               	movlw	128
  3158  000F58  1A0C               	xorwf	(___flge@ff2+3)^0,f,c
  3159  000F5A  5009               	movf	___flge@ff2^0,w,c
  3160  000F5C  5C05               	subwf	___flge@ff1^0,w,c
  3161  000F5E  500A               	movf	(___flge@ff2+1)^0,w,c
  3162  000F60  5806               	subwfb	(___flge@ff1+1)^0,w,c
  3163  000F62  500B               	movf	(___flge@ff2+2)^0,w,c
  3164  000F64  5807               	subwfb	(___flge@ff1+2)^0,w,c
  3165  000F66  500C               	movf	(___flge@ff2+3)^0,w,c
  3166  000F68  5808               	subwfb	(___flge@ff1+3)^0,w,c
  3167  000F6A  B0D8               	btfsc	status,0,c
  3168  000F6C  EFBA  F007         	goto	u2711
  3169  000F70  EFBC  F007         	goto	u2710
  3170  000F74                     u2711:
  3171  000F74  EFBF  F007         	goto	l2824
  3172  000F78                     u2710:
  3173  000F78  90D8               	bcf	status,0,c
  3174  000F7A  EFC0  F007         	goto	l757
  3175  000F7E                     l2824:
  3176  000F7E  80D8               	bsf	status,0,c
  3177  000F80                     l757:
  3178  000F80  0012               	return		;funcret
  3179  000F82                     __end_of___flge:
  3180                           	callstack 0
  3181                           
  3182 ;; *************** function _colorclick_readColour *****************
  3183 ;; Defined at:
  3184 ;;		line 169 in file "color_click.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;  current         8   15[COMRAM] struct .
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;		None
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  8   15[COMRAM] struct .
  3191 ;; Registers used:
  3192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3198 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3201 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;Total ram usage:        8 bytes
  3203 ;; Hardware stack levels used: 1
  3204 ;; Hardware stack levels required when called: 8
  3205 ;; This function calls:
  3206 ;;		_colorclick_readBlue
  3207 ;;		_colorclick_readClear
  3208 ;;		_colorclick_readGreen
  3209 ;;		_colorclick_readRed
  3210 ;; This function is called by:
  3211 ;;		_main
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text12
  3216  001454                     __ptext12:
  3217                           	callstack 0
  3218  001454                     _colorclick_readColour:
  3219                           	callstack 22
  3220  001454                     
  3221                           ;color_click.c: 169: RGB_val colorclick_readColour(RGB_val current);color_click.c: 170: 
      +                          {;color_click.c: 171:     current.R = colorclick_readRed();
  3222  001454  EC62  F009         	call	_colorclick_readRed	;wreg free
  3223  001458  C009  F010         	movff	?_colorclick_readRed,colorclick_readColour@current
  3224  00145C  C00A  F011         	movff	?_colorclick_readRed+1,colorclick_readColour@current+1
  3225                           
  3226                           ;color_click.c: 172:     current.G = colorclick_readGreen();
  3227  001460  EC8A  F009         	call	_colorclick_readGreen	;wreg free
  3228  001464  C009  F012         	movff	?_colorclick_readGreen,colorclick_readColour@current+2
  3229  001468  C00A  F013         	movff	?_colorclick_readGreen+1,colorclick_readColour@current+3
  3230                           
  3231                           ;color_click.c: 173:     current.B = colorclick_readBlue();
  3232  00146C  ECDA  F009         	call	_colorclick_readBlue	;wreg free
  3233  001470  C009  F014         	movff	?_colorclick_readBlue,colorclick_readColour@current+4
  3234  001474  C00A  F015         	movff	?_colorclick_readBlue+1,colorclick_readColour@current+5
  3235                           
  3236                           ;color_click.c: 174:     current.C = colorclick_readClear();
  3237  001478  ECB2  F009         	call	_colorclick_readClear	;wreg free
  3238  00147C  C009  F016         	movff	?_colorclick_readClear,colorclick_readColour@current+6
  3239  001480  C00A  F017         	movff	?_colorclick_readClear+1,colorclick_readColour@current+7
  3240  001484                     
  3241                           ;color_click.c: 176:     return current;
  3242  001484  EE20  F010         	lfsr	2,colorclick_readColour@current
  3243  001488  EE00  F010         	lfsr	0,?_colorclick_readColour
  3244  00148C  0E07               	movlw	7
  3245  00148E                     u2851:
  3246  00148E  CFDB FFEB          	movff	plusw2,plusw0
  3247  001492  06E8               	decf	wreg,f,c
  3248  001494  E2FC               	bc	u2851
  3249  001496  0012               	return		;funcret
  3250  001498                     __end_of_colorclick_readColour:
  3251                           	callstack 0
  3252                           
  3253 ;; *************** function _colorclick_readRed *****************
  3254 ;; Defined at:
  3255 ;;		line 94 in file "color_click.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  tmp             2   13[COMRAM] unsigned int 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  2    8[COMRAM] unsigned int 
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;Total ram usage:        7 bytes
  3274 ;; Hardware stack levels used: 1
  3275 ;; Hardware stack levels required when called: 7
  3276 ;; This function calls:
  3277 ;;		_I2C_2_Master_Read
  3278 ;;		_I2C_2_Master_RepStart
  3279 ;;		_I2C_2_Master_Start
  3280 ;;		_I2C_2_Master_Stop
  3281 ;;		_I2C_2_Master_Write
  3282 ;; This function is called by:
  3283 ;;		_colorclick_readColour
  3284 ;;		_colorclick_readColourRGBCLED
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text13
  3289  0012C4                     __ptext13:
  3290                           	callstack 0
  3291  0012C4                     _colorclick_readRed:
  3292                           	callstack 22
  3293  0012C4                     
  3294                           ;color_click.c: 96:  unsigned int tmp;;color_click.c: 97:  I2C_2_Master_Start();
  3295  0012C4  EC7F  F00B         	call	_I2C_2_Master_Start	;wreg free
  3296                           
  3297                           ;color_click.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  3298  0012C8  0E52               	movlw	82
  3299  0012CA  EC63  F00B         	call	_I2C_2_Master_Write
  3300                           
  3301                           ;color_click.c: 99:  I2C_2_Master_Write(0xA0 | 0x16);
  3302  0012CE  0EB6               	movlw	182
  3303  0012D0  EC63  F00B         	call	_I2C_2_Master_Write
  3304                           
  3305                           ;color_click.c: 100:  I2C_2_Master_RepStart();
  3306  0012D4  EC75  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  3307                           
  3308                           ;color_click.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  3309  0012D8  0E53               	movlw	83
  3310  0012DA  EC63  F00B         	call	_I2C_2_Master_Write
  3311                           
  3312                           ;color_click.c: 102:  tmp=I2C_2_Master_Read(1);
  3313  0012DE  0E01               	movlw	1
  3314  0012E0  EC4C  F00A         	call	_I2C_2_Master_Read
  3315  0012E4  6E0B               	movwf	??_colorclick_readRed^0,c
  3316  0012E6  500B               	movf	??_colorclick_readRed^0,w,c
  3317  0012E8  6E0E               	movwf	colorclick_readRed@tmp^0,c
  3318  0012EA  6A0F               	clrf	(colorclick_readRed@tmp+1)^0,c
  3319                           
  3320                           ;color_click.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3321  0012EC  0E00               	movlw	0
  3322  0012EE  EC4C  F00A         	call	_I2C_2_Master_Read
  3323  0012F2  6E0B               	movwf	??_colorclick_readRed^0,c
  3324  0012F4  500B               	movf	??_colorclick_readRed^0,w,c
  3325  0012F6  6E0D               	movwf	(??_colorclick_readRed+2)^0,c
  3326  0012F8  6A0C               	clrf	(??_colorclick_readRed+1)^0,c
  3327  0012FA  500E               	movf	colorclick_readRed@tmp^0,w,c
  3328  0012FC  100C               	iorwf	(??_colorclick_readRed+1)^0,w,c
  3329  0012FE  6E0E               	movwf	colorclick_readRed@tmp^0,c
  3330  001300  500F               	movf	(colorclick_readRed@tmp+1)^0,w,c
  3331  001302  100D               	iorwf	(??_colorclick_readRed+2)^0,w,c
  3332  001304  6E0F               	movwf	(colorclick_readRed@tmp+1)^0,c
  3333                           
  3334                           ;color_click.c: 104:  I2C_2_Master_Stop();
  3335  001306  EC7A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  3336  00130A                     
  3337                           ;color_click.c: 105:  return tmp;
  3338  00130A  C00E  F009         	movff	colorclick_readRed@tmp,?_colorclick_readRed
  3339  00130E  C00F  F00A         	movff	colorclick_readRed@tmp+1,?_colorclick_readRed+1
  3340  001312  0012               	return		;funcret
  3341  001314                     __end_of_colorclick_readRed:
  3342                           	callstack 0
  3343                           
  3344 ;; *************** function _colorclick_readGreen *****************
  3345 ;; Defined at:
  3346 ;;		line 113 in file "color_click.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  tmp             2   13[COMRAM] unsigned int 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  2    8[COMRAM] unsigned int 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3362 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3363 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3364 ;;Total ram usage:        7 bytes
  3365 ;; Hardware stack levels used: 1
  3366 ;; Hardware stack levels required when called: 7
  3367 ;; This function calls:
  3368 ;;		_I2C_2_Master_Read
  3369 ;;		_I2C_2_Master_RepStart
  3370 ;;		_I2C_2_Master_Start
  3371 ;;		_I2C_2_Master_Stop
  3372 ;;		_I2C_2_Master_Write
  3373 ;; This function is called by:
  3374 ;;		_colorclick_readColour
  3375 ;;		_colorclick_readColourRGBCLED
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text14
  3380  001314                     __ptext14:
  3381                           	callstack 0
  3382  001314                     _colorclick_readGreen:
  3383                           	callstack 22
  3384  001314                     
  3385                           ;color_click.c: 115:  unsigned int tmp;;color_click.c: 116:  I2C_2_Master_Start();
  3386  001314  EC7F  F00B         	call	_I2C_2_Master_Start	;wreg free
  3387                           
  3388                           ;color_click.c: 117:  I2C_2_Master_Write(0x52 | 0x00);
  3389  001318  0E52               	movlw	82
  3390  00131A  EC63  F00B         	call	_I2C_2_Master_Write
  3391                           
  3392                           ;color_click.c: 118:  I2C_2_Master_Write(0xA0 | 0x18);
  3393  00131E  0EB8               	movlw	184
  3394  001320  EC63  F00B         	call	_I2C_2_Master_Write
  3395                           
  3396                           ;color_click.c: 119:  I2C_2_Master_RepStart();
  3397  001324  EC75  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  3398                           
  3399                           ;color_click.c: 120:  I2C_2_Master_Write(0x52 | 0x01);
  3400  001328  0E53               	movlw	83
  3401  00132A  EC63  F00B         	call	_I2C_2_Master_Write
  3402                           
  3403                           ;color_click.c: 121:  tmp=I2C_2_Master_Read(1);
  3404  00132E  0E01               	movlw	1
  3405  001330  EC4C  F00A         	call	_I2C_2_Master_Read
  3406  001334  6E0B               	movwf	??_colorclick_readGreen^0,c
  3407  001336  500B               	movf	??_colorclick_readGreen^0,w,c
  3408  001338  6E0E               	movwf	colorclick_readGreen@tmp^0,c
  3409  00133A  6A0F               	clrf	(colorclick_readGreen@tmp+1)^0,c
  3410                           
  3411                           ;color_click.c: 122:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3412  00133C  0E00               	movlw	0
  3413  00133E  EC4C  F00A         	call	_I2C_2_Master_Read
  3414  001342  6E0B               	movwf	??_colorclick_readGreen^0,c
  3415  001344  500B               	movf	??_colorclick_readGreen^0,w,c
  3416  001346  6E0D               	movwf	(??_colorclick_readGreen+2)^0,c
  3417  001348  6A0C               	clrf	(??_colorclick_readGreen+1)^0,c
  3418  00134A  500E               	movf	colorclick_readGreen@tmp^0,w,c
  3419  00134C  100C               	iorwf	(??_colorclick_readGreen+1)^0,w,c
  3420  00134E  6E0E               	movwf	colorclick_readGreen@tmp^0,c
  3421  001350  500F               	movf	(colorclick_readGreen@tmp+1)^0,w,c
  3422  001352  100D               	iorwf	(??_colorclick_readGreen+2)^0,w,c
  3423  001354  6E0F               	movwf	(colorclick_readGreen@tmp+1)^0,c
  3424                           
  3425                           ;color_click.c: 123:  I2C_2_Master_Stop();
  3426  001356  EC7A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  3427  00135A                     
  3428                           ;color_click.c: 124:  return tmp;
  3429  00135A  C00E  F009         	movff	colorclick_readGreen@tmp,?_colorclick_readGreen
  3430  00135E  C00F  F00A         	movff	colorclick_readGreen@tmp+1,?_colorclick_readGreen+1
  3431  001362  0012               	return		;funcret
  3432  001364                     __end_of_colorclick_readGreen:
  3433                           	callstack 0
  3434                           
  3435 ;; *************** function _colorclick_readClear *****************
  3436 ;; Defined at:
  3437 ;;		line 151 in file "color_click.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  tmp             2   13[COMRAM] unsigned int 
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  2    8[COMRAM] unsigned int 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3451 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3453 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3454 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3455 ;;Total ram usage:        7 bytes
  3456 ;; Hardware stack levels used: 1
  3457 ;; Hardware stack levels required when called: 7
  3458 ;; This function calls:
  3459 ;;		_I2C_2_Master_Read
  3460 ;;		_I2C_2_Master_RepStart
  3461 ;;		_I2C_2_Master_Start
  3462 ;;		_I2C_2_Master_Stop
  3463 ;;		_I2C_2_Master_Write
  3464 ;; This function is called by:
  3465 ;;		_colorclick_readColour
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text15
  3470  001364                     __ptext15:
  3471                           	callstack 0
  3472  001364                     _colorclick_readClear:
  3473                           	callstack 22
  3474  001364                     
  3475                           ;color_click.c: 153:  unsigned int tmp;;color_click.c: 154:  I2C_2_Master_Start();
  3476  001364  EC7F  F00B         	call	_I2C_2_Master_Start	;wreg free
  3477                           
  3478                           ;color_click.c: 155:  I2C_2_Master_Write(0x52 | 0x00);
  3479  001368  0E52               	movlw	82
  3480  00136A  EC63  F00B         	call	_I2C_2_Master_Write
  3481                           
  3482                           ;color_click.c: 156:  I2C_2_Master_Write(0xA0 | 0x14);
  3483  00136E  0EB4               	movlw	180
  3484  001370  EC63  F00B         	call	_I2C_2_Master_Write
  3485                           
  3486                           ;color_click.c: 157:  I2C_2_Master_RepStart();
  3487  001374  EC75  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  3488                           
  3489                           ;color_click.c: 158:  I2C_2_Master_Write(0x52 | 0x01);
  3490  001378  0E53               	movlw	83
  3491  00137A  EC63  F00B         	call	_I2C_2_Master_Write
  3492                           
  3493                           ;color_click.c: 159:  tmp=I2C_2_Master_Read(1);
  3494  00137E  0E01               	movlw	1
  3495  001380  EC4C  F00A         	call	_I2C_2_Master_Read
  3496  001384  6E0B               	movwf	??_colorclick_readClear^0,c
  3497  001386  500B               	movf	??_colorclick_readClear^0,w,c
  3498  001388  6E0E               	movwf	colorclick_readClear@tmp^0,c
  3499  00138A  6A0F               	clrf	(colorclick_readClear@tmp+1)^0,c
  3500                           
  3501                           ;color_click.c: 160:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3502  00138C  0E00               	movlw	0
  3503  00138E  EC4C  F00A         	call	_I2C_2_Master_Read
  3504  001392  6E0B               	movwf	??_colorclick_readClear^0,c
  3505  001394  500B               	movf	??_colorclick_readClear^0,w,c
  3506  001396  6E0D               	movwf	(??_colorclick_readClear+2)^0,c
  3507  001398  6A0C               	clrf	(??_colorclick_readClear+1)^0,c
  3508  00139A  500E               	movf	colorclick_readClear@tmp^0,w,c
  3509  00139C  100C               	iorwf	(??_colorclick_readClear+1)^0,w,c
  3510  00139E  6E0E               	movwf	colorclick_readClear@tmp^0,c
  3511  0013A0  500F               	movf	(colorclick_readClear@tmp+1)^0,w,c
  3512  0013A2  100D               	iorwf	(??_colorclick_readClear+2)^0,w,c
  3513  0013A4  6E0F               	movwf	(colorclick_readClear@tmp+1)^0,c
  3514                           
  3515                           ;color_click.c: 161:  I2C_2_Master_Stop();
  3516  0013A6  EC7A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  3517  0013AA                     
  3518                           ;color_click.c: 162:  return tmp;
  3519  0013AA  C00E  F009         	movff	colorclick_readClear@tmp,?_colorclick_readClear
  3520  0013AE  C00F  F00A         	movff	colorclick_readClear@tmp+1,?_colorclick_readClear+1
  3521  0013B2  0012               	return		;funcret
  3522  0013B4                     __end_of_colorclick_readClear:
  3523                           	callstack 0
  3524                           
  3525 ;; *************** function _colorclick_readBlue *****************
  3526 ;; Defined at:
  3527 ;;		line 132 in file "color_click.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  tmp             2   13[COMRAM] unsigned int 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  2    8[COMRAM] unsigned int 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3541 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3543 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3544 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3545 ;;Total ram usage:        7 bytes
  3546 ;; Hardware stack levels used: 1
  3547 ;; Hardware stack levels required when called: 7
  3548 ;; This function calls:
  3549 ;;		_I2C_2_Master_Read
  3550 ;;		_I2C_2_Master_RepStart
  3551 ;;		_I2C_2_Master_Start
  3552 ;;		_I2C_2_Master_Stop
  3553 ;;		_I2C_2_Master_Write
  3554 ;; This function is called by:
  3555 ;;		_colorclick_readColour
  3556 ;;		_colorclick_readColourRGBCLED
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text16
  3561  0013B4                     __ptext16:
  3562                           	callstack 0
  3563  0013B4                     _colorclick_readBlue:
  3564                           	callstack 22
  3565  0013B4                     
  3566                           ;color_click.c: 134:  unsigned int tmp;;color_click.c: 135:  I2C_2_Master_Start();
  3567  0013B4  EC7F  F00B         	call	_I2C_2_Master_Start	;wreg free
  3568                           
  3569                           ;color_click.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3570  0013B8  0E52               	movlw	82
  3571  0013BA  EC63  F00B         	call	_I2C_2_Master_Write
  3572                           
  3573                           ;color_click.c: 137:  I2C_2_Master_Write(0xA0 | 0x1A);
  3574  0013BE  0EBA               	movlw	186
  3575  0013C0  EC63  F00B         	call	_I2C_2_Master_Write
  3576                           
  3577                           ;color_click.c: 138:  I2C_2_Master_RepStart();
  3578  0013C4  EC75  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  3579                           
  3580                           ;color_click.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3581  0013C8  0E53               	movlw	83
  3582  0013CA  EC63  F00B         	call	_I2C_2_Master_Write
  3583                           
  3584                           ;color_click.c: 140:  tmp=I2C_2_Master_Read(1);
  3585  0013CE  0E01               	movlw	1
  3586  0013D0  EC4C  F00A         	call	_I2C_2_Master_Read
  3587  0013D4  6E0B               	movwf	??_colorclick_readBlue^0,c
  3588  0013D6  500B               	movf	??_colorclick_readBlue^0,w,c
  3589  0013D8  6E0E               	movwf	colorclick_readBlue@tmp^0,c
  3590  0013DA  6A0F               	clrf	(colorclick_readBlue@tmp+1)^0,c
  3591                           
  3592                           ;color_click.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3593  0013DC  0E00               	movlw	0
  3594  0013DE  EC4C  F00A         	call	_I2C_2_Master_Read
  3595  0013E2  6E0B               	movwf	??_colorclick_readBlue^0,c
  3596  0013E4  500B               	movf	??_colorclick_readBlue^0,w,c
  3597  0013E6  6E0D               	movwf	(??_colorclick_readBlue+2)^0,c
  3598  0013E8  6A0C               	clrf	(??_colorclick_readBlue+1)^0,c
  3599  0013EA  500E               	movf	colorclick_readBlue@tmp^0,w,c
  3600  0013EC  100C               	iorwf	(??_colorclick_readBlue+1)^0,w,c
  3601  0013EE  6E0E               	movwf	colorclick_readBlue@tmp^0,c
  3602  0013F0  500F               	movf	(colorclick_readBlue@tmp+1)^0,w,c
  3603  0013F2  100D               	iorwf	(??_colorclick_readBlue+2)^0,w,c
  3604  0013F4  6E0F               	movwf	(colorclick_readBlue@tmp+1)^0,c
  3605                           
  3606                           ;color_click.c: 142:  I2C_2_Master_Stop();
  3607  0013F6  EC7A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  3608  0013FA                     
  3609                           ;color_click.c: 143:  return tmp;
  3610  0013FA  C00E  F009         	movff	colorclick_readBlue@tmp,?_colorclick_readBlue
  3611  0013FE  C00F  F00A         	movff	colorclick_readBlue@tmp+1,?_colorclick_readBlue+1
  3612  001402  0012               	return		;funcret
  3613  001404                     __end_of_colorclick_readBlue:
  3614                           	callstack 0
  3615                           
  3616 ;; *************** function _I2C_2_Master_RepStart *****************
  3617 ;; Defined at:
  3618 ;;		line 49 in file "i2c.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;		None
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;		None
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      void 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3636 ;;Total ram usage:        0 bytes
  3637 ;; Hardware stack levels used: 1
  3638 ;; Hardware stack levels required when called: 6
  3639 ;; This function calls:
  3640 ;;		_I2C_2_Master_Idle
  3641 ;; This function is called by:
  3642 ;;		_colorclick_readRed
  3643 ;;		_colorclick_readGreen
  3644 ;;		_colorclick_readBlue
  3645 ;;		_colorclick_readClear
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text17
  3650  0016EA                     __ptext17:
  3651                           	callstack 0
  3652  0016EA                     _I2C_2_Master_RepStart:
  3653                           	callstack 22
  3654  0016EA                     
  3655                           ;i2c.c: 51:   I2C_2_Master_Idle();
  3656  0016EA  ECC3  F00A         	call	_I2C_2_Master_Idle	;wreg free
  3657  0016EE                     
  3658                           ;i2c.c: 52:   SSP2CON2bits.RSEN = 1;
  3659  0016EE  010E               	movlb	14	; () banked
  3660  0016F0  83DA               	bsf	218,1,b	;volatile
  3661  0016F2                     
  3662                           ; BSR set to: 14
  3663  0016F2  0012               	return		;funcret
  3664  0016F4                     __end_of_I2C_2_Master_RepStart:
  3665                           	callstack 0
  3666                           
  3667 ;; *************** function _I2C_2_Master_Read *****************
  3668 ;; Defined at:
  3669 ;;		line 79 in file "i2c.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  ack             1    wreg     unsigned char 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  ack             1    6[COMRAM] unsigned char 
  3674 ;;  tmp             1    7[COMRAM] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      unsigned char 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3687 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3688 ;;Total ram usage:        3 bytes
  3689 ;; Hardware stack levels used: 1
  3690 ;; Hardware stack levels required when called: 6
  3691 ;; This function calls:
  3692 ;;		_I2C_2_Master_Idle
  3693 ;; This function is called by:
  3694 ;;		_colorclick_readRed
  3695 ;;		_colorclick_readGreen
  3696 ;;		_colorclick_readBlue
  3697 ;;		_colorclick_readClear
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text18
  3702  001498                     __ptext18:
  3703                           	callstack 0
  3704  001498                     _I2C_2_Master_Read:
  3705                           	callstack 22
  3706                           
  3707                           ; BSR set to: 14
  3708                           ;incstack = 0
  3709                           ;I2C_2_Master_Read@ack stored from wreg
  3710  001498  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  3711  00149A                     
  3712                           ;i2c.c: 79: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 80: {;i2c.c: 81:  
      +                           unsigned char tmp;;i2c.c: 82:   I2C_2_Master_Idle();
  3713  00149A  ECC3  F00A         	call	_I2C_2_Master_Idle	;wreg free
  3714  00149E                     
  3715                           ;i2c.c: 83:   SSP2CON2bits.RCEN = 1;
  3716  00149E  010E               	movlb	14	; () banked
  3717  0014A0  87DA               	bsf	218,3,b	;volatile
  3718                           
  3719                           ;i2c.c: 84:   I2C_2_Master_Idle();
  3720  0014A2  ECC3  F00A         	call	_I2C_2_Master_Idle	;wreg free
  3721  0014A6                     
  3722                           ;i2c.c: 85:   tmp = SSP2BUF;
  3723  0014A6  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3724                           
  3725                           ;i2c.c: 86:   I2C_2_Master_Idle();
  3726  0014AA  ECC3  F00A         	call	_I2C_2_Master_Idle	;wreg free
  3727  0014AE                     
  3728                           ;i2c.c: 87:   SSP2CON2bits.ACKDT = !ack;
  3729  0014AE  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  3730  0014B0  B4D8               	btfsc	status,2,c
  3731  0014B2  EF5D  F00A         	goto	u2281
  3732  0014B6  EF61  F00A         	goto	u2280
  3733  0014BA                     u2281:
  3734  0014BA  6A06               	clrf	??_I2C_2_Master_Read^0,c
  3735  0014BC  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  3736  0014BE  EF62  F00A         	goto	u2298
  3737  0014C2                     u2280:
  3738  0014C2  6A06               	clrf	??_I2C_2_Master_Read^0,c
  3739  0014C4                     u2298:
  3740  0014C4  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  3741  0014C6  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  3742  0014C8  010E               	movlb	14	; () banked
  3743  0014CA  51DA               	movf	218,w,b	;volatile
  3744  0014CC  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3745  0014CE  0BDF               	andlw	-33
  3746  0014D0  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3747  0014D2  6FDA               	movwf	218,b	;volatile
  3748  0014D4                     
  3749                           ; BSR set to: 14
  3750                           ;i2c.c: 88:   SSP2CON2bits.ACKEN = 1;
  3751  0014D4  89DA               	bsf	218,4,b	;volatile
  3752  0014D6                     
  3753                           ; BSR set to: 14
  3754                           ;i2c.c: 89:   return tmp;
  3755  0014D6  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  3756  0014D8                     
  3757                           ; BSR set to: 14
  3758  0014D8  0012               	return		;funcret
  3759  0014DA                     __end_of_I2C_2_Master_Read:
  3760                           	callstack 0
  3761                           
  3762 ;; *************** function _colorclick_init *****************
  3763 ;; Defined at:
  3764 ;;		line 17 in file "color_click.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      void 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3782 ;;Total ram usage:        1 bytes
  3783 ;; Hardware stack levels used: 1
  3784 ;; Hardware stack levels required when called: 8
  3785 ;; This function calls:
  3786 ;;		_I2C_2_Master_Init
  3787 ;;		_colorclick_toggleClearLED
  3788 ;;		_colorclick_writetoaddr
  3789 ;; This function is called by:
  3790 ;;		_main
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text19
  3795  00151C                     __ptext19:
  3796                           	callstack 0
  3797  00151C                     _colorclick_init:
  3798                           	callstack 22
  3799  00151C                     
  3800                           ;color_click.c: 20:     I2C_2_Master_Init();
  3801  00151C  ECAE  F00A         	call	_I2C_2_Master_Init	;wreg free
  3802  001520                     
  3803                           ;color_click.c: 23:   colorclick_writetoaddr(0x00, 0x01);
  3804  001520  0E01               	movlw	1
  3805  001522  6E07               	movwf	colorclick_writetoaddr@value^0,c
  3806  001524  0E00               	movlw	0
  3807  001526  EC20  F00B         	call	_colorclick_writetoaddr
  3808  00152A                     
  3809                           ;color_click.c: 24:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3810  00152A  0E3F               	movlw	63
  3811  00152C  6E09               	movwf	??_colorclick_init^0,c
  3812  00152E  0E55               	movlw	85
  3813  001530                     u3237:
  3814  001530  2EE8               	decfsz	wreg,f,c
  3815  001532  D7FE               	bra	u3237
  3816  001534  2E09               	decfsz	??_colorclick_init^0,f,c
  3817  001536  D7FC               	bra	u3237
  3818  001538  F000               	nop	
  3819  00153A                     
  3820                           ;color_click.c: 27:  colorclick_writetoaddr(0x00, 0x03);
  3821  00153A  0E03               	movlw	3
  3822  00153C  6E07               	movwf	colorclick_writetoaddr@value^0,c
  3823  00153E  0E00               	movlw	0
  3824  001540  EC20  F00B         	call	_colorclick_writetoaddr
  3825  001544                     
  3826                           ;color_click.c: 30:  colorclick_writetoaddr(0x01, 0xD5);
  3827  001544  0ED5               	movlw	213
  3828  001546  6E07               	movwf	colorclick_writetoaddr@value^0,c
  3829  001548  0E01               	movlw	1
  3830  00154A  EC20  F00B         	call	_colorclick_writetoaddr
  3831  00154E                     
  3832                           ;color_click.c: 33:     TRISGbits.TRISG1 = 0;
  3833  00154E  9287               	bcf	135,1,c	;volatile
  3834  001550                     
  3835                           ;color_click.c: 34:     TRISAbits.TRISA4 = 0;
  3836  001550  9881               	bcf	129,4,c	;volatile
  3837  001552                     
  3838                           ;color_click.c: 35:     TRISFbits.TRISF7 = 0;
  3839  001552  9E86               	bcf	134,7,c	;volatile
  3840  001554                     
  3841                           ;color_click.c: 38:     colorclick_toggleClearLED(0);
  3842  001554  0E00               	movlw	0
  3843  001556  EC0F  F00B         	call	_colorclick_toggleClearLED
  3844  00155A  0012               	return		;funcret
  3845  00155C                     __end_of_colorclick_init:
  3846                           	callstack 0
  3847                           
  3848 ;; *************** function _colorclick_writetoaddr *****************
  3849 ;; Defined at:
  3850 ;;		line 80 in file "color_click.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  address         1    wreg     unsigned char 
  3853 ;;  value           1    6[COMRAM] unsigned char 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  address         1    7[COMRAM] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3865 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3869 ;;Total ram usage:        2 bytes
  3870 ;; Hardware stack levels used: 1
  3871 ;; Hardware stack levels required when called: 7
  3872 ;; This function calls:
  3873 ;;		_I2C_2_Master_Start
  3874 ;;		_I2C_2_Master_Stop
  3875 ;;		_I2C_2_Master_Write
  3876 ;; This function is called by:
  3877 ;;		_colorclick_init
  3878 ;;		_interrupts_init
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text20
  3883  001640                     __ptext20:
  3884                           	callstack 0
  3885  001640                     _colorclick_writetoaddr:
  3886                           	callstack 22
  3887                           
  3888                           ;incstack = 0
  3889                           ;colorclick_writetoaddr@address stored from wreg
  3890  001640  6E08               	movwf	colorclick_writetoaddr@address^0,c
  3891  001642                     
  3892                           ;color_click.c: 80: void colorclick_writetoaddr(char address, char value);color_click.c:
      +                           81: {;color_click.c: 82:     I2C_2_Master_Start();
  3893  001642  EC7F  F00B         	call	_I2C_2_Master_Start	;wreg free
  3894                           
  3895                           ;color_click.c: 83:     I2C_2_Master_Write(0x52 | 0x00);
  3896  001646  0E52               	movlw	82
  3897  001648  EC63  F00B         	call	_I2C_2_Master_Write
  3898                           
  3899                           ;color_click.c: 84:     I2C_2_Master_Write(0x80 | address);
  3900  00164C  5008               	movf	colorclick_writetoaddr@address^0,w,c
  3901  00164E  0980               	iorlw	128
  3902  001650  EC63  F00B         	call	_I2C_2_Master_Write
  3903                           
  3904                           ;color_click.c: 85:     I2C_2_Master_Write(value);
  3905  001654  5007               	movf	colorclick_writetoaddr@value^0,w,c
  3906  001656  EC63  F00B         	call	_I2C_2_Master_Write
  3907                           
  3908                           ;color_click.c: 86:     I2C_2_Master_Stop();
  3909  00165A  EC7A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  3910  00165E  0012               	return		;funcret
  3911  001660                     __end_of_colorclick_writetoaddr:
  3912                           	callstack 0
  3913                           
  3914 ;; *************** function _I2C_2_Master_Write *****************
  3915 ;; Defined at:
  3916 ;;		line 69 in file "i2c.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  data_byte       1    wreg     unsigned char 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  data_byte       1    5[COMRAM] unsigned char 
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      void 
  3923 ;; Registers used:
  3924 ;;		wreg, status,2, status,0, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;Total ram usage:        1 bytes
  3935 ;; Hardware stack levels used: 1
  3936 ;; Hardware stack levels required when called: 6
  3937 ;; This function calls:
  3938 ;;		_I2C_2_Master_Idle
  3939 ;; This function is called by:
  3940 ;;		_colorclick_writetoaddr
  3941 ;;		_colorclick_readRed
  3942 ;;		_colorclick_readGreen
  3943 ;;		_colorclick_readBlue
  3944 ;;		_colorclick_readClear
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text21
  3949  0016C6                     __ptext21:
  3950                           	callstack 0
  3951  0016C6                     _I2C_2_Master_Write:
  3952                           	callstack 22
  3953                           
  3954                           ;incstack = 0
  3955                           ;I2C_2_Master_Write@data_byte stored from wreg
  3956  0016C6  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  3957  0016C8                     
  3958                           ;i2c.c: 69: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 70: {;i2c.c: 71:   I
      +                          2C_2_Master_Idle();
  3959  0016C8  ECC3  F00A         	call	_I2C_2_Master_Idle	;wreg free
  3960  0016CC                     
  3961                           ;i2c.c: 72:   SSP2BUF = data_byte;
  3962  0016CC  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3963  0016D0  0012               	return		;funcret
  3964  0016D2                     __end_of_I2C_2_Master_Write:
  3965                           	callstack 0
  3966                           
  3967 ;; *************** function _I2C_2_Master_Stop *****************
  3968 ;; Defined at:
  3969 ;;		line 59 in file "i2c.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used: 1
  3989 ;; Hardware stack levels required when called: 6
  3990 ;; This function calls:
  3991 ;;		_I2C_2_Master_Idle
  3992 ;; This function is called by:
  3993 ;;		_colorclick_writetoaddr
  3994 ;;		_colorclick_readRed
  3995 ;;		_colorclick_readGreen
  3996 ;;		_colorclick_readBlue
  3997 ;;		_colorclick_readClear
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text22
  4002  0016F4                     __ptext22:
  4003                           	callstack 0
  4004  0016F4                     _I2C_2_Master_Stop:
  4005                           	callstack 22
  4006  0016F4                     
  4007                           ;i2c.c: 61:   I2C_2_Master_Idle();
  4008  0016F4  ECC3  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4009  0016F8                     
  4010                           ;i2c.c: 62:   SSP2CON2bits.PEN = 1;
  4011  0016F8  010E               	movlb	14	; () banked
  4012  0016FA  85DA               	bsf	218,2,b	;volatile
  4013  0016FC                     
  4014                           ; BSR set to: 14
  4015  0016FC  0012               	return		;funcret
  4016  0016FE                     __end_of_I2C_2_Master_Stop:
  4017                           	callstack 0
  4018                           
  4019 ;; *************** function _I2C_2_Master_Start *****************
  4020 ;; Defined at:
  4021 ;;		line 39 in file "i2c.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4039 ;;Total ram usage:        0 bytes
  4040 ;; Hardware stack levels used: 1
  4041 ;; Hardware stack levels required when called: 6
  4042 ;; This function calls:
  4043 ;;		_I2C_2_Master_Idle
  4044 ;; This function is called by:
  4045 ;;		_colorclick_writetoaddr
  4046 ;;		_colorclick_readRed
  4047 ;;		_colorclick_readGreen
  4048 ;;		_colorclick_readBlue
  4049 ;;		_colorclick_readClear
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text23
  4054  0016FE                     __ptext23:
  4055                           	callstack 0
  4056  0016FE                     _I2C_2_Master_Start:
  4057                           	callstack 22
  4058  0016FE                     
  4059                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4060  0016FE  ECC3  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4061  001702                     
  4062                           ;i2c.c: 42:   SSP2CON2bits.SEN = 1;
  4063  001702  010E               	movlb	14	; () banked
  4064  001704  81DA               	bsf	218,0,b	;volatile
  4065  001706                     
  4066                           ; BSR set to: 14
  4067  001706  0012               	return		;funcret
  4068  001708                     __end_of_I2C_2_Master_Start:
  4069                           	callstack 0
  4070                           
  4071 ;; *************** function _I2C_2_Master_Idle *****************
  4072 ;; Defined at:
  4073 ;;		line 30 in file "i2c.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4090 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4091 ;;Total ram usage:        1 bytes
  4092 ;; Hardware stack levels used: 1
  4093 ;; Hardware stack levels required when called: 5
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_I2C_2_Master_Start
  4098 ;;		_I2C_2_Master_RepStart
  4099 ;;		_I2C_2_Master_Stop
  4100 ;;		_I2C_2_Master_Write
  4101 ;;		_I2C_2_Master_Read
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text24
  4106  001586                     __ptext24:
  4107                           	callstack 0
  4108  001586                     _I2C_2_Master_Idle:
  4109                           	callstack 22
  4110  001586                     l30:
  4111  001586  010E               	movlb	14	; () banked
  4112  001588  B5D8               	btfsc	216,2,b	;volatile
  4113  00158A  EFC9  F00A         	goto	u2201
  4114  00158E  EFCB  F00A         	goto	u2200
  4115  001592                     u2201:
  4116  001592  EFC3  F00A         	goto	l30
  4117  001596                     u2200:
  4118  001596                     
  4119                           ; BSR set to: 14
  4120  001596  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4121  00159A  0E1F               	movlw	31
  4122  00159C  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  4123  00159E  A4D8               	btfss	status,2,c
  4124  0015A0  EFD4  F00A         	goto	u2211
  4125  0015A4  EFD6  F00A         	goto	u2210
  4126  0015A8                     u2211:
  4127  0015A8  EFC3  F00A         	goto	l30
  4128  0015AC                     u2210:
  4129  0015AC                     
  4130                           ; BSR set to: 14
  4131  0015AC  0012               	return		;funcret
  4132  0015AE                     __end_of_I2C_2_Master_Idle:
  4133                           	callstack 0
  4134                           
  4135 ;; *************** function _colorclick_toggleClearLED *****************
  4136 ;; Defined at:
  4137 ;;		line 67 in file "color_click.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  toggle          1    wreg     unsigned char 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  toggle          1    4[COMRAM] unsigned char 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4155 ;;Total ram usage:        1 bytes
  4156 ;; Hardware stack levels used: 1
  4157 ;; Hardware stack levels required when called: 5
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_colorclick_init
  4162 ;;		_colorclick_readColourRGBCLED
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text25
  4167  00161E                     __ptext25:
  4168                           	callstack 0
  4169  00161E                     _colorclick_toggleClearLED:
  4170                           	callstack 24
  4171                           
  4172                           ; BSR set to: 14
  4173                           ;incstack = 0
  4174                           ;colorclick_toggleClearLED@toggle stored from wreg
  4175  00161E  6E05               	movwf	colorclick_toggleClearLED@toggle^0,c
  4176  001620                     
  4177                           ;color_click.c: 67: void colorclick_toggleClearLED(unsigned char toggle);color_click.c: 
      +                          68: {;color_click.c: 69:     LATGbits.LATG1 = toggle;
  4178  001620  B005               	btfsc	colorclick_toggleClearLED@toggle^0,0,c
  4179  001622  D002               	bra	u2645
  4180  001624  927F               	bcf	127,1,c	;volatile
  4181  001626  D001               	bra	u2646
  4182  001628                     u2645:
  4183  001628  827F               	bsf	127,1,c	;volatile
  4184  00162A                     u2646:
  4185                           
  4186                           ;color_click.c: 70:     LATFbits.LATF7 = toggle;
  4187  00162A  B005               	btfsc	colorclick_toggleClearLED@toggle^0,0,c
  4188  00162C  D002               	bra	u2655
  4189  00162E  9E7E               	bcf	126,7,c	;volatile
  4190  001630  D001               	bra	u2656
  4191  001632                     u2655:
  4192  001632  8E7E               	bsf	126,7,c	;volatile
  4193  001634                     u2656:
  4194                           
  4195                           ;color_click.c: 71:     LATAbits.LATA4 = toggle;
  4196  001634  B005               	btfsc	colorclick_toggleClearLED@toggle^0,0,c
  4197  001636  D002               	bra	u2665
  4198  001638  9879               	bcf	121,4,c	;volatile
  4199  00163A  D001               	bra	u2666
  4200  00163C                     u2665:
  4201  00163C  8879               	bsf	121,4,c	;volatile
  4202  00163E                     u2666:
  4203  00163E  0012               	return		;funcret
  4204  001640                     __end_of_colorclick_toggleClearLED:
  4205                           	callstack 0
  4206                           
  4207 ;; *************** function _I2C_2_Master_Init *****************
  4208 ;; Defined at:
  4209 ;;		line 8 in file "i2c.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used: 1
  4229 ;; Hardware stack levels required when called: 5
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_colorclick_init
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text26
  4238  00155C                     __ptext26:
  4239                           	callstack 0
  4240  00155C                     _I2C_2_Master_Init:
  4241                           	callstack 24
  4242  00155C                     
  4243                           ;i2c.c: 11:   SSP2CON1bits.SSPM= 0b1000;
  4244  00155C  010E               	movlb	14	; () banked
  4245  00155E  51D9               	movf	217,w,b	;volatile
  4246  001560  0BF0               	andlw	-16
  4247  001562  0908               	iorlw	8
  4248  001564  6FD9               	movwf	217,b	;volatile
  4249  001566                     
  4250                           ; BSR set to: 14
  4251                           ;i2c.c: 12:   SSP2CON1bits.SSPEN = 1;
  4252  001566  8BD9               	bsf	217,5,b	;volatile
  4253                           
  4254                           ;i2c.c: 13:   SSP2ADD = (64000000/(4*100000))-1;
  4255  001568  0E9F               	movlw	159
  4256  00156A  6FD6               	movwf	214,b	;volatile
  4257  00156C                     
  4258                           ; BSR set to: 14
  4259                           ;i2c.c: 16:   TRISDbits.TRISD5 = 1;
  4260  00156C  8A84               	bsf	132,5,c	;volatile
  4261  00156E                     
  4262                           ; BSR set to: 14
  4263                           ;i2c.c: 17:   TRISDbits.TRISD6 = 1;
  4264  00156E  8C84               	bsf	132,6,c	;volatile
  4265  001570                     
  4266                           ; BSR set to: 14
  4267                           ;i2c.c: 18:   ANSELDbits.ANSELD5=0;
  4268  001570  9BA7               	bcf	167,5,b	;volatile
  4269  001572                     
  4270                           ; BSR set to: 14
  4271                           ;i2c.c: 19:   ANSELDbits.ANSELD6=0;
  4272  001572  9DA7               	bcf	167,6,b	;volatile
  4273                           
  4274                           ;i2c.c: 20:   SSP2DATPPS=0x1D;
  4275  001574  0E1D               	movlw	29
  4276  001576  6F1D               	movwf	29,b	;volatile
  4277                           
  4278                           ;i2c.c: 21:   SSP2CLKPPS=0x1E;
  4279  001578  0E1E               	movlw	30
  4280  00157A  6F1C               	movwf	28,b	;volatile
  4281                           
  4282                           ;i2c.c: 22:   RD5PPS=0x1C;
  4283  00157C  0E1C               	movlw	28
  4284  00157E  6F6F               	movwf	111,b	;volatile
  4285                           
  4286                           ;i2c.c: 23:   RD6PPS=0x1B;
  4287  001580  0E1B               	movlw	27
  4288  001582  6F70               	movwf	112,b	;volatile
  4289  001584                     
  4290                           ; BSR set to: 14
  4291  001584  0012               	return		;funcret
  4292  001586                     __end_of_I2C_2_Master_Init:
  4293                           	callstack 0
  4294                           
  4295 ;; *************** function _USART4_init *****************
  4296 ;; Defined at:
  4297 ;;		line 7 in file "serial.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;		None
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, status,2
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4315 ;;Total ram usage:        0 bytes
  4316 ;; Hardware stack levels used: 1
  4317 ;; Hardware stack levels required when called: 5
  4318 ;; This function calls:
  4319 ;;		Nothing
  4320 ;; This function is called by:
  4321 ;;		_main
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text27
  4326  001660                     __ptext27:
  4327                           	callstack 0
  4328  001660                     _USART4_init:
  4329                           	callstack 25
  4330  001660                     
  4331                           ;serial.c: 10:     RC0PPS = 0x12;
  4332  001660  0E12               	movlw	18
  4333  001662  010E               	movlb	14	; () banked
  4334  001664  6F62               	movwf	98,b	;volatile
  4335                           
  4336                           ;serial.c: 11:     RX4PPS = 0x11;
  4337  001666  0E11               	movlw	17
  4338  001668  6F15               	movwf	21,b	;volatile
  4339  00166A                     
  4340                           ; BSR set to: 14
  4341                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  4342  00166A  8283               	bsf	131,1,c	;volatile
  4343  00166C                     
  4344                           ; BSR set to: 14
  4345                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  4346  00166C  97E9               	bcf	233,3,b	;volatile
  4347  00166E                     
  4348                           ; BSR set to: 14
  4349                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  4350  00166E  95E8               	bcf	232,2,b	;volatile
  4351                           
  4352                           ;serial.c: 16:     SP4BRGL = 51;
  4353  001670  0E33               	movlw	51
  4354  001672  6FE5               	movwf	229,b	;volatile
  4355                           
  4356                           ;serial.c: 17:     SP4BRGH = 0;
  4357  001674  0E00               	movlw	0
  4358  001676  6FE6               	movwf	230,b	;volatile
  4359  001678                     
  4360                           ; BSR set to: 14
  4361                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  4362  001678  89E7               	bsf	231,4,b	;volatile
  4363  00167A                     
  4364                           ; BSR set to: 14
  4365                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  4366  00167A  8BE8               	bsf	232,5,b	;volatile
  4367  00167C                     
  4368                           ; BSR set to: 14
  4369                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  4370  00167C  8FE7               	bsf	231,7,b	;volatile
  4371  00167E                     
  4372                           ; BSR set to: 14
  4373  00167E  0012               	return		;funcret
  4374  001680                     __end_of_USART4_init:
  4375                           	callstack 0
  4376                           
  4377 ;; *************** function _DCmotors_init *****************
  4378 ;; Defined at:
  4379 ;;		line 11 in file "dc_motor.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  PWMperiod       1    wreg     unsigned char 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  PWMperiod       1    4[COMRAM] unsigned char 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4394 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4396 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4397 ;;Total ram usage:        1 bytes
  4398 ;; Hardware stack levels used: 1
  4399 ;; Hardware stack levels required when called: 6
  4400 ;; This function calls:
  4401 ;;		_buggyLEDs_init
  4402 ;;		_clicker2LEDs_init
  4403 ;;		_clicker2buttons_init
  4404 ;; This function is called by:
  4405 ;;		_main
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text28
  4410  001404                     __ptext28:
  4411                           	callstack 0
  4412  001404                     _DCmotors_init:
  4413                           	callstack 24
  4414                           
  4415                           ; BSR set to: 14
  4416                           ;incstack = 0
  4417                           ;DCmotors_init@PWMperiod stored from wreg
  4418  001404  6E05               	movwf	DCmotors_init@PWMperiod^0,c
  4419  001406                     
  4420                           ;dc_motor.c: 11: void DCmotors_init(unsigned char PWMperiod);dc_motor.c: 12: {;dc_motor.
      +                          c: 14:     T2CONbits.CKPS=0b100;
  4421  001406  50BD               	movf	189,w,c	;volatile
  4422  001408  0B8F               	andlw	-113
  4423  00140A  0940               	iorlw	64
  4424  00140C  6EBD               	movwf	189,c	;volatile
  4425                           
  4426                           ;dc_motor.c: 15:     T2HLTbits.MODE=0b00000;
  4427  00140E  0EE0               	movlw	-32
  4428  001410  16BE               	andwf	190,f,c	;volatile
  4429                           
  4430                           ;dc_motor.c: 16:     T2CLKCONbits.CS=0b0001;
  4431  001412  50BF               	movf	191,w,c	;volatile
  4432  001414  0BF0               	andlw	-16
  4433  001416  0901               	iorlw	1
  4434  001418  6EBF               	movwf	191,c	;volatile
  4435  00141A                     
  4436                           ;dc_motor.c: 19:     T2PR=PWMperiod;
  4437  00141A  C005  FFBC         	movff	DCmotors_init@PWMperiod,4028	;volatile
  4438  00141E                     
  4439                           ;dc_motor.c: 20:     T2CONbits.ON=1;
  4440  00141E  8EBD               	bsf	189,7,c	;volatile
  4441  001420                     
  4442                           ;dc_motor.c: 23:     TRISEbits.TRISE2=0;
  4443  001420  9485               	bcf	133,2,c	;volatile
  4444  001422                     
  4445                           ;dc_motor.c: 24:     TRISEbits.TRISE4=0;
  4446  001422  9885               	bcf	133,4,c	;volatile
  4447  001424                     
  4448                           ;dc_motor.c: 25:     TRISCbits.TRISC7=0;
  4449  001424  9E83               	bcf	131,7,c	;volatile
  4450  001426                     
  4451                           ;dc_motor.c: 26:     TRISGbits.TRISG6=0;
  4452  001426  9C87               	bcf	135,6,c	;volatile
  4453  001428                     
  4454                           ;dc_motor.c: 28:     LATEbits.LATE2=0;
  4455  001428  947D               	bcf	125,2,c	;volatile
  4456  00142A                     
  4457                           ;dc_motor.c: 29:     LATEbits.LATE4=0;
  4458  00142A  987D               	bcf	125,4,c	;volatile
  4459  00142C                     
  4460                           ;dc_motor.c: 30:     LATCbits.LATC7=0;
  4461  00142C  9E7B               	bcf	123,7,c	;volatile
  4462  00142E                     
  4463                           ;dc_motor.c: 31:     LATGbits.LATG6=0;
  4464  00142E  9C7F               	bcf	127,6,c	;volatile
  4465                           
  4466                           ;dc_motor.c: 33:     PWM6DCH=0;
  4467  001430  0E00               	movlw	0
  4468  001432  6EA3               	movwf	163,c	;volatile
  4469                           
  4470                           ;dc_motor.c: 34:     PWM7DCH=0;
  4471  001434  0E00               	movlw	0
  4472  001436  6EA0               	movwf	160,c	;volatile
  4473  001438                     
  4474                           ;dc_motor.c: 36:     PWM6CONbits.EN = 1;
  4475  001438  8EA4               	bsf	164,7,c	;volatile
  4476  00143A                     
  4477                           ;dc_motor.c: 37:     PWM7CONbits.EN = 1;
  4478  00143A  8EA1               	bsf	161,7,c	;volatile
  4479                           
  4480                           ;dc_motor.c: 39:     RE2PPS=0x0A;
  4481  00143C  0E0A               	movlw	10
  4482  00143E  010E               	movlb	14	; () banked
  4483  001440  6F74               	movwf	116,b	;volatile
  4484                           
  4485                           ;dc_motor.c: 40:     RC7PPS=0x0B;
  4486  001442  0E0B               	movlw	11
  4487  001444  6F69               	movwf	105,b	;volatile
  4488  001446                     
  4489                           ; BSR set to: 14
  4490                           ;dc_motor.c: 43:     clicker2buttons_init();
  4491  001446  EC69  F00B         	call	_clicker2buttons_init	;wreg free
  4492  00144A                     
  4493                           ;dc_motor.c: 44:     clicker2LEDs_init();
  4494  00144A  EC84  F00B         	call	_clicker2LEDs_init	;wreg free
  4495  00144E                     
  4496                           ;dc_motor.c: 45:     buggyLEDs_init();
  4497  00144E  EC4D  F00B         	call	_buggyLEDs_init	;wreg free
  4498  001452  0012               	return		;funcret
  4499  001454                     __end_of_DCmotors_init:
  4500                           	callstack 0
  4501                           
  4502 ;; *************** function _clicker2buttons_init *****************
  4503 ;; Defined at:
  4504 ;;		line 74 in file "dc_motor.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      void 
  4511 ;; Registers used:
  4512 ;;		None
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4522 ;;Total ram usage:        0 bytes
  4523 ;; Hardware stack levels used: 1
  4524 ;; Hardware stack levels required when called: 5
  4525 ;; This function calls:
  4526 ;;		Nothing
  4527 ;; This function is called by:
  4528 ;;		_DCmotors_init
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text29
  4533  0016D2                     __ptext29:
  4534                           	callstack 0
  4535  0016D2                     _clicker2buttons_init:
  4536                           	callstack 24
  4537  0016D2                     
  4538                           ;dc_motor.c: 77:     TRISFbits.TRISF2=1;
  4539  0016D2  8486               	bsf	134,2,c	;volatile
  4540                           
  4541                           ;dc_motor.c: 78:     TRISFbits.TRISF3=1;
  4542  0016D4  8686               	bsf	134,3,c	;volatile
  4543                           
  4544                           ;dc_motor.c: 79:     ANSELFbits.ANSELF2=0;
  4545  0016D6  010E               	movlb	14	; () banked
  4546  0016D8  95B4               	bcf	180,2,b	;volatile
  4547                           
  4548                           ;dc_motor.c: 80:     ANSELFbits.ANSELF3=0;
  4549  0016DA  97B4               	bcf	180,3,b	;volatile
  4550  0016DC                     
  4551                           ; BSR set to: 14
  4552  0016DC  0012               	return		;funcret
  4553  0016DE                     __end_of_clicker2buttons_init:
  4554                           	callstack 0
  4555                           
  4556 ;; *************** function _clicker2LEDs_init *****************
  4557 ;; Defined at:
  4558 ;;		line 86 in file "dc_motor.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		None
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4576 ;;Total ram usage:        0 bytes
  4577 ;; Hardware stack levels used: 1
  4578 ;; Hardware stack levels required when called: 5
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_DCmotors_init
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text30
  4587  001708                     __ptext30:
  4588                           	callstack 0
  4589  001708                     _clicker2LEDs_init:
  4590                           	callstack 24
  4591  001708                     
  4592                           ;dc_motor.c: 88:     TRISDbits.TRISD7 = 0;
  4593  001708  9E84               	bcf	132,7,c	;volatile
  4594                           
  4595                           ;dc_motor.c: 89:     TRISHbits.TRISH3 = 0;
  4596  00170A  9688               	bcf	136,3,c	;volatile
  4597                           
  4598                           ;dc_motor.c: 91:     LATDbits.LATD7 = 0;
  4599  00170C  9E7C               	bcf	124,7,c	;volatile
  4600                           
  4601                           ;dc_motor.c: 92:     LATHbits.LATH3 = 0;
  4602  00170E  9680               	bcf	128,3,c	;volatile
  4603  001710  0012               	return		;funcret
  4604  001712                     __end_of_clicker2LEDs_init:
  4605                           	callstack 0
  4606                           
  4607 ;; *************** function _buggyLEDs_init *****************
  4608 ;; Defined at:
  4609 ;;		line 98 in file "dc_motor.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		None
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used: 1
  4629 ;; Hardware stack levels required when called: 5
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_DCmotors_init
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text31
  4638  00169A                     __ptext31:
  4639                           	callstack 0
  4640  00169A                     _buggyLEDs_init:
  4641                           	callstack 24
  4642  00169A                     
  4643                           ;dc_motor.c: 100:     TRISHbits.TRISH1 = 0;
  4644  00169A  9288               	bcf	136,1,c	;volatile
  4645                           
  4646                           ;dc_motor.c: 101:     TRISDbits.TRISD3 = 0;
  4647  00169C  9684               	bcf	132,3,c	;volatile
  4648                           
  4649                           ;dc_motor.c: 102:     TRISDbits.TRISD4 = 0;
  4650  00169E  9884               	bcf	132,4,c	;volatile
  4651                           
  4652                           ;dc_motor.c: 103:     TRISFbits.TRISF0 = 0;
  4653  0016A0  9086               	bcf	134,0,c	;volatile
  4654                           
  4655                           ;dc_motor.c: 104:     TRISHbits.TRISH0 = 0;
  4656  0016A2  9088               	bcf	136,0,c	;volatile
  4657                           
  4658                           ;dc_motor.c: 106:     LATHbits.LATH1 = 0;
  4659  0016A4  9280               	bcf	128,1,c	;volatile
  4660                           
  4661                           ;dc_motor.c: 107:     LATDbits.LATD3 = 0;
  4662  0016A6  967C               	bcf	124,3,c	;volatile
  4663                           
  4664                           ;dc_motor.c: 108:     LATDbits.LATD4 = 0;
  4665  0016A8  987C               	bcf	124,4,c	;volatile
  4666                           
  4667                           ;dc_motor.c: 109:     LATFbits.LATF0 = 0;
  4668  0016AA  907E               	bcf	126,0,c	;volatile
  4669                           
  4670                           ;dc_motor.c: 110:     LATHbits.LATH0 = 0;
  4671  0016AC  9080               	bcf	128,0,c	;volatile
  4672  0016AE  0012               	return		;funcret
  4673  0016B0                     __end_of_buggyLEDs_init:
  4674                           	callstack 0
  4675                           
  4676 ;; *************** function _ADC_init *****************
  4677 ;; Defined at:
  4678 ;;		line 8 in file "ADC.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;		None
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      void 
  4685 ;; Registers used:
  4686 ;;		wreg, status,2
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4696 ;;Total ram usage:        0 bytes
  4697 ;; Hardware stack levels used: 1
  4698 ;; Hardware stack levels required when called: 5
  4699 ;; This function calls:
  4700 ;;		Nothing
  4701 ;; This function is called by:
  4702 ;;		_main
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text32
  4707  001680                     __ptext32:
  4708                           	callstack 0
  4709  001680                     _ADC_init:
  4710                           	callstack 25
  4711  001680                     
  4712                           ;ADC.c: 10:     TRISFbits.TRISF6=1;
  4713  001680  8C86               	bsf	134,6,c	;volatile
  4714                           
  4715                           ;ADC.c: 11:     ANSELFbits.ANSELF6=1;
  4716  001682  010E               	movlb	14	; () banked
  4717  001684  8DB4               	bsf	180,6,b	;volatile
  4718                           
  4719                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  4720  001686  010F               	movlb	15	; () banked
  4721  001688  9958               	bcf	88,4,b	;volatile
  4722  00168A                     
  4723                           ; BSR set to: 15
  4724                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  4725  00168A  0EFC               	movlw	-4
  4726  00168C  1758               	andwf	88,f,b	;volatile
  4727                           
  4728                           ;ADC.c: 16:     ADPCH=0b101110;
  4729  00168E  0E2E               	movlw	46
  4730  001690  6F5F               	movwf	95,b	;volatile
  4731  001692                     
  4732                           ; BSR set to: 15
  4733                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  4734  001692  9460               	bcf	96,2,c	;volatile
  4735  001694                     
  4736                           ; BSR set to: 15
  4737                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  4738  001694  8860               	bsf	96,4,c	;volatile
  4739  001696                     
  4740                           ; BSR set to: 15
  4741                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  4742  001696  8E60               	bsf	96,7,c	;volatile
  4743  001698                     
  4744                           ; BSR set to: 15
  4745  001698  0012               	return		;funcret
  4746  00169A                     __end_of_ADC_init:
  4747                           	callstack 0
  4748                           
  4749 ;; *************** function _LowISR *****************
  4750 ;; Defined at:
  4751 ;;		line 75 in file "interrupts.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		None
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4767 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4769 ;;Total ram usage:        1 bytes
  4770 ;; Hardware stack levels used: 1
  4771 ;; Hardware stack levels required when called: 4
  4772 ;; This function calls:
  4773 ;;		Nothing
  4774 ;; This function is called by:
  4775 ;;		Interrupt level 1
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	intcodelo
  4780  000018                     __pintcodelo:
  4781                           	callstack 0
  4782  000018                     _LowISR:
  4783                           	callstack 22
  4784                           
  4785                           ; BSR set to: 15
  4786                           ;incstack = 0
  4787  000018  8044               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  4788  00001A  CFE0 F004          	movff	bsr,??_LowISR
  4789  00001E  C004  FFE0         	movff	??_LowISR,bsr
  4790  000022  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  4791  000024  0010               	retfie	
  4792  000026                     __end_of_LowISR:
  4793                           	callstack 0
  4794                           
  4795 ;; *************** function _HighISR *****************
  4796 ;; Defined at:
  4797 ;;		line 60 in file "interrupts.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;		None
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4815 ;;Total ram usage:        1 bytes
  4816 ;; Hardware stack levels used: 1
  4817 ;; Hardware stack levels required when called: 3
  4818 ;; This function calls:
  4819 ;;		_interrupts_clear
  4820 ;; This function is called by:
  4821 ;;		Interrupt level 2
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	intcode
  4826  000008                     __pintcode:
  4827                           	callstack 0
  4828  000008                     _HighISR:
  4829                           	callstack 22
  4830                           
  4831                           ;incstack = 0
  4832  000008  8244               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4833  00000A  EF6D  F00A         	goto	int_func
  4834                           
  4835                           	psect	intcode_body
  4836  0014DA                     __pintcode_body:
  4837                           	callstack 22
  4838  0014DA                     int_func:
  4839                           	callstack 22
  4840  0014DA                     
  4841                           ;interrupts.c: 61:     if (PIR0bits.INT1IF) {
  4842  0014DA  010E               	movlb	14	; () banked
  4843  0014DC  A333               	btfss	51,1,b	;volatile
  4844  0014DE  EF73  F00A         	goto	i2u213_41
  4845  0014E2  EF75  F00A         	goto	i2u213_40
  4846  0014E6                     i2u213_41:
  4847  0014E6  EF8C  F00A         	goto	i2l279
  4848  0014EA                     i2u213_40:
  4849  0014EA                     
  4850                           ; BSR set to: 14
  4851                           ;interrupts.c: 62:         card_flag = 1;
  4852  0014EA  0E01               	movlw	1
  4853  0014EC  6E43               	movwf	_card_flag^0,c	;volatile
  4854  0014EE                     
  4855                           ; BSR set to: 14
  4856                           ;interrupts.c: 63:         LATDbits.LATD7 = !LATDbits.LATD7;
  4857  0014EE  AE7C               	btfss	124,7,c	;volatile
  4858  0014F0  EF7C  F00A         	goto	i2u214_41
  4859  0014F4  EF80  F00A         	goto	i2u214_40
  4860  0014F8                     i2u214_41:
  4861  0014F8  6A03               	clrf	??_HighISR^0,c
  4862  0014FA  2A03               	incf	??_HighISR^0,f,c
  4863  0014FC  EF81  F00A         	goto	i2u215_48
  4864  001500                     i2u214_40:
  4865  001500  6A03               	clrf	??_HighISR^0,c
  4866  001502                     i2u215_48:
  4867  001502  3203               	rrcf	??_HighISR^0,f,c
  4868  001504  3203               	rrcf	??_HighISR^0,f,c
  4869  001506  507C               	movf	124,w,c	;volatile
  4870  001508  1803               	xorwf	??_HighISR^0,w,c
  4871  00150A  0B7F               	andlw	-129
  4872  00150C  1803               	xorwf	??_HighISR^0,w,c
  4873  00150E  6E7C               	movwf	124,c	;volatile
  4874  001510                     
  4875                           ;interrupts.c: 64:         interrupts_clear();
  4876  001510  EC58  F00B         	call	_interrupts_clear	;wreg free
  4877  001514                     
  4878                           ;interrupts.c: 65:         PIR0bits.INT1IF = 0;
  4879  001514  010E               	movlb	14	; () banked
  4880  001516  9333               	bcf	51,1,b	;volatile
  4881  001518                     i2l279:
  4882                           
  4883                           ; BSR set to: 14
  4884  001518  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4885  00151A  0011               	retfie		f
  4886  00151C                     __end_of_HighISR:
  4887                           	callstack 0
  4888                           
  4889 ;; *************** function _interrupts_clear *****************
  4890 ;; Defined at:
  4891 ;;		line 47 in file "interrupts.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      void 
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4909 ;;Total ram usage:        0 bytes
  4910 ;; Hardware stack levels used: 1
  4911 ;; Hardware stack levels required when called: 2
  4912 ;; This function calls:
  4913 ;;		i2_I2C_2_Master_Start
  4914 ;;		i2_I2C_2_Master_Stop
  4915 ;;		i2_I2C_2_Master_Write
  4916 ;; This function is called by:
  4917 ;;		_HighISR
  4918 ;;		_interrupts_init
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text35
  4923  0016B0                     __ptext35:
  4924                           	callstack 0
  4925  0016B0                     _interrupts_clear:
  4926                           	callstack 22
  4927  0016B0                     
  4928                           ;interrupts.c: 48:     I2C_2_Master_Start();
  4929  0016B0  EC8E  F00B         	call	i2_I2C_2_Master_Start	;wreg free
  4930                           
  4931                           ;interrupts.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  4932  0016B4  0E52               	movlw	82
  4933  0016B6  EC6F  F00B         	call	i2_I2C_2_Master_Write
  4934                           
  4935                           ;interrupts.c: 50:     I2C_2_Master_Write(0b11100110);
  4936  0016BA  0EE6               	movlw	230
  4937  0016BC  EC6F  F00B         	call	i2_I2C_2_Master_Write
  4938                           
  4939                           ;interrupts.c: 51:     I2C_2_Master_Stop();
  4940  0016C0  EC89  F00B         	call	i2_I2C_2_Master_Stop	;wreg free
  4941  0016C4  0012               	return		;funcret
  4942  0016C6                     __end_of_interrupts_clear:
  4943                           	callstack 0
  4944                           
  4945 ;; *************** function i2_I2C_2_Master_Write *****************
  4946 ;; Defined at:
  4947 ;;		line 69 in file "i2c.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  data_byte       1    wreg     unsigned char 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  data_byte       1    1[COMRAM] unsigned char 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;Total ram usage:        1 bytes
  4966 ;; Hardware stack levels used: 1
  4967 ;; Hardware stack levels required when called: 1
  4968 ;; This function calls:
  4969 ;;		i2_I2C_2_Master_Idle
  4970 ;; This function is called by:
  4971 ;;		_interrupts_clear
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text36
  4976  0016DE                     __ptext36:
  4977                           	callstack 0
  4978  0016DE                     i2_I2C_2_Master_Write:
  4979                           	callstack 22
  4980                           
  4981                           ;incstack = 0
  4982                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  4983  0016DE  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  4984  0016E0                     
  4985                           ;i2c.c: 69: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 70: {;i2c.c: 71:   I
      +                          2C_2_Master_Idle();
  4986  0016E0  ECD7  F00A         	call	i2_I2C_2_Master_Idle	;wreg free
  4987  0016E4                     
  4988                           ;i2c.c: 72:   SSP2BUF = data_byte;
  4989  0016E4  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  4990  0016E8  0012               	return		;funcret
  4991  0016EA                     __end_ofi2_I2C_2_Master_Write:
  4992                           	callstack 0
  4993                           
  4994 ;; *************** function i2_I2C_2_Master_Stop *****************
  4995 ;; Defined at:
  4996 ;;		line 59 in file "i2c.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5014 ;;Total ram usage:        0 bytes
  5015 ;; Hardware stack levels used: 1
  5016 ;; Hardware stack levels required when called: 1
  5017 ;; This function calls:
  5018 ;;		i2_I2C_2_Master_Idle
  5019 ;; This function is called by:
  5020 ;;		_interrupts_clear
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text37
  5025  001712                     __ptext37:
  5026                           	callstack 0
  5027  001712                     i2_I2C_2_Master_Stop:
  5028                           	callstack 22
  5029  001712                     
  5030                           ;i2c.c: 61:   I2C_2_Master_Idle();
  5031  001712  ECD7  F00A         	call	i2_I2C_2_Master_Idle	;wreg free
  5032  001716                     
  5033                           ;i2c.c: 62:   SSP2CON2bits.PEN = 1;
  5034  001716  010E               	movlb	14	; () banked
  5035  001718  85DA               	bsf	218,2,b	;volatile
  5036  00171A                     
  5037                           ; BSR set to: 14
  5038  00171A  0012               	return		;funcret
  5039  00171C                     __end_ofi2_I2C_2_Master_Stop:
  5040                           	callstack 0
  5041                           
  5042 ;; *************** function i2_I2C_2_Master_Start *****************
  5043 ;; Defined at:
  5044 ;;		line 39 in file "i2c.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      void 
  5051 ;; Registers used:
  5052 ;;		wreg, status,2, status,0, cstack
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5062 ;;Total ram usage:        0 bytes
  5063 ;; Hardware stack levels used: 1
  5064 ;; Hardware stack levels required when called: 1
  5065 ;; This function calls:
  5066 ;;		i2_I2C_2_Master_Idle
  5067 ;; This function is called by:
  5068 ;;		_interrupts_clear
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           	psect	text38
  5073  00171C                     __ptext38:
  5074                           	callstack 0
  5075  00171C                     i2_I2C_2_Master_Start:
  5076                           	callstack 22
  5077  00171C                     
  5078                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5079  00171C  ECD7  F00A         	call	i2_I2C_2_Master_Idle	;wreg free
  5080  001720                     
  5081                           ;i2c.c: 42:   SSP2CON2bits.SEN = 1;
  5082  001720  010E               	movlb	14	; () banked
  5083  001722  81DA               	bsf	218,0,b	;volatile
  5084  001724                     
  5085                           ; BSR set to: 14
  5086  001724  0012               	return		;funcret
  5087  001726                     __end_ofi2_I2C_2_Master_Start:
  5088                           	callstack 0
  5089                           
  5090 ;; *************** function i2_I2C_2_Master_Idle *****************
  5091 ;; Defined at:
  5092 ;;		line 30 in file "i2c.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5110 ;;Total ram usage:        1 bytes
  5111 ;; Hardware stack levels used: 1
  5112 ;; This function calls:
  5113 ;;		Nothing
  5114 ;; This function is called by:
  5115 ;;		i2_I2C_2_Master_Start
  5116 ;;		i2_I2C_2_Master_Stop
  5117 ;;		i2_I2C_2_Master_Write
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text39
  5122  0015AE                     __ptext39:
  5123                           	callstack 0
  5124  0015AE                     i2_I2C_2_Master_Idle:
  5125                           	callstack 22
  5126  0015AE                     i2l30:
  5127  0015AE  010E               	movlb	14	; () banked
  5128  0015B0  B5D8               	btfsc	216,2,b	;volatile
  5129  0015B2  EFDD  F00A         	goto	i2u128_41
  5130  0015B6  EFDF  F00A         	goto	i2u128_40
  5131  0015BA                     i2u128_41:
  5132  0015BA  EFD7  F00A         	goto	i2l30
  5133  0015BE                     i2u128_40:
  5134  0015BE                     
  5135                           ; BSR set to: 14
  5136  0015BE  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  5137  0015C2  0E1F               	movlw	31
  5138  0015C4  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  5139  0015C6  A4D8               	btfss	status,2,c
  5140  0015C8  EFE8  F00A         	goto	i2u129_41
  5141  0015CC  EFEA  F00A         	goto	i2u129_40
  5142  0015D0                     i2u129_41:
  5143  0015D0  EFD7  F00A         	goto	i2l30
  5144  0015D4                     i2u129_40:
  5145  0015D4                     
  5146                           ; BSR set to: 14
  5147  0015D4  0012               	return		;funcret
  5148  0015D6                     __end_ofi2_I2C_2_Master_Idle:
  5149                           	callstack 0
  5150  0000                     
  5151                           	psect	rparam
  5152  0000                     
  5153                           	psect	temp
  5154  000044                     btemp:
  5155                           	callstack 0
  5156  000044                     	ds	1
  5157  0000                     int$flags	set	btemp
  5158  0000                     wtemp8	set	btemp+1
  5159  0000                     ttemp5	set	btemp+1
  5160  0000                     ttemp6	set	btemp+4
  5161  0000                     ttemp7	set	btemp+8
  5162                           
  5163                           	psect	idloc
  5164                           
  5165                           ;Config register IDLOC0 @ 0x200000
  5166                           ;	unspecified, using default values
  5167  200000                     	org	2097152
  5168  200000  0FFF               	dw	4095
  5169                           
  5170                           ;Config register IDLOC1 @ 0x200002
  5171                           ;	unspecified, using default values
  5172  200002                     	org	2097154
  5173  200002  0FFF               	dw	4095
  5174                           
  5175                           ;Config register IDLOC2 @ 0x200004
  5176                           ;	unspecified, using default values
  5177  200004                     	org	2097156
  5178  200004  0FFF               	dw	4095
  5179                           
  5180                           ;Config register IDLOC3 @ 0x200006
  5181                           ;	unspecified, using default values
  5182  200006                     	org	2097158
  5183  200006  0FFF               	dw	4095
  5184                           
  5185                           ;Config register IDLOC4 @ 0x200008
  5186                           ;	unspecified, using default values
  5187  200008                     	org	2097160
  5188  200008  0FFF               	dw	4095
  5189                           
  5190                           ;Config register IDLOC5 @ 0x20000A
  5191                           ;	unspecified, using default values
  5192  20000A                     	org	2097162
  5193  20000A  0FFF               	dw	4095
  5194                           
  5195                           ;Config register IDLOC6 @ 0x20000C
  5196                           ;	unspecified, using default values
  5197  20000C                     	org	2097164
  5198  20000C  0FFF               	dw	4095
  5199                           
  5200                           ;Config register IDLOC7 @ 0x20000E
  5201                           ;	unspecified, using default values
  5202  20000E                     	org	2097166
  5203  20000E  0FFF               	dw	4095
  5204                           
  5205                           	psect	config
  5206                           
  5207                           ;Config register CONFIG1L @ 0x300000
  5208                           ;	External Oscillator mode Selection bits
  5209                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5210                           ;	Power-up default value for COSC bits
  5211                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5212  300000                     	org	3145728
  5213  300000  AA                 	db	170
  5214                           
  5215                           ;Config register CONFIG1H @ 0x300001
  5216                           ;	unspecified, using default values
  5217                           ;	Clock Out Enable bit
  5218                           ;	CLKOUTEN = 0x1, unprogrammed default
  5219                           ;	Clock Switch Enable bit
  5220                           ;	CSWEN = 0x1, unprogrammed default
  5221                           ;	Fail-Safe Clock Monitor Enable bit
  5222                           ;	FCMEN = 0x1, unprogrammed default
  5223  300001                     	org	3145729
  5224  300001  FF                 	db	255
  5225                           
  5226                           ;Config register CONFIG2L @ 0x300002
  5227                           ;	unspecified, using default values
  5228                           ;	Master Clear Enable bit
  5229                           ;	MCLRE = 0x1, unprogrammed default
  5230                           ;	Power-up Timer Enable bit
  5231                           ;	PWRTE = 0x1, unprogrammed default
  5232                           ;	Low-power BOR enable bit
  5233                           ;	LPBOREN = 0x1, unprogrammed default
  5234                           ;	Brown-out Reset Enable bits
  5235                           ;	BOREN = 0x3, unprogrammed default
  5236  300002                     	org	3145730
  5237  300002  FF                 	db	255
  5238                           
  5239                           ;Config register CONFIG2H @ 0x300003
  5240                           ;	unspecified, using default values
  5241                           ;	Brown Out Reset Voltage selection bits
  5242                           ;	BORV = 0x3, unprogrammed default
  5243                           ;	ZCD Disable bit
  5244                           ;	ZCD = 0x1, unprogrammed default
  5245                           ;	PPSLOCK bit One-Way Set Enable bit
  5246                           ;	PPS1WAY = 0x1, unprogrammed default
  5247                           ;	Stack Full/Underflow Reset Enable bit
  5248                           ;	STVREN = 0x1, unprogrammed default
  5249                           ;	Debugger Enable bit
  5250                           ;	DEBUG = 0x1, unprogrammed default
  5251                           ;	Extended Instruction Set Enable bit
  5252                           ;	XINST = 0x1, unprogrammed default
  5253  300003                     	org	3145731
  5254  300003  FF                 	db	255
  5255                           
  5256                           ;Config register CONFIG3L @ 0x300004
  5257                           ;	WDT Period Select bits
  5258                           ;	WDTCPS = 0x1F, unprogrammed default
  5259                           ;	WDT operating mode
  5260                           ;	WDTE = OFF, WDT Disabled
  5261  300004                     	org	3145732
  5262  300004  9F                 	db	159
  5263                           
  5264                           ;Config register CONFIG3H @ 0x300005
  5265                           ;	unspecified, using default values
  5266                           ;	WDT Window Select bits
  5267                           ;	WDTCWS = 0x7, unprogrammed default
  5268                           ;	WDT input clock selector
  5269                           ;	WDTCCS = 0x7, unprogrammed default
  5270  300005                     	org	3145733
  5271  300005  FF                 	db	255
  5272                           
  5273                           ;Config register CONFIG4L @ 0x300006
  5274                           ;	unspecified, using default values
  5275                           ;	Write Protection Block 0
  5276                           ;	WRT0 = 0x1, unprogrammed default
  5277                           ;	Write Protection Block 1
  5278                           ;	WRT1 = 0x1, unprogrammed default
  5279                           ;	Write Protection Block 2
  5280                           ;	WRT2 = 0x1, unprogrammed default
  5281                           ;	Write Protection Block 3
  5282                           ;	WRT3 = 0x1, unprogrammed default
  5283                           ;	Write Protection Block 3
  5284                           ;	WRT4 = 0x1, unprogrammed default
  5285                           ;	Write Protection Block 3
  5286                           ;	WRT5 = 0x1, unprogrammed default
  5287                           ;	Write Protection Block 3
  5288                           ;	WRT6 = 0x1, unprogrammed default
  5289                           ;	Write Protection Block 3
  5290                           ;	WRT7 = 0x1, unprogrammed default
  5291  300006                     	org	3145734
  5292  300006  FF                 	db	255
  5293                           
  5294                           ;Config register CONFIG4H @ 0x300007
  5295                           ;	unspecified, using default values
  5296                           ;	Configuration Register Write Protection bit
  5297                           ;	WRTC = 0x1, unprogrammed default
  5298                           ;	Boot Block Write Protection bit
  5299                           ;	WRTB = 0x1, unprogrammed default
  5300                           ;	Data EEPROM Write Protection bit
  5301                           ;	WRTD = 0x1, unprogrammed default
  5302                           ;	Scanner Enable bit
  5303                           ;	SCANE = 0x1, unprogrammed default
  5304                           ;	Low Voltage Programming Enable bit
  5305                           ;	LVP = 0x1, unprogrammed default
  5306  300007                     	org	3145735
  5307  300007  FF                 	db	255
  5308                           
  5309                           ;Config register CONFIG5L @ 0x300008
  5310                           ;	unspecified, using default values
  5311                           ;	UserNVM Program Memory Code Protection bit
  5312                           ;	CP = 0x1, unprogrammed default
  5313                           ;	DataNVM Memory Code Protection bit
  5314                           ;	CPD = 0x1, unprogrammed default
  5315  300008                     	org	3145736
  5316  300008  FF                 	db	255
  5317                           
  5318                           ;Config register CONFIG5H @ 0x300009
  5319                           ;	unspecified, using default values
  5320  300009                     	org	3145737
  5321  300009  FF                 	db	255
  5322                           
  5323                           ;Config register CONFIG6L @ 0x30000A
  5324                           ;	unspecified, using default values
  5325                           ;	Table Read Protection Block 0
  5326                           ;	EBTR0 = 0x1, unprogrammed default
  5327                           ;	Table Read Protection Block 1
  5328                           ;	EBTR1 = 0x1, unprogrammed default
  5329                           ;	Table Read Protection Block 2
  5330                           ;	EBTR2 = 0x1, unprogrammed default
  5331                           ;	Table Read Protection Block 3
  5332                           ;	EBTR3 = 0x1, unprogrammed default
  5333                           ;	Table Read Protection Block 4
  5334                           ;	EBTR4 = 0x1, unprogrammed default
  5335                           ;	Table Read Protection Block 5
  5336                           ;	EBTR5 = 0x1, unprogrammed default
  5337                           ;	Table Read Protection Block 6
  5338                           ;	EBTR6 = 0x1, unprogrammed default
  5339                           ;	Table Read Protection Block 7
  5340                           ;	EBTR7 = 0x1, unprogrammed default
  5341  30000A                     	org	3145738
  5342  30000A  FF                 	db	255
  5343                           
  5344                           ;Config register CONFIG6H @ 0x30000B
  5345                           ;	unspecified, using default values
  5346                           ;	Boot Block Table Read Protection bit
  5347                           ;	EBTRB = 0x1, unprogrammed default
  5348  30000B                     	org	3145739
  5349  30000B  FF                 	db	255
  5350                           tosu	equ	0xFFF
  5351                           tosh	equ	0xFFE
  5352                           tosl	equ	0xFFD
  5353                           stkptr	equ	0xFFC
  5354                           pclatu	equ	0xFFB
  5355                           pclath	equ	0xFFA
  5356                           pcl	equ	0xFF9
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           indf0	equ	0xFEF
  5364                           postinc0	equ	0xFEE
  5365                           postdec0	equ	0xFED
  5366                           preinc0	equ	0xFEC
  5367                           plusw0	equ	0xFEB
  5368                           fsr0h	equ	0xFEA
  5369                           fsr0l	equ	0xFE9
  5370                           wreg	equ	0xFE8
  5371                           indf1	equ	0xFE7
  5372                           postinc1	equ	0xFE6
  5373                           postdec1	equ	0xFE5
  5374                           preinc1	equ	0xFE4
  5375                           plusw1	equ	0xFE3
  5376                           fsr1h	equ	0xFE2
  5377                           fsr1l	equ	0xFE1
  5378                           bsr	equ	0xFE0
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           preinc2	equ	0xFDC
  5383                           plusw2	equ	0xFDB
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     26     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    read_card_RGB@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    read_card_RGB@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    turnRight@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    turnRight@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    turnLeft@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    turnLeft@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverse@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    reverse@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    reverse@mR	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverse@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    reverse@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    reverse@mL	PTR struct . size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    setMotorPWM@m	PTR struct . size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    S256$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S256$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 


Critical Paths under _main in COMRAM

    _main->_read_card_RGB
    _read_card_RGB->_turnLeft
    _read_card_RGB->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    ___xxtofl->___lwdiv
    _colorclick_readColour->_colorclick_readBlue
    _colorclick_readColour->_colorclick_readClear
    _colorclick_readColour->_colorclick_readGreen
    _colorclick_readColour->_colorclick_readRed
    _colorclick_readRed->_I2C_2_Master_Read
    _colorclick_readGreen->_I2C_2_Master_Read
    _colorclick_readClear->_I2C_2_Master_Read
    _colorclick_readBlue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _colorclick_init->_colorclick_writetoaddr
    _colorclick_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _interrupts_clear->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   29074
                                              0 BANK0     26    26      0
                           _ADC_init
                      _DCmotors_init
                        _USART4_init
                    _colorclick_init
              _colorclick_readColour
                      _read_card_RGB
 ---------------------------------------------------------------------------------
 (1) _read_card_RGB                                       24    12     12   26275
                                             36 COMRAM    24    12     12
                             ___flge
                            ___lwdiv
                           ___xxtofl
                            _reverse
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            7     2      5    5128
                                             29 COMRAM     7     2      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             7     2      5    4318
                                             29 COMRAM     7     2      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    4756
                                             29 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              6     2      4    3496
                                             29 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                         11     9      2    2888
                                             18 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     472
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     685
                                             10 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     746
                                             11 COMRAM    14    10      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     781
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4586
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _colorclick_readColour                                8     0      8     891
                                             15 COMRAM     8     0      8
                _colorclick_readBlue
               _colorclick_readClear
               _colorclick_readGreen
                 _colorclick_readRed
 ---------------------------------------------------------------------------------
 (2) _colorclick_readRed                                   7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _colorclick_readGreen                                 7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _colorclick_readClear                                 7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _colorclick_readBlue                                  7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _colorclick_init                                      1     1      0     996
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
          _colorclick_toggleClearLED
             _colorclick_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _colorclick_writetoaddr                               2     1      1     903
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _colorclick_toggleClearLED                            1     1      0      93
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART4_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCmotors_init                                        1     1      0      31
                                              4 COMRAM     1     1      0
                     _buggyLEDs_init
                  _clicker2LEDs_init
               _clicker2buttons_init
 ---------------------------------------------------------------------------------
 (2) _clicker2buttons_init                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clicker2LEDs_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                               1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              1     1      0      22
                                              2 COMRAM     1     1      0
                   _interrupts_clear
 ---------------------------------------------------------------------------------
 (7) _interrupts_clear                                     0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Idle                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _DCmotors_init
     _buggyLEDs_init
     _clicker2LEDs_init
     _clicker2buttons_init
   _USART4_init
   _colorclick_init
     _I2C_2_Master_Init
     _colorclick_toggleClearLED
     _colorclick_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _colorclick_readColour
     _colorclick_readBlue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _colorclick_readClear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _colorclick_readGreen
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _colorclick_readRed
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _read_card_RGB
     ___flge
     ___lwdiv
     ___xxtofl
       ___lwdiv (ARG)
     _reverse
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnRight
       _setMotorPWM

 _LowISR (ROOT)

 _HighISR (ROOT)
   _interrupts_clear
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      6E       5       68.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B1       8        0.0%
DATA                 0      0      B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Dec 11 15:55:17 2021

        __end_of_colorclick_readRed 1314         __end_of_colorclick_readBlue 1404  
      __end_of_colorclick_readClear 13B4        __end_of_colorclick_readGreen 1364  
                                l30 1586                                  l33 15AC  
                                l42 16FC                                  l27 1584  
                                l36 1706                                  l45 16D0  
                                l39 16F2                                  l48 14D8  
                                l96 0FEA               __end_of_DCmotors_init 1454  
                      ___awdiv@sign 0010                                  bsr 000FE0  
               ___wmul@multiplicand 0007      __size_of_colorclick_readColour 0044  
     __end_of_colorclick_readColour 1498              _colorclick_writetoaddr 1640  
                               l204 11B2                                 l220 0AF4  
                               l205 11B4                                 l213 0A06  
                               l230 08DC                                 l215 0AC2  
                               l224 07F0                                 l209 09D6  
                               l162 1452                                 l234 090C  
                               l219 0AF2                                 l235 090E  
                               l172 16DC                                 l228 0820  
                               l175 1710                                 l344 167E  
                               l440 1312                                 l192 121E  
                               l169 0CC8                                 l178 16AE  
                               l434 163E                                 l443 1362  
                               l428 155A                                 l452 1496  
                               l437 165E                                 l197 124E  
                               l446 1402                                 l449 13B2  
                               l299 1698                                 l484 0728  
                               l718 111A                                 l487 15FA  
                               l752 0F3A                                 l757 0F80  
                               l985 12C2                                 l978 12BA  
                               wreg 000FE8                     _colorclick_init 151C  
                              l1142 0D20                                l3000 031E  
                              l1145 0E7C                                l3010 042A  
                              l3002 0350                                l1156 0E14  
                              l3020 0536                                l3012 045C  
                              l3004 0382                                l1149 0DB8  
                              l3030 062E                                l3022 0568  
                              l3014 048E                                l3006 03B4  
                              l3040 06F8                                l3032 065E  
                              l3024 0598                                l3016 04D2  
                              l3008 03F8                                l3042 06FC  
                              l3034 0690                                l3026 05CA  
                              l3018 0504                                l3050 0F92  
                              l3044 0714                                l3036 06C2  
                              l3028 05FC                                l3060 0FBA  
                              l3052 0F96                                l3070 0FD6  
                              l3062 0FBE                                l3054 0F9C  
                              l3046 0F82                                l2600 110A  
                              l3080 102A                                l3072 0FDE  
                              l3064 0FC6                                l3056 0FA0  
                              l3048 0F8E                                l2610 16EA  
                              l2602 1112                                l3074 0FE2  
                              l3066 0FCA                                l3058 0FA6  
                              l2620 16CC                                l2612 16EE  
                              l2700 0962                                l3076 0FF8  
                              l3068 0FCE                                l2606 16FE  
                              l2614 16F4                                l2630 14D4  
                              l2622 149A                                l2710 09B2  
                              l2702 097A                                l3078 1006  
                              l2552 1586                                l2608 1702  
                              l2616 16F8                                l2632 14D6  
                              l2624 149E                                l2800 1364  
                              l2640 0B74                                l2720 0A4E  
                              l2712 09BE                                l2704 0984  
                              l2650 155C                                l2554 1596  
                              l2618 16C8                                l2626 14A6  
                              l2802 13AA                                l2810 0EBC  
                              l2570 1076                                l2562 1058  
                              l2642 0BBA                                l2730 0A9E  
                              l2722 0A66                                l2714 09EE  
                              l2706 099C                                l2900 1692  
                              l2660 1572                                l2652 1566  
                              l2628 14AE                                l2820 0F28  
                              l2812 0EEA                                l2580 10AA  
                              l2572 1084                                l2564 105C  
                              l2556 15D6                                l2644 0BDA  
                              l2636 0AF6                                l2732 0AAA  
                              l2724 0A70                                l2708 09A6  
                              l2716 0A0C                                l2740 075E  
                              l2902 1694                                l2662 16D2  
                              l2654 156C                                l2910 152A  
                              l2822 0F78                                l2814 0EFA  
                              l2806 0E7E                                l2830 1258  
                              l2590 10E4                                l2582 10B2  
                              l2574 108C                                l2566 106A  
                              l2558 15F2                                l2646 0BF6  
                              l2638 0B12                                l2670 11DA  
                              l2734 0ADA                                l2726 0A88  
                              l2718 0A30                                l2750 07C0  
                              l2742 077C                                l2904 1696  
                              l2664 1708                                l2656 156E  
                              l2920 1552                                l2912 153A  
                              l2824 0F7E                                l2816 0F08  
                              l2808 0EAC                                l2840 128E  
                              l2832 126A                                l2592 10EC  
                              l2584 10BA                                l2576 1090  
                              l2568 1072                                l2648 0C60  
                              l2672 11EE                                l2680 111C  
                              l2728 0A92                                l2760 084A  
                              l2752 07CC                                l2744 0794  
                              l2736 072A                                l2666 169A  
                              l2930 1420                                l2658 1570  
                              l2922 1554                                l2914 1544  
                              l2906 151C                                l2818 0F1A  
                              l2842 12A4                                l2834 1272  
                              l2850 0CCC                                l2594 10EE  
                              l2586 10C8                                l2578 1098  
                              l2674 11FA                                l2682 1122  
                              l2690 1182                                l2770 08AC  
                              l2762 0868                                l2754 07D8  
                              l2746 079E                                l2738 073A  
                              l2940 142A                                l2932 1422  
                              l2924 1406                                l2780 1620  
                              l2916 154E                                l2908 1520  
                              l2844 12AC                                l2836 127A  
                              l2828 1250                                l2852 0CDC  
                              l2596 10F4                                l2588 10CE  
                              l2676 1206                                l2668 11B6  
                              l2692 119A                                l2684 1152  
                              l2772 08B8                                l2764 0880  
                              l2756 0808                                l2748 07B6  
                              l2950 1446                                l2942 142C  
                              l2934 1424                                l2926 141A  
                              l2918 1550                                l2790 135A  
                              l2782 12C4                                l2846 12AE  
                              l2838 1288                                l2870 0DA2  
                              l2862 0D5A                                l2854 0CEA  
                              l2598 10FA                                l2678 1236  
                              l2686 115E                                l2694 0910  
                              l2774 08C4                                l2766 088A  
                              l2758 0826                                l2952 144A  
                              l2944 142E                                l2936 1426  
                              l2928 141E                                l2960 166C  
                              l2784 130A                                l2848 12B4  
                              l2880 0E22                                l2872 0DAE  
                              l2864 0D62                                l2856 0D30  
                              l2688 116A                                l2696 0920  
                              l2776 08F4                                l2768 08A2  
                              l2954 144E                                l2946 1438  
                              l2938 1428                                l2962 166E  
                              l2778 1642                                l2794 13B4  
                              l2970 1454                                l2890 0E6A  
                              l2882 0E24                                l2874 0DEA  
                              l2866 0D6E                                l2858 0D46  
                              l2698 0944                                l2948 143A  
                              l2964 1678                                l2956 1660  
                              l2796 13FA                                l2788 1314  
                              l2972 1484                                l2892 0E6C  
                              l2884 0E28                                l2876 0DF6  
                              l2868 0DA0                                l2980 0130  
                              l2966 167A                                l2958 166A  
                              l2886 0E4C                                l2878 0E04  
                              l2990 0228                                l2982 0162  
                              l2896 1680                                l2968 167C  
                              l2888 0E5C                                l2992 0258  
                              l2984 0192                                l2976 002A  
                              l2898 168A                                l2994 028A  
                              l2986 01C4                                l2978 00FE  
                              l2996 02BC                                l2988 01F6  
                              l2998 02EE                                u2200 1596  
                              u3000 048E                                u2201 1592  
                              u3001 048A                                u2210 15AC  
                              u3010 0504                                u2211 15A8  
                              u3011 0500                                u2220 106A  
                              u2300 0B12                                u3020 0536  
                              u3100 0FF8                                u2221 1066  
                              u2301 0B0E                                u3021 0532  
                              u3101 0FF4                                u2230 1084  
                              u2310 0BF6                                u3030 0568  
                              u3110 1006                                u2231 1080  
                              u2311 0BF2                                u3031 0564  
                              u3111 1002                                u2240 10AA  
                              u3040 05CA                        _BAUD4CONbits 000EE9  
                              u2241 10A6                                u3041 05C6  
                              u3121 1010                                _LATE 000F7D  
                              u2250 10C8                                u2410 097A  
                              u3050 05FC                                u2251 10C4  
                              u2411 0976                                u3051 05F8  
                              u3131 1022                                _LATG 000F7F  
                              u2260 10E4                                u2324 0C50  
                              u2340 1236                                u2500 0AF2  
                              u2420 099C                                u3060 062E  
                              u2261 10E0                                u2325 0C4C  
                              u2341 1232                                u2501 0AEE  
                              u2421 0998                                u3061 062A  
                              u3141 1034                                u2270 110A  
                              u2334 0CBA                                u2350 124E  
                              u2430 09EE                                u2510 073A  
                              u3070 0690                                u2271 1106  
                              u2335 0CB6                                u2351 124A  
                              u3207 0AB4                                u2431 09EA  
                              u2511 0736                                u3071 068C  
                              u2280 14C2                                u2360 119A  
                              u2440 0A06                                u2408 0958  
                              u2600 0880                                u2520 0770  
                              u3080 06C2                                u2281 14BA  
                              u2361 1196                                u3217 1174  
                              u2441 0A02                                u2601 087C  
                              u2521 0768                                u3081 06BE  
                              u2370 11B2                                u2450 0A42  
                              u2610 08A2                                u3090 06F4  
                              _T2PR 000FBC                                u3227 1210  
                              u2371 11AE                                u2451 0A3A  
                              u2611 089E                                u3091 06F0  
                              u2700 0F28                                u2380 0920  
                              u2620 08F4                                u2540 0794  
                              u3237 1530                                u2701 0F24  
                              u2381 091C                                u2621 08F0  
                              u2541 0790                                u2710 0F78  
                              u2470 0A66                                u2390 0956  
                              u2630 090C                                u2550 07B6  
                              u2711 0F74                                u2471 0A62  
                              u2391 094E                                u2631 0908  
                              u2551 07B2                                u2720 126A  
                              u2800 0E04                                u2480 0A88  
                              u2560 0808                                u2721 1266  
                              u2801 0E00                                u2481 0A84  
                              u2561 0804                                u3177 07E2  
                              u2298 14C4                                u2730 1288  
                              u2810 0E14                                u2490 0ADA  
                              u2570 0820                                u2538 0772  
                              u2731 1284                                u2811 0E10  
                              u2491 0AD6                                u3187 08CE  
                              u2571 081C                                u2740 12A4  
                              u2820 0E22                                u2468 0A44  
                              u2580 085C                                u2900 01F6  
                              u2645 1628                                u2741 12A0  
                              u2821 0E1E                                u3197 09C8  
                              u2581 0854                                u2901 01F2  
                              u2646 162A                                u2670 0EAC  
                              u2830 0E5C                                u2750 0CDC  
                              u2910 0228                                u2655 1632  
                              u2671 0EA8                                u2831 0E58  
                              u2751 0CD8                                u2911 0224  
                              u2656 1634                                u2680 0EEA  
                              u2840 0E6A                                u2760 0CEA  
                              u2920 028A                                u2665 163C  
                              u2681 0EE6                                u2841 0E66  
                              u2761 0CE6                                u2921 0286  
                              u2666 163E                                u2690 0F08  
                              u2770 0D46                                u2930 02BC  
                              u2851 148E                                u2691 0F04  
                              u2771 0D42                                u2931 02B8  
                              u2780 0D9C                                u2940 02EE  
                              u2860 00FE                                u2781 0D98  
                              u2941 02EA                                u2861 00FA  
                              u2790 0DE6                                u2598 085E  
                              u2950 0350                                u2870 0130  
                              u2791 0DE2                                u2951 034C  
                              u2871 012C                                u2960 0382  
                              u2880 0162                                u2961 037E  
                              u2881 015E                                u2970 03B4  
                              u2890 01C4                                u2971 03B0  
                              u2891 01C0                                u2980 042A  
                              u2981 0426                                i2l30 15AE  
                              u2990 045C                                u2991 0458  
                              i2l33 15D4                                i2l42 171A  
                              i2l36 1724                                i2l45 16E8  
     colorclick_writetoaddr@address 0008                         main@current 00B4  
 __end_of_colorclick_toggleClearLED 1640                                _main 0F82  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              indf1 000FE7                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 0044                                _stop 111C  
                              prodh 000FF4                                prodl 000FF3  
                              start 0026                    __end_of_ADC_init 169A  
                   __end_of_HighISR 151C                        ___param_bank 000000  
            ??_clicker2buttons_init 0005                               ?_main 0001  
                             _ADPCH 000F5F                     __end_of___awdiv 111C  
                             ?_stop 001E                     ___awdiv@divisor 000D  
                   __end_of___lwdiv 12C4                               i1l284 001E  
                             i2l273 16C4                               i2l279 1518  
                   ___awdiv@counter 000F            __end_of_interrupts_clear 16C6  
        __end_of_I2C_2_Master_Start 1708          __end_of_I2C_2_Master_Write 16D2  
                 _clicker2LEDs_init 1708                     __end_of_reverse 1250  
                             plusw0 000FEB                               plusw2 000FDB  
            DCmotors_init@PWMperiod 0005                  ?_clicker2LEDs_init 0001  
                             ttemp5 0045                               ttemp6 0048  
                             ttemp7 004C                               status 000FD8  
                             wtemp8 0045               _I2C_2_Master_RepStart 16EA  
                   __initialization 15FC                 ??_clicker2LEDs_init 0005  
                      __end_of_main 1058                        __end_of_stop 11B6  
                            ??_main 003D             __end_of_colorclick_init 155C  
                            ??_stop 0022                       __activetblptr 000000  
      __size_ofi2_I2C_2_Master_Idle 0028        __size_ofi2_I2C_2_Master_Stop 000A  
         __end_of_clicker2LEDs_init 1712                        ?_setMotorPWM 0013  
                            _ADRESH 000F64                    ___awdiv@dividend 000B  
              _colorclick_readClear 1364                              _RC0PPS 000E62  
                            _RC4REG 000EE3                              _RE2PPS 000E74  
                            _RD5PPS 000E6F                              _RC7PPS 000E69  
                            _RD6PPS 000E70                              i2l2230 1720  
                            i2l2232 1712                              i2l2234 1716  
                            i2l2228 171C                              i2l2236 16E0  
                            i2l2238 16E4                              i2l2390 16B0  
                            i2l2470 14DA                _colorclick_readGreen 1314  
                            i2l2472 14EA                              i2l2474 14EE  
                            i2l2476 1510                              i2l2478 1514  
                            i2l1980 15BE                              i2l1978 15AE  
                         ??_HighISR 0003                              _RX4PPS 000E15  
                            _TX4REG 000EE4                    __end_of___xxtofl 0E7E  
                            _LowISR 0018                              ___flge 0E7E  
                            ___wmul 15D6                           ??___awdiv 000F  
                         ??___lwdiv 0009                    ??_buggyLEDs_init 0005  
                            clear_0 1602                              clear_1 160E  
                  ___awdiv@quotient 0011              __size_of_read_card_RGB 0700  
                            isa$std 000001     colorclick_toggleClearLED@toggle 0005  
                         ?_ADC_init 0001                           ??_reverse 0022  
                            stop@mL 001E                              stop@mR 0020  
                      ?_USART4_init 0001               ?_colorclick_readClear 0009  
             ?_colorclick_readGreen 0009                    __end_of_turnLeft 0AF6  
                        ___flge@ff1 0005                          ___flge@ff2 0009  
                      ___xxtofl@arg 0016                        ___xxtofl@exp 0015  
                      ___xxtofl@val 000C                          __accesstop 0060  
           __end_of__initialization 1614              ?_I2C_2_Master_RepStart 0001  
                     ___rparam_used 000001                      __pcstackCOMRAM 0001  
           ?_colorclick_writetoaddr 0007                    ?_colorclick_init 0001  
                _colorclick_readRed 12C4                          ??_ADC_init 0005  
        __size_of_clicker2LEDs_init 000A                read_card_RGB@current 0025  
               ?_colorclick_readRed 0009                          __pbssBANK0 0060  
                      _battery_flag 0042                       _read_card_RGB 002A  
     __size_ofi2_I2C_2_Master_Start 000A       __size_ofi2_I2C_2_Master_Write 000C  
                           ?_LowISR 0001                        _T2CLKCONbits 000FBF  
    __end_of_colorclick_writetoaddr 1660                             ?___flge 0005  
                           ?___wmul 0005                ??_colorclick_readRed 000B  
      __size_of_colorclick_readBlue 0050                             _INT1PPS 000DF1  
             _colorclick_readColour 1454                           ?___xxtofl 000C  
                           _SP4BRGH 000EE6                             _SP4BRGL 000EE5  
                 ?_interrupts_clear 0001                             _PWM6DCH 000FA3  
                           _PWM7DCH 000FA0                             _SSP2ADD 000ED6  
            ??_colorclick_readClear 000B                             _SSP2BUF 000ED5  
            ??_colorclick_readGreen 000B                  ??_interrupts_clear 0003  
                    ?_read_card_RGB 0025                __size_of_setMotorPWM 01D4  
            __size_of_DCmotors_init 0050                             _HighISR 0008  
        ?_colorclick_toggleClearLED 0001                  __size_of_turnRight 01E6  
                         _ADREFbits 000F58                  _I2C_2_Master_Start 16FE  
               i2_I2C_2_Master_Idle 15AE                  _I2C_2_Master_Write 16C6  
                           __Hparam 0000                 i2_I2C_2_Master_Stop 1712  
                           __Lparam 0000                     __size_of_LowISR 000E  
                   __size_of___flge 0104                             ___awdiv 1058  
                   __size_of___wmul 0026                 ?_I2C_2_Master_Start 0001  
                           ___lwdiv 1250                 ?_I2C_2_Master_Write 0001  
                           __pcinit 15FC             colorclick_readClear@tmp 000E  
                           __ramtop 0E00                           ?_turnLeft 001E  
                           __ptext0 0F82                             __ptext1 002A  
                           __ptext2 072A                             __ptext3 0910  
                           __ptext4 111C                             __ptext5 11B6  
                           __ptext6 0AF6                             __ptext7 15D6  
                           __ptext8 1058                             __ptext9 0CCA  
     __size_of_clicker2buttons_init 000C                ?i2_I2C_2_Master_Idle 0001  
                         _T2CONbits 000FBD                          ??___xxtofl 0010  
              ?i2_I2C_2_Master_Stop 0001                           _T2HLTbits 000FBE  
                           _reverse 11B6                       _RxBufWriteCnt 0040  
              ??_I2C_2_Master_Start 0006                ??_I2C_2_Master_Write 0006  
                    __pintcode_body 14DA                end_of_initialization 1614  
                setMotorPWM@PWMduty 001C             colorclick_readGreen@tmp 000E  
              __size_of_USART4_init 0020                             int_func 14DA  
                      turnRight@deg 0022                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
                     _DCmotors_init 1404                          ??_turnLeft 0023  
                         _PORTFbits 000F8E              ?_colorclick_readColour 0010  
             ??i2_I2C_2_Master_Idle 0001                   __end_of_turnRight 0910  
             ??i2_I2C_2_Master_Stop 0002                       ___xxtofl@sign 0014  
                         _TRISAbits 000F81                           _TRISBbits 000F82  
                         _TRISCbits 000F83                           _TRISDbits 000F84  
                         _TRISEbits 000F85                           _TRISFbits 000F86  
                         _TRISGbits 000F87                           _TRISHbits 000F88  
                   ??_read_card_RGB 0031                   __size_of_ADC_init 001A  
           ??_I2C_2_Master_RepStart 0006                        _EUSART4RXbuf 009C  
                      _EUSART4TXbuf 0060                          main@motorL 00BC  
                        main@motorR 00C5                      __end_of_LowISR 0026  
                    __end_of___flge 0F82                      ?_DCmotors_init 0001  
                    __end_of___wmul 15FC                 start_initialization 15FC  
                     _TxBufWriteCnt 003E                     _returnhome_flag 0041  
               _colorclick_readBlue 13B4                            ??_LowISR 0004  
                   read_card_RGB@mL 002D                     read_card_RGB@mR 002F  
                          ??___flge 000D                            ??___wmul 0009  
     i2I2C_2_Master_Write@data_byte 0002        __end_ofi2_I2C_2_Master_Start 1726  
              ?_colorclick_readBlue 0009        __end_ofi2_I2C_2_Master_Write 16EA  
                       __pbssCOMRAM 003D                       __pcstackBANK0 00B4  
           __size_of_buggyLEDs_init 0016                   __size_of___xxtofl 01B4  
          __size_of_colorclick_init 0040                            ?_HighISR 0001  
                         _card_flag 0043         ??_colorclick_toggleClearLED 0005  
         __size_of_interrupts_clear 0016                    ___lwdiv@dividend 0005  
                       _clear_lower 00B2                         _clear_upper 00B0  
                         __pintcode 0008                     ??_DCmotors_init 0005  
                          ?___awdiv 000B                            ?___lwdiv 0005  
       __size_of_colorclick_readRed 0050                         __pintcodelo 0018  
             ??_colorclick_readBlue 000B                I2C_2_Master_Read@ack 0007  
              I2C_2_Master_Read@tmp 0008                   __size_of_turnLeft 01E6  
                 _I2C_2_Master_Idle 1586                   _I2C_2_Master_Init 155C  
                 _I2C_2_Master_Read 1498                   _I2C_2_Master_Stop 16F4  
                      _RxBufReadCnt 003F                            _ADC_init 1680  
                          ?_reverse 001E                  ?_I2C_2_Master_Idle 0001  
                ?_I2C_2_Master_Init 0001                  ?_I2C_2_Master_Read 0001  
                     ??_setMotorPWM 0015                  ?_I2C_2_Master_Stop 0001  
                  ___lwdiv@quotient 000A       __size_of_colorclick_readClear 0050  
            colorclick_readBlue@tmp 000E                         turnLeft@deg 0022  
     __size_of_colorclick_readGreen 0050        __end_of_clicker2buttons_init 16DE  
               ??_I2C_2_Master_Idle 0005                 ??_I2C_2_Master_Init 0005  
               ??_I2C_2_Master_Read 0006                      ___wmul@product 0009  
                          _LATAbits 000F79                 ??_I2C_2_Master_Stop 0006  
                          _LATCbits 000F7B                            _LATDbits 000F7C  
                          _LATEbits 000F7D                            _LATFbits 000F7E  
                          _LATGbits 000F7F         colorclick_writetoaddr@value 0007  
                          _LATHbits 000F80                            _IPR0bits 000E1F  
                          _PIE0bits 000E29                            _PIE4bits 000E2D  
                          i2u213_40 14EA                            i2u213_41 14E6  
                          i2u214_40 1500                            i2u214_41 14F8  
                       turnRight@mL 001E                         turnRight@mR 0020  
                          i2u128_40 15BE                            i2u215_48 1502  
                          i2u128_41 15BA                            i2u129_40 15D4  
                          i2u129_41 15D0                            _PIR0bits 000E33  
                          _PIR4bits 000E37                            _SSP2CON2 000EDA  
                          _SSP2STAT 000ED8             ??_colorclick_readColour 0018  
                        _ADCON0bits 000F60           __end_of_I2C_2_Master_Idle 15AE  
         _colorclick_toggleClearLED 161E           __end_of_I2C_2_Master_Init 1586  
         __end_of_I2C_2_Master_Read 14DA                   ___wmul@multiplier 0005  
         __end_of_I2C_2_Master_Stop 16FE                        setMotorPWM@m 0013  
       I2C_2_Master_Write@data_byte 0006                        _TxBufReadCnt 003D  
                         _turnRight 072A                       ??_USART4_init 0005  
       __size_of_I2C_2_Master_Start 000A         __size_of_I2C_2_Master_Write 000C  
      colorclick_readColour@current 0010      __size_of_I2C_2_Master_RepStart 000A  
     __end_of_I2C_2_Master_RepStart 16F4            ??_colorclick_writetoaddr 0008  
               __end_of_setMotorPWM 0CCA                    __size_of_HighISR 1514  
              i2_I2C_2_Master_Start 171C                   ??_colorclick_init 0009  
              i2_I2C_2_Master_Write 16DE                            __Hrparam 0000  
                          __Lrparam 0000         __end_ofi2_I2C_2_Master_Idle 15D6  
       __end_ofi2_I2C_2_Master_Stop 171C                    __size_of___awdiv 00C4  
                  __size_of___lwdiv 0074                  read_card_RGB@B_rel 0039  
                read_card_RGB@G_rel 0035                  read_card_RGB@R_rel 0031  
                        _ANSELBbits 000E9A                          _ANSELDbits 000EA7  
                        _ANSELFbits 000EB4                            ___xxtofl 0CCA  
                    _buggyLEDs_init 169A                     ___lwdiv@divisor 0007  
                   ___lwdiv@counter 0009                          ?_turnRight 001E  
                          __ptext10 1250                            __ptext11 0E7E  
                          __ptext20 1640                            __ptext12 1454  
                          __ptext21 16C6                            __ptext13 12C4  
                          __ptext30 1708                            __ptext22 16F4  
                          __ptext14 1314                            __ptext31 169A  
                          __ptext23 16FE                            __ptext15 1364  
                          __ptext32 1680                            __ptext24 1586  
                          __ptext16 13B4                            __ptext25 161E  
                          __ptext17 16EA                            __ptext26 155C  
                          __ptext18 1498                            __ptext35 16B0  
                          __ptext27 1660                            __ptext19 151C  
                          __ptext36 16DE                            __ptext28 1404  
                          __ptext37 1712                            __ptext29 16D2  
                          __ptext38 171C                            __ptext39 15AE  
                  __size_of_reverse 009A                        _SSP2CON1bits 000ED9  
                      _SSP2CON2bits 000EDA               __end_of_read_card_RGB 072A  
                     __size_of_main 00D6                       __size_of_stop 009A  
                        turnLeft@mL 001E                          turnLeft@mR 0020  
             ?i2_I2C_2_Master_Start 0001               ?i2_I2C_2_Master_Write 0001  
               __end_of_USART4_init 1680                    _interrupts_clear 16B0  
             colorclick_readRed@tmp 000E                           reverse@mL 001E  
                         reverse@mR 0020                            isa$xinst 000000  
                        _RC4STAbits 000EE7                            int$flags 0044  
                          _turnLeft 0910          __size_of_I2C_2_Master_Idle 0028  
        __size_of_I2C_2_Master_Init 002A          __size_of_I2C_2_Master_Read 0042  
              _clicker2buttons_init 16D2          __size_of_I2C_2_Master_Stop 000A  
            __end_of_buggyLEDs_init 16B0                          _INTCONbits 000FF2  
                       _setMotorPWM 0AF6                         _PWM6CONbits 000FA4  
                       _PWM7CONbits 000FA1                            intlevel1 0000  
                          intlevel2 0000     __size_of_colorclick_writetoaddr 0020  
             ?_clicker2buttons_init 0001                     ?_buggyLEDs_init 0001  
                        _SSP2DATPPS 000E1D                          _SSP2CLKPPS 000E1C  
                       ??_turnRight 0023  __size_of_colorclick_toggleClearLED 0022  
                       _USART4_init 1660                          _TX4STAbits 000EE8  
            ??i2_I2C_2_Master_Start 0002              ??i2_I2C_2_Master_Write 0002  
